# 1 "euler3d.cu"
# 61 "/home/bachelor/deicide218/cuda-4.2/include/device_types.h"
#if 0
# 61
enum cudaRoundMode { 
# 63
cudaRoundNearest, 
# 64
cudaRoundZero, 
# 65
cudaRoundPosInf, 
# 66
cudaRoundMinInf
# 67
}; 
#endif
# 149 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 3
typedef long ptrdiff_t; 
# 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 3
typedef unsigned long size_t; 
#include "crt/host_runtime.h"
# 126 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 126
enum cudaError { 
# 133
cudaSuccess, 
# 139
cudaErrorMissingConfiguration, 
# 145
cudaErrorMemoryAllocation, 
# 151
cudaErrorInitializationError, 
# 161 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorLaunchFailure, 
# 170 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 180 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 189 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 195
cudaErrorInvalidDeviceFunction, 
# 204 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 210
cudaErrorInvalidDevice, 
# 216
cudaErrorInvalidValue, 
# 222
cudaErrorInvalidPitchValue, 
# 228
cudaErrorInvalidSymbol, 
# 233
cudaErrorMapBufferObjectFailed, 
# 238
cudaErrorUnmapBufferObjectFailed, 
# 244
cudaErrorInvalidHostPointer, 
# 250
cudaErrorInvalidDevicePointer, 
# 256
cudaErrorInvalidTexture, 
# 262
cudaErrorInvalidTextureBinding, 
# 269
cudaErrorInvalidChannelDescriptor, 
# 275
cudaErrorInvalidMemcpyDirection, 
# 285 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 294 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 303 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorTextureNotBound, 
# 312 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorSynchronizationError, 
# 318
cudaErrorInvalidFilterSetting, 
# 324
cudaErrorInvalidNormSetting, 
# 332
cudaErrorMixedDeviceExecution, 
# 339
cudaErrorCudartUnloading, 
# 344
cudaErrorUnknown, 
# 352
cudaErrorNotYetImplemented, 
# 361 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 368
cudaErrorInvalidResourceHandle, 
# 376
cudaErrorNotReady, 
# 383
cudaErrorInsufficientDriver, 
# 396 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorSetOnActiveProcess, 
# 402
cudaErrorInvalidSurface, 
# 408
cudaErrorNoDevice, 
# 414
cudaErrorECCUncorrectable, 
# 419
cudaErrorSharedObjectSymbolNotFound, 
# 424
cudaErrorSharedObjectInitFailed, 
# 430
cudaErrorUnsupportedLimit, 
# 436
cudaErrorDuplicateVariableName, 
# 442
cudaErrorDuplicateTextureName, 
# 448
cudaErrorDuplicateSurfaceName, 
# 458 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 463
cudaErrorInvalidKernelImage, 
# 471
cudaErrorNoKernelImageForDevice, 
# 484 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
cudaErrorIncompatibleDriverContext, 
# 491
cudaErrorPeerAccessAlreadyEnabled, 
# 498
cudaErrorPeerAccessNotEnabled, 
# 504
cudaErrorDeviceAlreadyInUse = 54, 
# 512
cudaErrorProfilerDisabled, 
# 519
cudaErrorProfilerNotInitialized, 
# 526
cudaErrorProfilerAlreadyStarted, 
# 532
cudaErrorProfilerAlreadyStopped, 
# 540
cudaErrorAssert, 
# 547
cudaErrorTooManyPeers, 
# 553
cudaErrorHostMemoryAlreadyRegistered, 
# 559
cudaErrorHostMemoryNotRegistered, 
# 564
cudaErrorOperatingSystem, 
# 569
cudaErrorStartupFailure = 127, 
# 577
cudaErrorApiFailureBase = 10000
# 578
}; 
#endif
# 583 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 583
enum cudaChannelFormatKind { 
# 585
cudaChannelFormatKindSigned, 
# 586
cudaChannelFormatKindUnsigned, 
# 587
cudaChannelFormatKindFloat, 
# 588
cudaChannelFormatKindNone
# 589
}; 
#endif
# 594 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 594
struct cudaChannelFormatDesc { 
# 596
int x; 
# 597
int y; 
# 598
int z; 
# 599
int w; 
# 600
cudaChannelFormatKind f; 
# 601
}; 
#endif
# 606 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
struct cudaArray; 
# 611
#if 0
# 611
enum cudaMemoryType { 
# 613
cudaMemoryTypeHost = 1, 
# 614
cudaMemoryTypeDevice
# 615
}; 
#endif
# 620 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 620
enum cudaMemcpyKind { 
# 622
cudaMemcpyHostToHost, 
# 623
cudaMemcpyHostToDevice, 
# 624
cudaMemcpyDeviceToHost, 
# 625
cudaMemcpyDeviceToDevice, 
# 626
cudaMemcpyDefault
# 627
}; 
#endif
# 633 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 633
struct cudaPitchedPtr { 
# 635
void *ptr; 
# 636
size_t pitch; 
# 637
size_t xsize; 
# 638
size_t ysize; 
# 639
}; 
#endif
# 645 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 645
struct cudaExtent { 
# 647
size_t width; 
# 648
size_t height; 
# 649
size_t depth; 
# 650
}; 
#endif
# 656 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 656
struct cudaPos { 
# 658
size_t x; 
# 659
size_t y; 
# 660
size_t z; 
# 661
}; 
#endif
# 666 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 666
struct cudaMemcpy3DParms { 
# 668
cudaArray *srcArray; 
# 669
cudaPos srcPos; 
# 670
cudaPitchedPtr srcPtr; 
# 672
cudaArray *dstArray; 
# 673
cudaPos dstPos; 
# 674
cudaPitchedPtr dstPtr; 
# 676
cudaExtent extent; 
# 677
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 678
}; 
#endif
# 683 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 683
struct cudaMemcpy3DPeerParms { 
# 685
cudaArray *srcArray; 
# 686
cudaPos srcPos; 
# 687
cudaPitchedPtr srcPtr; 
# 688
int srcDevice; 
# 690
cudaArray *dstArray; 
# 691
cudaPos dstPos; 
# 692
cudaPitchedPtr dstPtr; 
# 693
int dstDevice; 
# 695
cudaExtent extent; 
# 696
}; 
#endif
# 701 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
struct cudaGraphicsResource; 
# 706
#if 0
# 706
enum cudaGraphicsRegisterFlags { 
# 708
cudaGraphicsRegisterFlagsNone, 
# 709
cudaGraphicsRegisterFlagsReadOnly, 
# 710
cudaGraphicsRegisterFlagsWriteDiscard, 
# 711
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 712
cudaGraphicsRegisterFlagsTextureGather = 8
# 713
}; 
#endif
# 718 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 718
enum cudaGraphicsMapFlags { 
# 720
cudaGraphicsMapFlagsNone, 
# 721
cudaGraphicsMapFlagsReadOnly, 
# 722
cudaGraphicsMapFlagsWriteDiscard
# 723
}; 
#endif
# 728 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 728
enum cudaGraphicsCubeFace { 
# 730
cudaGraphicsCubeFacePositiveX, 
# 731
cudaGraphicsCubeFaceNegativeX, 
# 732
cudaGraphicsCubeFacePositiveY, 
# 733
cudaGraphicsCubeFaceNegativeY, 
# 734
cudaGraphicsCubeFacePositiveZ, 
# 735
cudaGraphicsCubeFaceNegativeZ
# 736
}; 
#endif
# 741 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 741
struct cudaPointerAttributes { 
# 747
cudaMemoryType memoryType; 
# 758 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
int device; 
# 764
void *devicePointer; 
# 770
void *hostPointer; 
# 771
}; 
#endif
# 776 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 776
struct cudaFuncAttributes { 
# 783
size_t sharedSizeBytes; 
# 789
size_t constSizeBytes; 
# 794
size_t localSizeBytes; 
# 801
int maxThreadsPerBlock; 
# 806
int numRegs; 
# 813
int ptxVersion; 
# 820
int binaryVersion; 
# 821
}; 
#endif
# 826 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 826
enum cudaFuncCache { 
# 828
cudaFuncCachePreferNone, 
# 829
cudaFuncCachePreferShared, 
# 830
cudaFuncCachePreferL1, 
# 831
cudaFuncCachePreferEqual
# 832
}; 
#endif
# 838 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 838
enum cudaSharedMemConfig { 
# 840
cudaSharedMemBankSizeDefault, 
# 841
cudaSharedMemBankSizeFourByte, 
# 842
cudaSharedMemBankSizeEightByte
# 843
}; 
#endif
# 848 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 848
enum cudaComputeMode { 
# 850
cudaComputeModeDefault, 
# 851
cudaComputeModeExclusive, 
# 852
cudaComputeModeProhibited, 
# 853
cudaComputeModeExclusiveProcess
# 854
}; 
#endif
# 859 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 859
enum cudaLimit { 
# 861
cudaLimitStackSize, 
# 862
cudaLimitPrintfFifoSize, 
# 863
cudaLimitMallocHeapSize
# 864
}; 
#endif
# 869 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 869
enum cudaOutputMode { 
# 871
cudaKeyValuePair, 
# 872
cudaCSV
# 873
}; 
#endif
# 878 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 878
struct cudaDeviceProp { 
# 880
char name[256]; 
# 881
size_t totalGlobalMem; 
# 882
size_t sharedMemPerBlock; 
# 883
int regsPerBlock; 
# 884
int warpSize; 
# 885
size_t memPitch; 
# 886
int maxThreadsPerBlock; 
# 887
int maxThreadsDim[3]; 
# 888
int maxGridSize[3]; 
# 889
int clockRate; 
# 890
size_t totalConstMem; 
# 891
int major; 
# 892
int minor; 
# 893
size_t textureAlignment; 
# 894
size_t texturePitchAlignment; 
# 895
int deviceOverlap; 
# 896
int multiProcessorCount; 
# 897
int kernelExecTimeoutEnabled; 
# 898
int integrated; 
# 899
int canMapHostMemory; 
# 900
int computeMode; 
# 901
int maxTexture1D; 
# 902
int maxTexture1DLinear; 
# 903
int maxTexture2D[2]; 
# 904
int maxTexture2DLinear[3]; 
# 905
int maxTexture2DGather[2]; 
# 906
int maxTexture3D[3]; 
# 907
int maxTextureCubemap; 
# 908
int maxTexture1DLayered[2]; 
# 909
int maxTexture2DLayered[3]; 
# 910
int maxTextureCubemapLayered[2]; 
# 911
int maxSurface1D; 
# 912
int maxSurface2D[2]; 
# 913
int maxSurface3D[3]; 
# 914
int maxSurface1DLayered[2]; 
# 915
int maxSurface2DLayered[3]; 
# 916
int maxSurfaceCubemap; 
# 917
int maxSurfaceCubemapLayered[2]; 
# 918
size_t surfaceAlignment; 
# 919
int concurrentKernels; 
# 920
int ECCEnabled; 
# 921
int pciBusID; 
# 922
int pciDeviceID; 
# 923
int pciDomainID; 
# 924
int tccDriver; 
# 925
int asyncEngineCount; 
# 926
int unifiedAddressing; 
# 927
int memoryClockRate; 
# 928
int memoryBusWidth; 
# 929
int l2CacheSize; 
# 930
int maxThreadsPerMultiProcessor; 
# 931
}; 
#endif
# 993 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 993
struct cudaIpcEventHandle_st { 
# 995
char reserved[64]; 
# 996
}; 
#endif
# 998 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
# 998
struct cudaIpcMemHandle_st { 
# 1000
char reserved[64]; 
# 1001
}; 
#endif
# 1012 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef cudaError 
# 1012
cudaError_t; 
#endif
# 1017 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 1017
cudaStream_t; 
#endif
# 1022 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 1022
cudaEvent_t; 
#endif
# 1027 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 1027
cudaGraphicsResource_t; 
#endif
# 1032 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef struct CUuuid_st 
# 1032
cudaUUID_t; 
#endif
# 1037 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef cudaIpcEventHandle_st 
# 1037
cudaIpcEventHandle_t; 
#endif
# 1038 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef cudaIpcMemHandle_st 
# 1038
cudaIpcMemHandle_t; 
#endif
# 1043 "/home/bachelor/deicide218/cuda-4.2/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 1043
cudaOutputMode_t; 
#endif
# 84 "/home/bachelor/deicide218/cuda-4.2/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/home/bachelor/deicide218/cuda-4.2/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/home/bachelor/deicide218/cuda-4.2/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 84 "/home/bachelor/deicide218/cuda-4.2/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/home/bachelor/deicide218/cuda-4.2/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/home/bachelor/deicide218/cuda-4.2/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/home/bachelor/deicide218/cuda-4.2/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 135
int __cudaReserved[15]; 
# 136
}; 
#endif
# 94 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 94
struct char1 { 
# 96
signed char x; 
# 97
}; 
#endif
# 99 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 99
struct uchar1 { 
# 101
unsigned char x; 
# 102
}; 
#endif
# 105 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 105
struct __attribute((aligned(2))) char2 { 
# 107
signed char x, y; 
# 108
}; 
#endif
# 110 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 110
struct __attribute((aligned(2))) uchar2 { 
# 112
unsigned char x, y; 
# 113
}; 
#endif
# 115 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 115
struct char3 { 
# 117
signed char x, y, z; 
# 118
}; 
#endif
# 120 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 120
struct uchar3 { 
# 122
unsigned char x, y, z; 
# 123
}; 
#endif
# 125 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 125
struct __attribute((aligned(4))) char4 { 
# 127
signed char x, y, z, w; 
# 128
}; 
#endif
# 130 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 130
struct __attribute((aligned(4))) uchar4 { 
# 132
unsigned char x, y, z, w; 
# 133
}; 
#endif
# 135 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 135
struct short1 { 
# 137
short x; 
# 138
}; 
#endif
# 140 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 140
struct ushort1 { 
# 142
unsigned short x; 
# 143
}; 
#endif
# 145 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 145
struct __attribute((aligned(4))) short2 { 
# 147
short x, y; 
# 148
}; 
#endif
# 150 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 150
struct __attribute((aligned(4))) ushort2 { 
# 152
unsigned short x, y; 
# 153
}; 
#endif
# 155 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 155
struct short3 { 
# 157
short x, y, z; 
# 158
}; 
#endif
# 160 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 160
struct ushort3 { 
# 162
unsigned short x, y, z; 
# 163
}; 
#endif
# 165 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 165
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 166 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 166
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 168 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 168
struct int1 { 
# 170
int x; 
# 171
}; 
#endif
# 173 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 173
struct uint1 { 
# 175
unsigned x; 
# 176
}; 
#endif
# 178 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 178
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 179 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 179
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 181 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 181
struct int3 { 
# 183
int x, y, z; 
# 184
}; 
#endif
# 186 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 186
struct uint3 { 
# 188
unsigned x, y, z; 
# 189
}; 
#endif
# 191 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 191
struct __attribute((aligned(16))) int4 { 
# 193
int x, y, z, w; 
# 194
}; 
#endif
# 196 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 196
struct __attribute((aligned(16))) uint4 { 
# 198
unsigned x, y, z, w; 
# 199
}; 
#endif
# 201 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 201
struct long1 { 
# 203
long x; 
# 204
}; 
#endif
# 206 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 206
struct ulong1 { 
# 208
unsigned long x; 
# 209
}; 
#endif
# 216 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 216
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 218
long x, y; 
# 219
}; 
#endif
# 221 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 221
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 223
unsigned long x, y; 
# 224
}; 
#endif
# 228 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 228
struct long3 { 
# 230
long x, y, z; 
# 231
}; 
#endif
# 233 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 233
struct ulong3 { 
# 235
unsigned long x, y, z; 
# 236
}; 
#endif
# 238 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 238
struct __attribute((aligned(16))) long4 { 
# 240
long x, y, z, w; 
# 241
}; 
#endif
# 243 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 243
struct __attribute((aligned(16))) ulong4 { 
# 245
unsigned long x, y, z, w; 
# 246
}; 
#endif
# 248 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 248
struct float1 { 
# 250
float x; 
# 251
}; 
#endif
# 253 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 253
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 255 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 255
struct float3 { 
# 257
float x, y, z; 
# 258
}; 
#endif
# 260 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 260
struct __attribute((aligned(16))) float4 { 
# 262
float x, y, z, w; 
# 263
}; 
#endif
# 265 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 265
struct longlong1 { 
# 267
long long x; 
# 268
}; 
#endif
# 270 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 270
struct ulonglong1 { 
# 272
unsigned long long x; 
# 273
}; 
#endif
# 275 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 275
struct __attribute((aligned(16))) longlong2 { 
# 277
long long x, y; 
# 278
}; 
#endif
# 280 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 280
struct __attribute((aligned(16))) ulonglong2 { 
# 282
unsigned long long x, y; 
# 283
}; 
#endif
# 285 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 285
struct longlong3 { 
# 287
long long x, y, z; 
# 288
}; 
#endif
# 290 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 290
struct ulonglong3 { 
# 292
unsigned long long x, y, z; 
# 293
}; 
#endif
# 295 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 295
struct __attribute((aligned(16))) longlong4 { 
# 297
long long x, y, z, w; 
# 298
}; 
#endif
# 300 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 300
struct __attribute((aligned(16))) ulonglong4 { 
# 302
unsigned long long x, y, z, w; 
# 303
}; 
#endif
# 305 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 305
struct double1 { 
# 307
double x; 
# 308
}; 
#endif
# 310 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 310
struct __attribute((aligned(16))) double2 { 
# 312
double x, y; 
# 313
}; 
#endif
# 315 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 315
struct double3 { 
# 317
double x, y, z; 
# 318
}; 
#endif
# 320 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 320
struct __attribute((aligned(16))) double4 { 
# 322
double x, y, z, w; 
# 323
}; 
#endif
# 338 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef char1 
# 338
char1; 
#endif
# 339 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uchar1 
# 339
uchar1; 
#endif
# 340 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef char2 
# 340
char2; 
#endif
# 341 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uchar2 
# 341
uchar2; 
#endif
# 342 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef char3 
# 342
char3; 
#endif
# 343 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uchar3 
# 343
uchar3; 
#endif
# 344 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef char4 
# 344
char4; 
#endif
# 345 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uchar4 
# 345
uchar4; 
#endif
# 346 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef short1 
# 346
short1; 
#endif
# 347 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ushort1 
# 347
ushort1; 
#endif
# 348 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef short2 
# 348
short2; 
#endif
# 349 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ushort2 
# 349
ushort2; 
#endif
# 350 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef short3 
# 350
short3; 
#endif
# 351 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ushort3 
# 351
ushort3; 
#endif
# 352 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef short4 
# 352
short4; 
#endif
# 353 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ushort4 
# 353
ushort4; 
#endif
# 354 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef int1 
# 354
int1; 
#endif
# 355 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uint1 
# 355
uint1; 
#endif
# 356 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef int2 
# 356
int2; 
#endif
# 357 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uint2 
# 357
uint2; 
#endif
# 358 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef int3 
# 358
int3; 
#endif
# 359 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uint3 
# 359
uint3; 
#endif
# 360 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef int4 
# 360
int4; 
#endif
# 361 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef uint4 
# 361
uint4; 
#endif
# 362 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef long1 
# 362
long1; 
#endif
# 363 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulong1 
# 363
ulong1; 
#endif
# 364 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef long2 
# 364
long2; 
#endif
# 365 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulong2 
# 365
ulong2; 
#endif
# 366 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef long3 
# 366
long3; 
#endif
# 367 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulong3 
# 367
ulong3; 
#endif
# 368 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef long4 
# 368
long4; 
#endif
# 369 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulong4 
# 369
ulong4; 
#endif
# 370 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef float1 
# 370
float1; 
#endif
# 371 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef float2 
# 371
float2; 
#endif
# 372 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef float3 
# 372
float3; 
#endif
# 373 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef float4 
# 373
float4; 
#endif
# 374 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef longlong1 
# 374
longlong1; 
#endif
# 375 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulonglong1 
# 375
ulonglong1; 
#endif
# 376 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef longlong2 
# 376
longlong2; 
#endif
# 377 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulonglong2 
# 377
ulonglong2; 
#endif
# 378 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef longlong3 
# 378
longlong3; 
#endif
# 379 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulonglong3 
# 379
ulonglong3; 
#endif
# 380 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef longlong4 
# 380
longlong4; 
#endif
# 381 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef ulonglong4 
# 381
ulonglong4; 
#endif
# 382 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef double1 
# 382
double1; 
#endif
# 383 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef double2 
# 383
double2; 
#endif
# 384 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef double3 
# 384
double3; 
#endif
# 385 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef double4 
# 385
double4; 
#endif
# 393 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
# 393
struct dim3 { 
# 395
unsigned x, y, z; 
# 401
}; 
#endif
# 403 "/home/bachelor/deicide218/cuda-4.2/include/vector_types.h"
#if 0
typedef dim3 
# 403
dim3; 
#endif
# 200 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceReset(); 
# 217 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSynchronize(); 
# 269 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetLimit(cudaLimit , size_t ); 
# 293 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetLimit(size_t * , cudaLimit ); 
# 323 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * ); 
# 364 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache ); 
# 393 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * ); 
# 435 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig ); 
# 458 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetByPCIBusId(int * , char * ); 
# 485 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetPCIBusId(char * , int , int ); 
# 527 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * , cudaEvent_t ); 
# 562 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * , cudaIpcEventHandle_t ); 
# 600 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * , void * ); 
# 647 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcOpenMemHandle(void ** , cudaIpcMemHandle_t , unsigned ); 
# 677 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcCloseMemHandle(void * ); 
# 711 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit(); 
# 735 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize(); 
# 794 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetLimit(cudaLimit , size_t ); 
# 825 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetLimit(size_t * , cudaLimit ); 
# 860 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * ); 
# 906 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetCacheConfig(cudaFuncCache ); 
# 958 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError(); 
# 999 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPeekAtLastError(); 
# 1013 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t ); 
# 1043 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int * ); 
# 1246 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp * , int ); 
# 1265 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int * , const cudaDeviceProp * ); 
# 1298 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int ); 
# 1315 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int * ); 
# 1344 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetValidDevices(int * , int ); 
# 1404 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDeviceFlags(unsigned ); 
# 1430 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t * ); 
# 1451 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t ); 
# 1487 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t , cudaEvent_t , unsigned ); 
# 1506 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t ); 
# 1524 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t ); 
# 1556 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t * ); 
# 1587 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t * , unsigned ); 
# 1620 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t , cudaStream_t  = 0); 
# 1649 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t ); 
# 1681 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t ); 
# 1706 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t ); 
# 1747 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float * , cudaEvent_t , cudaEvent_t ); 
# 1786 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3 , dim3 , size_t  = (0), cudaStream_t  = 0); 
# 1813 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void * , size_t , size_t ); 
# 1859 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetCacheConfig(const char * , cudaFuncCache ); 
# 1910 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetSharedMemConfig(const char * , cudaSharedMemConfig ); 
# 1946 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const char * ); 
# 1979 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * , const char * ); 
# 2001 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double * ); 
# 2023 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double * ); 
# 2055 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void ** , size_t ); 
# 2084 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void ** , size_t ); 
# 2123 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void ** , size_t * , size_t , size_t ); 
# 2165 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray ** , const cudaChannelFormatDesc * , size_t , size_t  = (0), unsigned  = (0)); 
# 2189 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void * ); 
# 2209 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void * ); 
# 2231 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray * ); 
# 2290 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostAlloc(void ** , size_t , unsigned ); 
# 2343 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostRegister(void * , size_t , unsigned ); 
# 2362 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostUnregister(void * ); 
# 2389 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetDevicePointer(void ** , void * , unsigned ); 
# 2408 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetFlags(unsigned * , void * ); 
# 2443 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr * , cudaExtent ); 
# 2543 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray ** , const cudaChannelFormatDesc * , cudaExtent , unsigned  = (0)); 
# 2641 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * ); 
# 2669 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * ); 
# 2773 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * , cudaStream_t  = 0); 
# 2795 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * , cudaStream_t  = 0); 
# 2814 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemGetInfo(size_t * , size_t * ); 
# 2835 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * , cudaExtent * , unsigned * , cudaArray * ); 
# 2870 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void * , const void * , size_t , cudaMemcpyKind ); 
# 2902 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyPeer(void * , int , const void * , int , size_t ); 
# 2936 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray * , size_t , size_t , const void * , size_t , cudaMemcpyKind ); 
# 2970 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void * , const cudaArray * , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3005 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray * , size_t , size_t , const cudaArray * , size_t , size_t , size_t , cudaMemcpyKind  = cudaMemcpyDeviceToDevice); 
# 3047 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void * , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3089 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray * , size_t , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3131 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void * , size_t , const cudaArray * , size_t , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3171 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray * , size_t , size_t , const cudaArray * , size_t , size_t , size_t , size_t , cudaMemcpyKind  = cudaMemcpyDeviceToDevice); 
# 3206 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const char * , const void * , size_t , size_t  = (0), cudaMemcpyKind  = cudaMemcpyHostToDevice); 
# 3241 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void * , const char * , size_t , size_t  = (0), cudaMemcpyKind  = cudaMemcpyDeviceToHost); 
# 3283 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void * , const void * , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3314 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyPeerAsync(void * , int , const void * , int , size_t , cudaStream_t  = 0); 
# 3355 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray * , size_t , size_t , const void * , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3396 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void * , const cudaArray * , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3447 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void * , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3497 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray * , size_t , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3546 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void * , size_t , const cudaArray * , size_t , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3588 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const char * , const void * , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3630 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void * , const char * , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3653 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void * , int , size_t ); 
# 3680 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void * , size_t , int , size_t , size_t ); 
# 3720 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr , int , cudaExtent ); 
# 3748 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemsetAsync(void * , int , size_t , cudaStream_t  = 0); 
# 3781 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2DAsync(void * , size_t , int , size_t , size_t , cudaStream_t  = 0); 
# 3827 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr , int , cudaExtent , cudaStream_t  = 0); 
# 3854 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void ** , const char * ); 
# 3876 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t * , const char * ); 
# 4021 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * , const void * ); 
# 4055 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceCanAccessPeer(int * , int , int ); 
# 4096 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceEnablePeerAccess(int , unsigned ); 
# 4121 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceDisablePeerAccess(int ); 
# 4167 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t ); 
# 4199 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t , unsigned ); 
# 4234 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsMapResources(int , cudaGraphicsResource_t * , cudaStream_t  = 0); 
# 4265 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnmapResources(int , cudaGraphicsResource_t * , cudaStream_t  = 0); 
# 4294 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedPointer(void ** , size_t * , cudaGraphicsResource_t ); 
# 4328 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray ** , cudaGraphicsResource_t , unsigned , unsigned ); 
# 4361 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * , const cudaArray * ); 
# 4396 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int , int , int , int , cudaChannelFormatKind ); 
# 4443 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t * , const textureReference * , const void * , const cudaChannelFormatDesc * , size_t  = (((2147483647) * 2U) + 1U)); 
# 4494 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture2D(size_t * , const textureReference * , const void * , const cudaChannelFormatDesc * , size_t , size_t , size_t ); 
# 4522 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference * , const cudaArray * , const cudaChannelFormatDesc * ); 
# 4543 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference * ); 
# 4568 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t * , const textureReference * ); 
# 4602 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference ** , const char * ); 
# 4636 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindSurfaceToArray(const surfaceReference * , const cudaArray * , const cudaChannelFormatDesc * ); 
# 4664 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceReference(const surfaceReference ** , const char * ); 
# 4692 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDriverGetVersion(int * ); 
# 4709 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaRuntimeGetVersion(int * ); 
# 4714
extern "C" cudaError_t cudaGetExportTable(const void ** , const cudaUUID_t * ); 
# 107 "/home/bachelor/deicide218/cuda-4.2/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 108
{ 
# 109
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 110
} 
# 112
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 113
{ 
# 114
int e = (((int)sizeof(unsigned short)) * 8); 
# 116
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 117
} 
# 119
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 120
{ 
# 121
int e = (((int)sizeof(unsigned short)) * 8); 
# 123
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 124
} 
# 126
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 127
{ 
# 128
int e = (((int)sizeof(unsigned short)) * 8); 
# 130
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 131
} 
# 133
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 134
{ 
# 135
int e = (((int)sizeof(unsigned short)) * 8); 
# 137
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 138
} 
# 140
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 141
{ 
# 142
int e = (((int)sizeof(char)) * 8); 
# 147
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 149
} 
# 151
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 152
{ 
# 153
int e = (((int)sizeof(signed char)) * 8); 
# 155
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 156
} 
# 158
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 159
{ 
# 160
int e = (((int)sizeof(unsigned char)) * 8); 
# 162
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 163
} 
# 165
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 166
{ 
# 167
int e = (((int)sizeof(signed char)) * 8); 
# 169
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 170
} 
# 172
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 173
{ 
# 174
int e = (((int)sizeof(unsigned char)) * 8); 
# 176
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 177
} 
# 179
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 180
{ 
# 181
int e = (((int)sizeof(signed char)) * 8); 
# 183
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 184
} 
# 186
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 187
{ 
# 188
int e = (((int)sizeof(unsigned char)) * 8); 
# 190
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 191
} 
# 193
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 194
{ 
# 195
int e = (((int)sizeof(signed char)) * 8); 
# 197
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 198
} 
# 200
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 201
{ 
# 202
int e = (((int)sizeof(unsigned char)) * 8); 
# 204
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 205
} 
# 207
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 208
{ 
# 209
int e = (((int)sizeof(short)) * 8); 
# 211
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 212
} 
# 214
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 215
{ 
# 216
int e = (((int)sizeof(unsigned short)) * 8); 
# 218
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 219
} 
# 221
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 222
{ 
# 223
int e = (((int)sizeof(short)) * 8); 
# 225
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 226
} 
# 228
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 229
{ 
# 230
int e = (((int)sizeof(unsigned short)) * 8); 
# 232
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 233
} 
# 235
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 236
{ 
# 237
int e = (((int)sizeof(short)) * 8); 
# 239
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 240
} 
# 242
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 243
{ 
# 244
int e = (((int)sizeof(unsigned short)) * 8); 
# 246
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 247
} 
# 249
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 250
{ 
# 251
int e = (((int)sizeof(short)) * 8); 
# 253
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 254
} 
# 256
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 257
{ 
# 258
int e = (((int)sizeof(unsigned short)) * 8); 
# 260
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 261
} 
# 263
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 264
{ 
# 265
int e = (((int)sizeof(int)) * 8); 
# 267
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 268
} 
# 270
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 271
{ 
# 272
int e = (((int)sizeof(unsigned)) * 8); 
# 274
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 275
} 
# 277
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 278
{ 
# 279
int e = (((int)sizeof(int)) * 8); 
# 281
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 282
} 
# 284
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 285
{ 
# 286
int e = (((int)sizeof(unsigned)) * 8); 
# 288
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 289
} 
# 291
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 292
{ 
# 293
int e = (((int)sizeof(int)) * 8); 
# 295
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 296
} 
# 298
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 299
{ 
# 300
int e = (((int)sizeof(unsigned)) * 8); 
# 302
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 303
} 
# 305
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 306
{ 
# 307
int e = (((int)sizeof(int)) * 8); 
# 309
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 310
} 
# 312
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 313
{ 
# 314
int e = (((int)sizeof(unsigned)) * 8); 
# 316
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 317
} 
# 379 "/home/bachelor/deicide218/cuda-4.2/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 380
{ 
# 381
int e = (((int)sizeof(float)) * 8); 
# 383
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 384
} 
# 386
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 387
{ 
# 388
int e = (((int)sizeof(float)) * 8); 
# 390
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 391
} 
# 393
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 394
{ 
# 395
int e = (((int)sizeof(float)) * 8); 
# 397
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 398
} 
# 400
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 401
{ 
# 402
int e = (((int)sizeof(float)) * 8); 
# 404
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 405
} 
# 79 "/home/bachelor/deicide218/cuda-4.2/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/home/bachelor/deicide218/cuda-4.2/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/home/bachelor/deicide218/cuda-4.2/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 69 "/home/bachelor/deicide218/cuda-4.2/include/vector_functions.h"
static inline char1 make_char1(signed char x) 
# 70
{ 
# 71
char1 t; (t.x) = x; return t; 
# 72
} 
# 74
static inline uchar1 make_uchar1(unsigned char x) 
# 75
{ 
# 76
uchar1 t; (t.x) = x; return t; 
# 77
} 
# 79
static inline char2 make_char2(signed char x, signed char y) 
# 80
{ 
# 81
char2 t; (t.x) = x; (t.y) = y; return t; 
# 82
} 
# 84
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 85
{ 
# 86
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 87
} 
# 89
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 90
{ 
# 91
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 92
} 
# 94
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 95
{ 
# 96
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 97
} 
# 99
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 100
{ 
# 101
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 102
} 
# 104
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 105
{ 
# 106
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 107
} 
# 109
static inline short1 make_short1(short x) 
# 110
{ 
# 111
short1 t; (t.x) = x; return t; 
# 112
} 
# 114
static inline ushort1 make_ushort1(unsigned short x) 
# 115
{ 
# 116
ushort1 t; (t.x) = x; return t; 
# 117
} 
# 119
static inline short2 make_short2(short x, short y) 
# 120
{ 
# 121
short2 t; (t.x) = x; (t.y) = y; return t; 
# 122
} 
# 124
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 125
{ 
# 126
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 127
} 
# 129
static inline short3 make_short3(short x, short y, short z) 
# 130
{ 
# 131
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 132
} 
# 134
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 135
{ 
# 136
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 137
} 
# 139
static inline short4 make_short4(short x, short y, short z, short w) 
# 140
{ 
# 141
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 142
} 
# 144
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 145
{ 
# 146
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 147
} 
# 149
static inline int1 make_int1(int x) 
# 150
{ 
# 151
int1 t; (t.x) = x; return t; 
# 152
} 
# 154
static inline uint1 make_uint1(unsigned x) 
# 155
{ 
# 156
uint1 t; (t.x) = x; return t; 
# 157
} 
# 159
static inline int2 make_int2(int x, int y) 
# 160
{ 
# 161
int2 t; (t.x) = x; (t.y) = y; return t; 
# 162
} 
# 164
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 165
{ 
# 166
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 167
} 
# 169
static inline int3 make_int3(int x, int y, int z) 
# 170
{ 
# 171
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 172
} 
# 174
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 175
{ 
# 176
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 177
} 
# 179
static inline int4 make_int4(int x, int y, int z, int w) 
# 180
{ 
# 181
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 182
} 
# 184
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 185
{ 
# 186
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 187
} 
# 189
static inline long1 make_long1(long x) 
# 190
{ 
# 191
long1 t; (t.x) = x; return t; 
# 192
} 
# 194
static inline ulong1 make_ulong1(unsigned long x) 
# 195
{ 
# 196
ulong1 t; (t.x) = x; return t; 
# 197
} 
# 199
static inline long2 make_long2(long x, long y) 
# 200
{ 
# 201
long2 t; (t.x) = x; (t.y) = y; return t; 
# 202
} 
# 204
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 205
{ 
# 206
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 207
} 
# 209
static inline long3 make_long3(long x, long y, long z) 
# 210
{ 
# 211
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 212
} 
# 214
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 215
{ 
# 216
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 217
} 
# 219
static inline long4 make_long4(long x, long y, long z, long w) 
# 220
{ 
# 221
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 222
} 
# 224
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 225
{ 
# 226
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 227
} 
# 229
static inline float1 make_float1(float x) 
# 230
{ 
# 231
float1 t; (t.x) = x; return t; 
# 232
} 
# 234
static inline float2 make_float2(float x, float y) 
# 235
{ 
# 236
float2 t; (t.x) = x; (t.y) = y; return t; 
# 237
} 
# 239
static inline float3 make_float3(float x, float y, float z) 
# 240
{ 
# 241
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 242
} 
# 244
static inline float4 make_float4(float x, float y, float z, float w) 
# 245
{ 
# 246
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 247
} 
# 249
static inline longlong1 make_longlong1(long long x) 
# 250
{ 
# 251
longlong1 t; (t.x) = x; return t; 
# 252
} 
# 254
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 255
{ 
# 256
ulonglong1 t; (t.x) = x; return t; 
# 257
} 
# 259
static inline longlong2 make_longlong2(long long x, long long y) 
# 260
{ 
# 261
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 262
} 
# 264
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 265
{ 
# 266
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 267
} 
# 269
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 270
{ 
# 271
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 272
} 
# 274
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 275
{ 
# 276
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 277
} 
# 279
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 280
{ 
# 281
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 282
} 
# 284
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 285
{ 
# 286
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 287
} 
# 289
static inline double1 make_double1(double x) 
# 290
{ 
# 291
double1 t; (t.x) = x; return t; 
# 292
} 
# 294
static inline double2 make_double2(double x, double y) 
# 295
{ 
# 296
double2 t; (t.x) = x; (t.y) = y; return t; 
# 297
} 
# 299
static inline double3 make_double3(double x, double y, double z) 
# 300
{ 
# 301
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 302
} 
# 304
static inline double4 make_double4(double x, double y, double z, double w) 
# 305
{ 
# 306
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 307
} 
# 44 "/usr/include/string.h" 3
extern "C" void *memcpy(void *__restrict__ , const void *__restrict__ , size_t ) throw()
# 46
 __attribute((__nonnull__(1, 2))); 
# 49
extern "C" void *memmove(void * , const void * , size_t ) throw()
# 50
 __attribute((__nonnull__(1, 2))); 
# 57
extern "C" void *memccpy(void *__restrict__ , const void *__restrict__ , int , size_t ) throw()
# 59
 __attribute((__nonnull__(1, 2))); 
# 65
extern "C" void *memset(void * , int , size_t ) throw() __attribute((__nonnull__(1))); 
# 68
extern "C" int memcmp(const void * , const void * , size_t ) throw()
# 69
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 75
extern __attribute((gnu_inline)) inline void *memchr(void * , int , size_t ) throw() __asm__("memchr")
# 76
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 77
extern __attribute((gnu_inline)) inline const void *memchr(const void * , int , size_t ) throw() __asm__("memchr")
# 78
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 81
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline void *
# 82
memchr(void *__s, int __c, size_t __n) throw() 
# 83
{ 
# 84
return __builtin_memchr(__s, __c, __n); 
# 85
} 
# 87
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const void *
# 88
memchr(const void *__s, int __c, size_t __n) throw() 
# 89
{ 
# 90
return __builtin_memchr(__s, __c, __n); 
# 91
} 
# 104
void *rawmemchr(void * , int ) throw() __asm__("rawmemchr")
# 105
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 106
const void *rawmemchr(const void * , int ) throw() __asm__("rawmemchr")
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 115
void *memrchr(void * , int , size_t ) throw() __asm__("memrchr")
# 116
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
const void *memrchr(const void * , int , size_t ) throw() __asm__("memrchr")
# 118
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 128
extern "C" char *strcpy(char *__restrict__ , const char *__restrict__ ) throw()
# 129
 __attribute((__nonnull__(1, 2))); 
# 131
extern "C" char *strncpy(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 133
 __attribute((__nonnull__(1, 2))); 
# 136
extern "C" char *strcat(char *__restrict__ , const char *__restrict__ ) throw()
# 137
 __attribute((__nonnull__(1, 2))); 
# 139
extern "C" char *strncat(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 140
 __attribute((__nonnull__(1, 2))); 
# 143
extern "C" int strcmp(const char * , const char * ) throw()
# 144
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 146
extern "C" int strncmp(const char * , const char * , size_t ) throw()
# 147
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 150
extern "C" int strcoll(const char * , const char * ) throw()
# 151
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 153
extern "C" size_t strxfrm(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 155
 __attribute((__nonnull__(2))); 
# 40 "/usr/include/xlocale.h" 3
extern "C" { typedef 
# 28
struct __locale_struct { 
# 31
struct __locale_data *__locales[13]; 
# 34
const unsigned short *__ctype_b; 
# 35
const int *__ctype_tolower; 
# 36
const int *__ctype_toupper; 
# 39
const char *__names[13]; 
# 40
} *__locale_t; }
# 43
extern "C" { typedef __locale_t locale_t; }
# 165 "/usr/include/string.h" 3
extern "C" int strcoll_l(const char * , const char * , __locale_t ) throw()
# 166
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 168
extern "C" size_t strxfrm_l(char * , const char * , size_t , __locale_t ) throw()
# 169
 __attribute((__nonnull__(2, 4))); 
# 175
extern "C" char *strdup(const char * ) throw()
# 176
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 183
extern "C" char *strndup(const char * , size_t ) throw()
# 184
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 215 "/usr/include/string.h" 3
extern __attribute((gnu_inline)) inline char *strchr(char * , int ) throw() __asm__("strchr")
# 216
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 217
extern __attribute((gnu_inline)) inline const char *strchr(const char * , int ) throw() __asm__("strchr")
# 218
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 221
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline char *
# 222
strchr(char *__s, int __c) throw() 
# 223
{ 
# 224
return __builtin_strchr(__s, __c); 
# 225
} 
# 227
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const char *
# 228
strchr(const char *__s, int __c) throw() 
# 229
{ 
# 230
return __builtin_strchr(__s, __c); 
# 231
} 
# 242
extern __attribute((gnu_inline)) inline char *strrchr(char * , int ) throw() __asm__("strrchr")
# 243
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244
extern __attribute((gnu_inline)) inline const char *strrchr(const char * , int ) throw() __asm__("strrchr")
# 245
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 248
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline char *
# 249
strrchr(char *__s, int __c) throw() 
# 250
{ 
# 251
return __builtin_strrchr(__s, __c); 
# 252
} 
# 254
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const char *
# 255
strrchr(const char *__s, int __c) throw() 
# 256
{ 
# 257
return __builtin_strrchr(__s, __c); 
# 258
} 
# 271
char *strchrnul(char * , int ) throw() __asm__("strchrnul")
# 272
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 273
const char *strchrnul(const char * , int ) throw() __asm__("strchrnul")
# 274
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 284
extern "C" size_t strcspn(const char * , const char * ) throw()
# 285
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 288
extern "C" size_t strspn(const char * , const char * ) throw()
# 289
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 294
extern __attribute((gnu_inline)) inline char *strpbrk(char * , const char * ) throw() __asm__("strpbrk")
# 295
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 296
extern __attribute((gnu_inline)) inline const char *strpbrk(const char * , const char * ) throw() __asm__("strpbrk")
# 297
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 300
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline char *
# 301
strpbrk(char *__s, const char *__accept) throw() 
# 302
{ 
# 303
return __builtin_strpbrk(__s, __accept); 
# 304
} 
# 306
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const char *
# 307
strpbrk(const char *__s, const char *__accept) throw() 
# 308
{ 
# 309
return __builtin_strpbrk(__s, __accept); 
# 310
} 
# 321
extern __attribute((gnu_inline)) inline char *strstr(char * , const char * ) throw() __asm__("strstr")
# 322
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 323
extern __attribute((gnu_inline)) inline const char *strstr(const char * , const char * ) throw() __asm__("strstr")
# 325
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 328
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline char *
# 329
strstr(char *__haystack, const char *__needle) throw() 
# 330
{ 
# 331
return __builtin_strstr(__haystack, __needle); 
# 332
} 
# 334
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const char *
# 335
strstr(const char *__haystack, const char *__needle) throw() 
# 336
{ 
# 337
return __builtin_strstr(__haystack, __needle); 
# 338
} 
# 348
extern "C" char *strtok(char *__restrict__ , const char *__restrict__ ) throw()
# 349
 __attribute((__nonnull__(2))); 
# 354
extern "C" char *__strtok_r(char *__restrict__ , const char *__restrict__ , char **__restrict__ ) throw()
# 357
 __attribute((__nonnull__(2, 3))); 
# 359
extern "C" char *strtok_r(char *__restrict__ , const char *__restrict__ , char **__restrict__ ) throw()
# 361
 __attribute((__nonnull__(2, 3))); 
# 367
char *strcasestr(char * , const char * ) throw() __asm__("strcasestr")
# 368
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 369
const char *strcasestr(const char * , const char * ) throw() __asm__("strcasestr")
# 371
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 382 "/usr/include/string.h" 3
extern "C" void *memmem(const void * , size_t , const void * , size_t ) throw()
# 384
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 388
extern "C" void *__mempcpy(void *__restrict__ , const void *__restrict__ , size_t ) throw()
# 390
 __attribute((__nonnull__(1, 2))); 
# 391
extern "C" void *mempcpy(void *__restrict__ , const void *__restrict__ , size_t ) throw()
# 393
 __attribute((__nonnull__(1, 2))); 
# 399
extern "C" size_t strlen(const char * ) throw()
# 400
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 406
extern "C" size_t strnlen(const char * , size_t ) throw()
# 407
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern "C" char *strerror(int ) throw(); 
# 438 "/usr/include/string.h" 3
extern "C" char *strerror_r(int , char * , size_t ) throw()
# 439
 __attribute((__nonnull__(2))); 
# 445
extern "C" char *strerror_l(int , __locale_t ) throw(); 
# 451
extern "C" void __bzero(void * , size_t ) throw() __attribute((__nonnull__(1))); 
# 455
extern "C" void bcopy(const void * , void * , size_t ) throw()
# 456
 __attribute((__nonnull__(1, 2))); 
# 459
extern "C" void bzero(void * , size_t ) throw() __attribute((__nonnull__(1))); 
# 462
extern "C" int bcmp(const void * , const void * , size_t ) throw()
# 463
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 469
extern __attribute((gnu_inline)) inline char *index(char * , int ) throw() __asm__("index")
# 470
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 471
extern __attribute((gnu_inline)) inline const char *index(const char * , int ) throw() __asm__("index")
# 472
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 475
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline char *
# 476
index(char *__s, int __c) throw() 
# 477
{ 
# 478
return __builtin_index(__s, __c); 
# 479
} 
# 481
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const char *
# 482
index(const char *__s, int __c) throw() 
# 483
{ 
# 484
return __builtin_index(__s, __c); 
# 485
} 
# 497
extern __attribute((gnu_inline)) inline char *rindex(char * , int ) throw() __asm__("rindex")
# 498
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 499
extern __attribute((gnu_inline)) inline const char *rindex(const char * , int ) throw() __asm__("rindex")
# 500
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 503
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline char *
# 504
rindex(char *__s, int __c) throw() 
# 505
{ 
# 506
return __builtin_rindex(__s, __c); 
# 507
} 
# 509
__attribute((__always_inline__)) __attribute((__gnu_inline__, __artificial__)) inline const char *
# 510
rindex(const char *__s, int __c) throw() 
# 511
{ 
# 512
return __builtin_rindex(__s, __c); 
# 513
} 
# 523
extern "C" int ffs(int ) throw() __attribute((const)); 
# 528
extern "C" int ffsl(long ) throw() __attribute((const)); 
# 530
extern "C" int ffsll(long long ) throw()
# 531
 __attribute((const)); 
# 536
extern "C" int strcasecmp(const char * , const char * ) throw()
# 537
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 540
extern "C" int strncasecmp(const char * , const char * , size_t ) throw()
# 541
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 547
extern "C" int strcasecmp_l(const char * , const char * , __locale_t ) throw()
# 549
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 551
extern "C" int strncasecmp_l(const char * , const char * , size_t , __locale_t ) throw()
# 553
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 559
extern "C" char *strsep(char **__restrict__ , const char *__restrict__ ) throw()
# 561
 __attribute((__nonnull__(1, 2))); 
# 566
extern "C" char *strsignal(int ) throw(); 
# 569
extern "C" char *__stpcpy(char *__restrict__ , const char *__restrict__ ) throw()
# 570
 __attribute((__nonnull__(1, 2))); 
# 571
extern "C" char *stpcpy(char *__restrict__ , const char *__restrict__ ) throw()
# 572
 __attribute((__nonnull__(1, 2))); 
# 576
extern "C" char *__stpncpy(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 578
 __attribute((__nonnull__(1, 2))); 
# 579
extern "C" char *stpncpy(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 581
 __attribute((__nonnull__(1, 2))); 
# 586
extern "C" int strverscmp(const char * , const char * ) throw()
# 587
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 590
extern "C" char *strfry(char * ) throw() __attribute((__nonnull__(1))); 
# 593
extern "C" void *memfrob(void * , size_t ) throw() __attribute((__nonnull__(1))); 
# 601
char *basename(char * ) throw() __asm__("basename")
# 602
 __attribute((__nonnull__(1))); 
# 603
const char *basename(const char * ) throw() __asm__("basename")
# 604
 __attribute((__nonnull__(1))); 
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
extern "C" { typedef unsigned char __u_char; }
# 32
extern "C" { typedef unsigned short __u_short; }
# 33
extern "C" { typedef unsigned __u_int; }
# 34
extern "C" { typedef unsigned long __u_long; }
# 37
extern "C" { typedef signed char __int8_t; }
# 38
extern "C" { typedef unsigned char __uint8_t; }
# 39
extern "C" { typedef signed short __int16_t; }
# 40
extern "C" { typedef unsigned short __uint16_t; }
# 41
extern "C" { typedef signed int __int32_t; }
# 42
extern "C" { typedef unsigned __uint32_t; }
# 44
extern "C" { typedef signed long __int64_t; }
# 45
extern "C" { typedef unsigned long __uint64_t; }
# 53
extern "C" { typedef long __quad_t; }
# 54
extern "C" { typedef unsigned long __u_quad_t; }
# 134 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
extern "C" { typedef unsigned long __dev_t; }
# 135
extern "C" { typedef unsigned __uid_t; }
# 136
extern "C" { typedef unsigned __gid_t; }
# 137
extern "C" { typedef unsigned long __ino_t; }
# 138
extern "C" { typedef unsigned long __ino64_t; }
# 139
extern "C" { typedef unsigned __mode_t; }
# 140
extern "C" { typedef unsigned long __nlink_t; }
# 141
extern "C" { typedef long __off_t; }
# 142
extern "C" { typedef long __off64_t; }
# 143
extern "C" { typedef int __pid_t; }
# 144
extern "C" { typedef struct { int __val[2]; } __fsid_t; }
# 145
extern "C" { typedef long __clock_t; }
# 146
extern "C" { typedef unsigned long __rlim_t; }
# 147
extern "C" { typedef unsigned long __rlim64_t; }
# 148
extern "C" { typedef unsigned __id_t; }
# 149
extern "C" { typedef long __time_t; }
# 150
extern "C" { typedef unsigned __useconds_t; }
# 151
extern "C" { typedef long __suseconds_t; }
# 153
extern "C" { typedef int __daddr_t; }
# 154
extern "C" { typedef long __swblk_t; }
# 155
extern "C" { typedef int __key_t; }
# 158
extern "C" { typedef int __clockid_t; }
# 161
extern "C" { typedef void *__timer_t; }
# 164
extern "C" { typedef long __blksize_t; }
# 169
extern "C" { typedef long __blkcnt_t; }
# 170
extern "C" { typedef long __blkcnt64_t; }
# 173
extern "C" { typedef unsigned long __fsblkcnt_t; }
# 174
extern "C" { typedef unsigned long __fsblkcnt64_t; }
# 177
extern "C" { typedef unsigned long __fsfilcnt_t; }
# 178
extern "C" { typedef unsigned long __fsfilcnt64_t; }
# 180
extern "C" { typedef long __ssize_t; }
# 184
extern "C" { typedef __off64_t __loff_t; }
# 185
extern "C" { typedef __quad_t *__qaddr_t; }
# 186
extern "C" { typedef char *__caddr_t; }
# 189
extern "C" { typedef long __intptr_t; }
# 192
extern "C" { typedef unsigned __socklen_t; }
# 60 "/usr/include/time.h" 3
extern "C" { typedef __clock_t clock_t; }
# 76 "/usr/include/time.h" 3
extern "C" { typedef __time_t time_t; }
# 92 "/usr/include/time.h" 3
extern "C" { typedef __clockid_t clockid_t; }
# 104 "/usr/include/time.h" 3
extern "C" { typedef __timer_t timer_t; }
# 120 "/usr/include/time.h" 3
extern "C" { struct timespec { 
# 122
__time_t tv_sec; 
# 123
long tv_nsec; 
# 124
}; }
# 133
extern "C" { struct tm { 
# 135
int tm_sec; 
# 136
int tm_min; 
# 137
int tm_hour; 
# 138
int tm_mday; 
# 139
int tm_mon; 
# 140
int tm_year; 
# 141
int tm_wday; 
# 142
int tm_yday; 
# 143
int tm_isdst; 
# 146
long tm_gmtoff; 
# 147
const char *tm_zone; 
# 152
}; }
# 161
extern "C" { struct itimerspec { 
# 163
timespec it_interval; 
# 164
timespec it_value; 
# 165
}; }
# 168
struct sigevent; 
# 174
extern "C" { typedef __pid_t pid_t; }
# 183
extern "C" clock_t clock() throw(); 
# 186
extern "C" time_t time(time_t * ) throw(); 
# 189
extern "C" double difftime(time_t , time_t ) throw()
# 190
 __attribute((const)); 
# 193
extern "C" time_t mktime(tm * ) throw(); 
# 199
extern "C" size_t strftime(char *__restrict__ , size_t , const char *__restrict__ , const tm *__restrict__ ) throw(); 
# 207
extern "C" char *strptime(const char *__restrict__ , const char *__restrict__ , tm * ) throw(); 
# 217
extern "C" size_t strftime_l(char *__restrict__ , size_t , const char *__restrict__ , const tm *__restrict__ , __locale_t ) throw(); 
# 224
extern "C" char *strptime_l(const char *__restrict__ , const char *__restrict__ , tm * , __locale_t ) throw(); 
# 233
extern "C" tm *gmtime(const time_t * ) throw(); 
# 237
extern "C" tm *localtime(const time_t * ) throw(); 
# 243
extern "C" tm *gmtime_r(const time_t *__restrict__ , tm *__restrict__ ) throw(); 
# 248
extern "C" tm *localtime_r(const time_t *__restrict__ , tm *__restrict__ ) throw(); 
# 255
extern "C" char *asctime(const tm * ) throw(); 
# 258
extern "C" char *ctime(const time_t * ) throw(); 
# 266
extern "C" char *asctime_r(const tm *__restrict__ , char *__restrict__ ) throw(); 
# 270
extern "C" char *ctime_r(const time_t *__restrict__ , char *__restrict__ ) throw(); 
# 276
extern "C" { extern char *__tzname[2]; } 
# 277
extern "C" { extern int __daylight; } 
# 278
extern "C" { extern long __timezone; } 
# 283
extern "C" { extern char *tzname[2]; } 
# 287
extern "C" void tzset() throw(); 
# 291
extern "C" { extern int daylight; } 
# 292
extern "C" { extern long timezone; } 
# 298
extern "C" int stime(const time_t * ) throw(); 
# 313 "/usr/include/time.h" 3
extern "C" time_t timegm(tm * ) throw(); 
# 316
extern "C" time_t timelocal(tm * ) throw(); 
# 319
extern "C" int dysize(int ) throw() __attribute((const)); 
# 328 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec * , timespec * ); 
# 333
extern "C" int clock_getres(clockid_t , timespec * ) throw(); 
# 336
extern "C" int clock_gettime(clockid_t , timespec * ) throw(); 
# 339
extern "C" int clock_settime(clockid_t , const timespec * ) throw(); 
# 347
extern "C" int clock_nanosleep(clockid_t , int , const timespec * , timespec * ); 
# 352
extern "C" int clock_getcpuclockid(pid_t , clockid_t * ) throw(); 
# 357
extern "C" int timer_create(clockid_t , sigevent *__restrict__ , timer_t *__restrict__ ) throw(); 
# 362
extern "C" int timer_delete(timer_t ) throw(); 
# 365
extern "C" int timer_settime(timer_t , int , const itimerspec *__restrict__ , itimerspec *__restrict__ ) throw(); 
# 370
extern "C" int timer_gettime(timer_t , itimerspec * ) throw(); 
# 374
extern "C" int timer_getoverrun(timer_t ) throw(); 
# 390 "/usr/include/time.h" 3
extern "C" { extern int getdate_err; } 
# 399 "/usr/include/time.h" 3
extern "C" tm *getdate(const char * ); 
# 413 "/usr/include/time.h" 3
extern "C" int getdate_r(const char *__restrict__ , tm *__restrict__ ); 
# 69 "/home/bachelor/deicide218/cuda-4.2/include/common_functions.h"
extern "C" clock_t clock() throw(); 
# 70
extern "C" void *memset(void *, int, size_t) throw(); 
# 71
extern "C" void *memcpy(void *, const void *, size_t) throw(); 
# 160 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" int abs(int) throw(); 
# 161
extern "C" long labs(long) throw(); 
# 162
extern "C" long long llabs(long long) throw(); 
# 175 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double fabs(double ) throw(); 
# 188 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float fabsf(float ) throw(); 
# 189
extern "C" int min(int, int); 
# 190
extern "C" unsigned umin(unsigned, unsigned); 
# 191
extern "C" long long llmin(long long, long long); 
# 192
extern "C" unsigned long long ullmin(unsigned long long, unsigned long long); 
# 208 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float fminf(float , float ) throw(); 
# 224 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double fmin(double , double ) throw(); 
# 225
extern "C" int max(int, int); 
# 226
extern "C" unsigned umax(unsigned, unsigned); 
# 227
extern "C" long long llmax(long long, long long); 
# 228
extern "C" unsigned long long ullmax(unsigned long long, unsigned long long); 
# 244 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float fmaxf(float , float ) throw(); 
# 260 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double fmax(double, double) throw(); 
# 273 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double sin(double ) throw(); 
# 286 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double cos(double ) throw(); 
# 301 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" void sincos(double , double * , double * ) throw(); 
# 317 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" void sincosf(float , float * , float * ) throw(); 
# 330 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double tan(double ) throw(); 
# 345 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double sqrt(double ) throw(); 
# 360 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double rsqrt(double ); 
# 375 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float rsqrtf(float ); 
# 390 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double log2(double ) throw(); 
# 401 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double exp2(double ) throw(); 
# 412 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float exp2f(float ) throw(); 
# 423 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double exp10(double ) throw(); 
# 435 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float exp10f(float ) throw(); 
# 446 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double expm1(double ) throw(); 
# 457 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float expm1f(float ) throw(); 
# 472 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float log2f(float ) throw(); 
# 487 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double log10(double ) throw(); 
# 502 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double log(double ) throw(); 
# 517 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double log1p(double ) throw(); 
# 532 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float log1pf(float ) throw(); 
# 546 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double floor(double ) throw(); 
# 557 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double exp(double ) throw(); 
# 570 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double cosh(double ) throw(); 
# 582 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double sinh(double ) throw(); 
# 594 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double tanh(double ) throw(); 
# 608 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double acosh(double ) throw(); 
# 622 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float acoshf(float ) throw(); 
# 634 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double asinh(double ) throw(); 
# 646 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float asinhf(float ) throw(); 
# 660 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double atanh(double ) throw(); 
# 674 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float atanhf(float ) throw(); 
# 686 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double ldexp(double , int ) throw(); 
# 698 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float ldexpf(float , int ) throw(); 
# 711 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double logb(double ) throw(); 
# 724 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float logbf(float ) throw(); 
# 742 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" int ilogb(double ) throw(); 
# 760 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" int ilogbf(float ) throw(); 
# 774 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double scalbn(double , int ) throw(); 
# 788 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float scalbnf(float , int ) throw(); 
# 802 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double scalbln(double , long ) throw(); 
# 816 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float scalblnf(float , long ) throw(); 
# 837 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double frexp(double , int * ) throw(); 
# 858 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float frexpf(float , int * ) throw(); 
# 871 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double round(double ) throw(); 
# 884 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float roundf(float ) throw(); 
# 898 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long lround(double ) throw(); 
# 912 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long lroundf(float ) throw(); 
# 926 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long long llround(double ) throw(); 
# 940 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long long llroundf(float ) throw(); 
# 951 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double rint(double ) throw(); 
# 962 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float rintf(float ) throw(); 
# 974 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long lrint(double ) throw(); 
# 986 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long lrintf(float ) throw(); 
# 998 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long long llrint(double ) throw(); 
# 1010 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" long long llrintf(float ) throw(); 
# 1023 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double nearbyint(double ) throw(); 
# 1036 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float nearbyintf(float ) throw(); 
# 1048 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double ceil(double ) throw(); 
# 1059 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double trunc(double ) throw(); 
# 1070 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float truncf(float ) throw(); 
# 1084 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double fdim(double , double ) throw(); 
# 1098 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float fdimf(float , float ) throw(); 
# 1113 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double atan2(double , double ) throw(); 
# 1126 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double atan(double ) throw(); 
# 1140 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double acos(double ) throw(); 
# 1154 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double asin(double ) throw(); 
# 1169 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double hypot(double , double ) throw(); 
# 1186 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float hypotf(float , float ) throw(); 
# 1200 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double cbrt(double ) throw(); 
# 1214 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float cbrtf(float ) throw(); 
# 1227 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double rcbrt(double ); 
# 1240 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float rcbrtf(float ); 
# 1254 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double sinpi(double ); 
# 1268 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float sinpif(float ); 
# 1282 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double cospi(double ); 
# 1296 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float cospif(float ); 
# 1324 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double pow(double , double ) throw(); 
# 1341 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double modf(double , double * ) throw(); 
# 1361 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double fmod(double , double ) throw(); 
# 1379 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double remainder(double , double ) throw(); 
# 1398 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float remainderf(float , float ) throw(); 
# 1417 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double remquo(double , double , int * ) throw(); 
# 1436 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float remquof(float , float , int * ) throw(); 
# 1451 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double j0(double ) throw(); 
# 1466 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float j0f(float ) throw(); 
# 1482 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double j1(double ) throw(); 
# 1498 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float j1f(float ) throw(); 
# 1514 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double jn(int , double ) throw(); 
# 1530 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float jnf(int , float ) throw(); 
# 1547 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double y0(double ) throw(); 
# 1564 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float y0f(float ) throw(); 
# 1581 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double y1(double ) throw(); 
# 1598 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float y1f(float ) throw(); 
# 1616 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double yn(int , double ) throw(); 
# 1634 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float ynf(int , float ) throw(); 
# 1648 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double erf(double ) throw(); 
# 1662 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float erff(float ) throw(); 
# 1677 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double erfinv(double ); 
# 1692 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float erfinvf(float ); 
# 1706 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double erfc(double ) throw(); 
# 1720 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float erfcf(float ) throw(); 
# 1738 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double lgamma(double ) throw(); 
# 1753 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double erfcinv(double ); 
# 1768 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float erfcinvf(float ); 
# 1778 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double erfcx(double ); 
# 1788 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float erfcxf(float ); 
# 1806 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float lgammaf(float ) throw(); 
# 1824 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double tgamma(double ) throw(); 
# 1842 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float tgammaf(float ) throw(); 
# 1851 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double copysign(double , double ) throw(); 
# 1860 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float copysignf(float , float ) throw(); 
# 1875 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double nextafter(double , double ) throw(); 
# 1890 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float nextafterf(float , float ) throw(); 
# 1902 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double nan(const char * ) throw(); 
# 1914 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float nanf(const char * ) throw(); 
# 1915
extern "C" int __isinff(float) throw(); 
# 1916
extern "C" int __isnanf(float) throw(); 
# 1925 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" int __finite(double) throw(); 
# 1926
extern "C" int __finitef(float) throw(); 
# 1927
extern "C" { extern __attribute((gnu_inline)) inline int __signbit(double) throw(); } 
# 1928
extern "C" int __isnan(double) throw(); 
# 1929
extern "C" int __isinf(double) throw(); 
# 1932
extern "C" { extern __attribute((gnu_inline)) inline int __signbitf(float) throw(); } 
# 1949 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" double fma(double , double , double ) throw(); 
# 1966 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float fmaf(float , float , float ) throw(); 
# 1971
extern "C" { extern __attribute((gnu_inline)) inline int __signbitl(long double) throw(); } 
# 1977
extern "C" int __finitel(long double) throw(); 
# 1978
extern "C" int __isinfl(long double) throw(); 
# 1979
extern "C" int __isnanl(long double) throw(); 
# 2017 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float acosf(float ) throw(); 
# 2031 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float asinf(float ) throw(); 
# 2045 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float atanf(float ) throw(); 
# 2060 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float atan2f(float , float ) throw(); 
# 2074 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float cosf(float ) throw(); 
# 2088 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float sinf(float ) throw(); 
# 2102 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float tanf(float ) throw(); 
# 2116 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float coshf(float ) throw(); 
# 2129 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float sinhf(float ) throw(); 
# 2141 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float tanhf(float ) throw(); 
# 2156 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float logf(float ) throw(); 
# 2168 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float expf(float ) throw(); 
# 2183 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float log10f(float ) throw(); 
# 2199 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float modff(float , float * ) throw(); 
# 2227 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float powf(float , float ) throw(); 
# 2242 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float sqrtf(float ) throw(); 
# 2254 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float ceilf(float ) throw(); 
# 2268 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float floorf(float ) throw(); 
# 2288 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
extern "C" float fmodf(float , float ) throw(); 
# 31 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3
extern "C" { typedef float float_t; }
# 32
extern "C" { typedef double double_t; }
# 55 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern "C" double acos(double ) throw(); extern "C" double __acos(double ) throw(); 
# 57
extern "C" double asin(double ) throw(); extern "C" double __asin(double ) throw(); 
# 59
extern "C" double atan(double ) throw(); extern "C" double __atan(double ) throw(); 
# 61
extern "C" double atan2(double , double ) throw(); extern "C" double __atan2(double , double ) throw(); 
# 64
extern "C" double cos(double ) throw(); extern "C" double __cos(double ) throw(); 
# 66
extern "C" double sin(double ) throw(); extern "C" double __sin(double ) throw(); 
# 68
extern "C" double tan(double ) throw(); extern "C" double __tan(double ) throw(); 
# 73
extern "C" double cosh(double ) throw(); extern "C" double __cosh(double ) throw(); 
# 75
extern "C" double sinh(double ) throw(); extern "C" double __sinh(double ) throw(); 
# 77
extern "C" double tanh(double ) throw(); extern "C" double __tanh(double ) throw(); 
# 82
extern "C" void sincos(double , double * , double * ) throw(); extern "C" void __sincos(double , double * , double * ) throw(); 
# 89
extern "C" double acosh(double ) throw(); extern "C" double __acosh(double ) throw(); 
# 91
extern "C" double asinh(double ) throw(); extern "C" double __asinh(double ) throw(); 
# 93
extern "C" double atanh(double ) throw(); extern "C" double __atanh(double ) throw(); 
# 101
extern "C" double exp(double ) throw(); extern "C" double __exp(double ) throw(); 
# 104
extern "C" double frexp(double , int * ) throw(); extern "C" double __frexp(double , int * ) throw(); 
# 107
extern "C" double ldexp(double , int ) throw(); extern "C" double __ldexp(double , int ) throw(); 
# 110
extern "C" double log(double ) throw(); extern "C" double __log(double ) throw(); 
# 113
extern "C" double log10(double ) throw(); extern "C" double __log10(double ) throw(); 
# 116
extern "C" double modf(double , double * ) throw(); extern "C" double __modf(double , double * ) throw(); 
# 121
extern "C" double exp10(double ) throw(); extern "C" double __exp10(double ) throw(); 
# 123
extern "C" double pow10(double ) throw(); extern "C" double __pow10(double ) throw(); 
# 129
extern "C" double expm1(double ) throw(); extern "C" double __expm1(double ) throw(); 
# 132
extern "C" double log1p(double ) throw(); extern "C" double __log1p(double ) throw(); 
# 135
extern "C" double logb(double ) throw(); extern "C" double __logb(double ) throw(); 
# 142
extern "C" double exp2(double ) throw(); extern "C" double __exp2(double ) throw(); 
# 145
extern "C" double log2(double ) throw(); extern "C" double __log2(double ) throw(); 
# 154
extern "C" double pow(double , double ) throw(); extern "C" double __pow(double , double ) throw(); 
# 157
extern "C" double sqrt(double ) throw(); extern "C" double __sqrt(double ) throw(); 
# 163
extern "C" double hypot(double , double ) throw(); extern "C" double __hypot(double , double ) throw(); 
# 170
extern "C" double cbrt(double ) throw(); extern "C" double __cbrt(double ) throw(); 
# 179
extern "C" double ceil(double ) throw() __attribute((const)); extern "C" double __ceil(double ) throw() __attribute((const)); 
# 182
extern "C" double fabs(double ) throw() __attribute((const)); extern "C" double __fabs(double ) throw() __attribute((const)); 
# 185
extern "C" double floor(double ) throw() __attribute((const)); extern "C" double __floor(double ) throw() __attribute((const)); 
# 188
extern "C" double fmod(double , double ) throw(); extern "C" double __fmod(double , double ) throw(); 
# 193
extern "C" int __isinf(double ) throw() __attribute((const)); 
# 196
extern "C" int __finite(double ) throw() __attribute((const)); 
# 202
extern "C" int isinf(double ) throw() __attribute((const)); 
# 205
extern "C" int finite(double ) throw() __attribute((const)); 
# 208
extern "C" double drem(double , double ) throw(); extern "C" double __drem(double , double ) throw(); 
# 212
extern "C" double significand(double ) throw(); extern "C" double __significand(double ) throw(); 
# 218
extern "C" double copysign(double , double ) throw() __attribute((const)); extern "C" double __copysign(double , double ) throw() __attribute((const)); 
# 225
extern "C" double nan(const char * ) throw() __attribute((const)); extern "C" double __nan(const char * ) throw() __attribute((const)); 
# 231
extern "C" int __isnan(double ) throw() __attribute((const)); 
# 235
extern "C" int isnan(double ) throw() __attribute((const)); 
# 238
extern "C" double j0(double) throw(); extern "C" double __j0(double) throw(); 
# 239
extern "C" double j1(double) throw(); extern "C" double __j1(double) throw(); 
# 240
extern "C" double jn(int, double) throw(); extern "C" double __jn(int, double) throw(); 
# 241
extern "C" double y0(double) throw(); extern "C" double __y0(double) throw(); 
# 242
extern "C" double y1(double) throw(); extern "C" double __y1(double) throw(); 
# 243
extern "C" double yn(int, double) throw(); extern "C" double __yn(int, double) throw(); 
# 250
extern "C" double erf(double) throw(); extern "C" double __erf(double) throw(); 
# 251
extern "C" double erfc(double) throw(); extern "C" double __erfc(double) throw(); 
# 252
extern "C" double lgamma(double) throw(); extern "C" double __lgamma(double) throw(); 
# 259
extern "C" double tgamma(double) throw(); extern "C" double __tgamma(double) throw(); 
# 265
extern "C" double gamma(double) throw(); extern "C" double __gamma(double) throw(); 
# 272
extern "C" double lgamma_r(double, int * ) throw(); extern "C" double __lgamma_r(double, int * ) throw(); 
# 280
extern "C" double rint(double ) throw(); extern "C" double __rint(double ) throw(); 
# 283
extern "C" double nextafter(double , double ) throw() __attribute((const)); extern "C" double __nextafter(double , double ) throw() __attribute((const)); 
# 285
extern "C" double nexttoward(double , long double ) throw() __attribute((const)); extern "C" double __nexttoward(double , long double ) throw() __attribute((const)); 
# 289
extern "C" double remainder(double , double ) throw(); extern "C" double __remainder(double , double ) throw(); 
# 293
extern "C" double scalbn(double , int ) throw(); extern "C" double __scalbn(double , int ) throw(); 
# 297
extern "C" int ilogb(double ) throw(); extern "C" int __ilogb(double ) throw(); 
# 302
extern "C" double scalbln(double , long ) throw(); extern "C" double __scalbln(double , long ) throw(); 
# 306
extern "C" double nearbyint(double ) throw(); extern "C" double __nearbyint(double ) throw(); 
# 310
extern "C" double round(double ) throw() __attribute((const)); extern "C" double __round(double ) throw() __attribute((const)); 
# 314
extern "C" double trunc(double ) throw() __attribute((const)); extern "C" double __trunc(double ) throw() __attribute((const)); 
# 319
extern "C" double remquo(double , double , int * ) throw(); extern "C" double __remquo(double , double , int * ) throw(); 
# 326
extern "C" long lrint(double ) throw(); extern "C" long __lrint(double ) throw(); 
# 327
extern "C" long long llrint(double ) throw(); extern "C" long long __llrint(double ) throw(); 
# 331
extern "C" long lround(double ) throw(); extern "C" long __lround(double ) throw(); 
# 332
extern "C" long long llround(double ) throw(); extern "C" long long __llround(double ) throw(); 
# 336
extern "C" double fdim(double , double ) throw(); extern "C" double __fdim(double , double ) throw(); 
# 339
extern "C" double fmax(double , double ) throw(); extern "C" double __fmax(double , double ) throw(); 
# 342
extern "C" double fmin(double , double ) throw(); extern "C" double __fmin(double , double ) throw(); 
# 346
extern "C" int __fpclassify(double ) throw()
# 347
 __attribute((const)); 
# 350
extern "C" { extern __attribute((gnu_inline)) inline int __signbit(double ) throw()
# 351
 __attribute((const)); } 
# 355
extern "C" double fma(double , double , double ) throw(); extern "C" double __fma(double , double , double ) throw(); 
# 364
extern "C" double scalb(double , double ) throw(); extern "C" double __scalb(double , double ) throw(); 
# 55 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern "C" float acosf(float ) throw(); extern "C" float __acosf(float ) throw(); 
# 57
extern "C" float asinf(float ) throw(); extern "C" float __asinf(float ) throw(); 
# 59
extern "C" float atanf(float ) throw(); extern "C" float __atanf(float ) throw(); 
# 61
extern "C" float atan2f(float , float ) throw(); extern "C" float __atan2f(float , float ) throw(); 
# 64
extern "C" float cosf(float ) throw(); 
# 66
extern "C" float sinf(float ) throw(); 
# 68
extern "C" float tanf(float ) throw(); 
# 73
extern "C" float coshf(float ) throw(); extern "C" float __coshf(float ) throw(); 
# 75
extern "C" float sinhf(float ) throw(); extern "C" float __sinhf(float ) throw(); 
# 77
extern "C" float tanhf(float ) throw(); extern "C" float __tanhf(float ) throw(); 
# 82
extern "C" void sincosf(float , float * , float * ) throw(); 
# 89
extern "C" float acoshf(float ) throw(); extern "C" float __acoshf(float ) throw(); 
# 91
extern "C" float asinhf(float ) throw(); extern "C" float __asinhf(float ) throw(); 
# 93
extern "C" float atanhf(float ) throw(); extern "C" float __atanhf(float ) throw(); 
# 101
extern "C" float expf(float ) throw(); 
# 104
extern "C" float frexpf(float , int * ) throw(); extern "C" float __frexpf(float , int * ) throw(); 
# 107
extern "C" float ldexpf(float , int ) throw(); extern "C" float __ldexpf(float , int ) throw(); 
# 110
extern "C" float logf(float ) throw(); 
# 113
extern "C" float log10f(float ) throw(); 
# 116
extern "C" float modff(float , float * ) throw(); extern "C" float __modff(float , float * ) throw(); 
# 121
extern "C" float exp10f(float ) throw(); 
# 123
extern "C" float pow10f(float ) throw(); extern "C" float __pow10f(float ) throw(); 
# 129
extern "C" float expm1f(float ) throw(); extern "C" float __expm1f(float ) throw(); 
# 132
extern "C" float log1pf(float ) throw(); extern "C" float __log1pf(float ) throw(); 
# 135
extern "C" float logbf(float ) throw(); extern "C" float __logbf(float ) throw(); 
# 142
extern "C" float exp2f(float ) throw(); extern "C" float __exp2f(float ) throw(); 
# 145
extern "C" float log2f(float ) throw(); 
# 154
extern "C" float powf(float , float ) throw(); 
# 157
extern "C" float sqrtf(float ) throw(); extern "C" float __sqrtf(float ) throw(); 
# 163
extern "C" float hypotf(float , float ) throw(); extern "C" float __hypotf(float , float ) throw(); 
# 170
extern "C" float cbrtf(float ) throw(); extern "C" float __cbrtf(float ) throw(); 
# 179
extern "C" float ceilf(float ) throw() __attribute((const)); extern "C" float __ceilf(float ) throw() __attribute((const)); 
# 182
extern "C" float fabsf(float ) throw() __attribute((const)); extern "C" float __fabsf(float ) throw() __attribute((const)); 
# 185
extern "C" float floorf(float ) throw() __attribute((const)); extern "C" float __floorf(float ) throw() __attribute((const)); 
# 188
extern "C" float fmodf(float , float ) throw(); extern "C" float __fmodf(float , float ) throw(); 
# 193
extern "C" int __isinff(float ) throw() __attribute((const)); 
# 196
extern "C" int __finitef(float ) throw() __attribute((const)); 
# 202
extern "C" int isinff(float ) throw() __attribute((const)); 
# 205
extern "C" int finitef(float ) throw() __attribute((const)); 
# 208
extern "C" float dremf(float , float ) throw(); extern "C" float __dremf(float , float ) throw(); 
# 212
extern "C" float significandf(float ) throw(); extern "C" float __significandf(float ) throw(); 
# 218
extern "C" float copysignf(float , float ) throw() __attribute((const)); extern "C" float __copysignf(float , float ) throw() __attribute((const)); 
# 225
extern "C" float nanf(const char * ) throw() __attribute((const)); extern "C" float __nanf(const char * ) throw() __attribute((const)); 
# 231
extern "C" int __isnanf(float ) throw() __attribute((const)); 
# 235
extern "C" int isnanf(float ) throw() __attribute((const)); 
# 238
extern "C" float j0f(float) throw(); extern "C" float __j0f(float) throw(); 
# 239
extern "C" float j1f(float) throw(); extern "C" float __j1f(float) throw(); 
# 240
extern "C" float jnf(int, float) throw(); extern "C" float __jnf(int, float) throw(); 
# 241
extern "C" float y0f(float) throw(); extern "C" float __y0f(float) throw(); 
# 242
extern "C" float y1f(float) throw(); extern "C" float __y1f(float) throw(); 
# 243
extern "C" float ynf(int, float) throw(); extern "C" float __ynf(int, float) throw(); 
# 250
extern "C" float erff(float) throw(); extern "C" float __erff(float) throw(); 
# 251
extern "C" float erfcf(float) throw(); extern "C" float __erfcf(float) throw(); 
# 252
extern "C" float lgammaf(float) throw(); extern "C" float __lgammaf(float) throw(); 
# 259
extern "C" float tgammaf(float) throw(); extern "C" float __tgammaf(float) throw(); 
# 265
extern "C" float gammaf(float) throw(); extern "C" float __gammaf(float) throw(); 
# 272
extern "C" float lgammaf_r(float, int * ) throw(); extern "C" float __lgammaf_r(float, int * ) throw(); 
# 280
extern "C" float rintf(float ) throw(); extern "C" float __rintf(float ) throw(); 
# 283
extern "C" float nextafterf(float , float ) throw() __attribute((const)); extern "C" float __nextafterf(float , float ) throw() __attribute((const)); 
# 285
extern "C" float nexttowardf(float , long double ) throw() __attribute((const)); extern "C" float __nexttowardf(float , long double ) throw() __attribute((const)); 
# 289
extern "C" float remainderf(float , float ) throw(); extern "C" float __remainderf(float , float ) throw(); 
# 293
extern "C" float scalbnf(float , int ) throw(); extern "C" float __scalbnf(float , int ) throw(); 
# 297
extern "C" int ilogbf(float ) throw(); extern "C" int __ilogbf(float ) throw(); 
# 302
extern "C" float scalblnf(float , long ) throw(); extern "C" float __scalblnf(float , long ) throw(); 
# 306
extern "C" float nearbyintf(float ) throw(); extern "C" float __nearbyintf(float ) throw(); 
# 310
extern "C" float roundf(float ) throw() __attribute((const)); extern "C" float __roundf(float ) throw() __attribute((const)); 
# 314
extern "C" float truncf(float ) throw() __attribute((const)); extern "C" float __truncf(float ) throw() __attribute((const)); 
# 319
extern "C" float remquof(float , float , int * ) throw(); extern "C" float __remquof(float , float , int * ) throw(); 
# 326
extern "C" long lrintf(float ) throw(); extern "C" long __lrintf(float ) throw(); 
# 327
extern "C" long long llrintf(float ) throw(); extern "C" long long __llrintf(float ) throw(); 
# 331
extern "C" long lroundf(float ) throw(); extern "C" long __lroundf(float ) throw(); 
# 332
extern "C" long long llroundf(float ) throw(); extern "C" long long __llroundf(float ) throw(); 
# 336
extern "C" float fdimf(float , float ) throw(); extern "C" float __fdimf(float , float ) throw(); 
# 339
extern "C" float fmaxf(float , float ) throw(); extern "C" float __fmaxf(float , float ) throw(); 
# 342
extern "C" float fminf(float , float ) throw(); extern "C" float __fminf(float , float ) throw(); 
# 346
extern "C" int __fpclassifyf(float ) throw()
# 347
 __attribute((const)); 
# 350
extern "C" { extern __attribute((gnu_inline)) inline int __signbitf(float ) throw()
# 351
 __attribute((const)); } 
# 355
extern "C" float fmaf(float , float , float ) throw(); extern "C" float __fmaf(float , float , float ) throw(); 
# 364
extern "C" float scalbf(float , float ) throw(); extern "C" float __scalbf(float , float ) throw(); 
# 55 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern "C" long double acosl(long double ) throw(); extern "C" long double __acosl(long double ) throw(); 
# 57
extern "C" long double asinl(long double ) throw(); extern "C" long double __asinl(long double ) throw(); 
# 59
extern "C" long double atanl(long double ) throw(); extern "C" long double __atanl(long double ) throw(); 
# 61
extern "C" long double atan2l(long double , long double ) throw(); extern "C" long double __atan2l(long double , long double ) throw(); 
# 64
extern "C" long double cosl(long double ) throw(); extern "C" long double __cosl(long double ) throw(); 
# 66
extern "C" long double sinl(long double ) throw(); extern "C" long double __sinl(long double ) throw(); 
# 68
extern "C" long double tanl(long double ) throw(); extern "C" long double __tanl(long double ) throw(); 
# 73
extern "C" long double coshl(long double ) throw(); extern "C" long double __coshl(long double ) throw(); 
# 75
extern "C" long double sinhl(long double ) throw(); extern "C" long double __sinhl(long double ) throw(); 
# 77
extern "C" long double tanhl(long double ) throw(); extern "C" long double __tanhl(long double ) throw(); 
# 82
extern "C" void sincosl(long double , long double * , long double * ) throw(); extern "C" void __sincosl(long double , long double * , long double * ) throw(); 
# 89
extern "C" long double acoshl(long double ) throw(); extern "C" long double __acoshl(long double ) throw(); 
# 91
extern "C" long double asinhl(long double ) throw(); extern "C" long double __asinhl(long double ) throw(); 
# 93
extern "C" long double atanhl(long double ) throw(); extern "C" long double __atanhl(long double ) throw(); 
# 101
extern "C" long double expl(long double ) throw(); extern "C" long double __expl(long double ) throw(); 
# 104
extern "C" long double frexpl(long double , int * ) throw(); extern "C" long double __frexpl(long double , int * ) throw(); 
# 107
extern "C" long double ldexpl(long double , int ) throw(); extern "C" long double __ldexpl(long double , int ) throw(); 
# 110
extern "C" long double logl(long double ) throw(); extern "C" long double __logl(long double ) throw(); 
# 113
extern "C" long double log10l(long double ) throw(); extern "C" long double __log10l(long double ) throw(); 
# 116
extern "C" long double modfl(long double , long double * ) throw(); extern "C" long double __modfl(long double , long double * ) throw(); 
# 121
extern "C" long double exp10l(long double ) throw(); extern "C" long double __exp10l(long double ) throw(); 
# 123
extern "C" long double pow10l(long double ) throw(); extern "C" long double __pow10l(long double ) throw(); 
# 129
extern "C" long double expm1l(long double ) throw(); extern "C" long double __expm1l(long double ) throw(); 
# 132
extern "C" long double log1pl(long double ) throw(); extern "C" long double __log1pl(long double ) throw(); 
# 135
extern "C" long double logbl(long double ) throw(); extern "C" long double __logbl(long double ) throw(); 
# 142
extern "C" long double exp2l(long double ) throw(); extern "C" long double __exp2l(long double ) throw(); 
# 145
extern "C" long double log2l(long double ) throw(); extern "C" long double __log2l(long double ) throw(); 
# 154
extern "C" long double powl(long double , long double ) throw(); extern "C" long double __powl(long double , long double ) throw(); 
# 157
extern "C" long double sqrtl(long double ) throw(); extern "C" long double __sqrtl(long double ) throw(); 
# 163
extern "C" long double hypotl(long double , long double ) throw(); extern "C" long double __hypotl(long double , long double ) throw(); 
# 170
extern "C" long double cbrtl(long double ) throw(); extern "C" long double __cbrtl(long double ) throw(); 
# 179
extern "C" long double ceill(long double ) throw() __attribute((const)); extern "C" long double __ceill(long double ) throw() __attribute((const)); 
# 182
extern "C" long double fabsl(long double ) throw() __attribute((const)); extern "C" long double __fabsl(long double ) throw() __attribute((const)); 
# 185
extern "C" long double floorl(long double ) throw() __attribute((const)); extern "C" long double __floorl(long double ) throw() __attribute((const)); 
# 188
extern "C" long double fmodl(long double , long double ) throw(); extern "C" long double __fmodl(long double , long double ) throw(); 
# 193
extern "C" int __isinfl(long double ) throw() __attribute((const)); 
# 196
extern "C" int __finitel(long double ) throw() __attribute((const)); 
# 202
extern "C" int isinfl(long double ) throw() __attribute((const)); 
# 205
extern "C" int finitel(long double ) throw() __attribute((const)); 
# 208
extern "C" long double dreml(long double , long double ) throw(); extern "C" long double __dreml(long double , long double ) throw(); 
# 212
extern "C" long double significandl(long double ) throw(); extern "C" long double __significandl(long double ) throw(); 
# 218
extern "C" long double copysignl(long double , long double ) throw() __attribute((const)); extern "C" long double __copysignl(long double , long double ) throw() __attribute((const)); 
# 225
extern "C" long double nanl(const char * ) throw() __attribute((const)); extern "C" long double __nanl(const char * ) throw() __attribute((const)); 
# 231
extern "C" int __isnanl(long double ) throw() __attribute((const)); 
# 235
extern "C" int isnanl(long double ) throw() __attribute((const)); 
# 238
extern "C" long double j0l(long double) throw(); extern "C" long double __j0l(long double) throw(); 
# 239
extern "C" long double j1l(long double) throw(); extern "C" long double __j1l(long double) throw(); 
# 240
extern "C" long double jnl(int, long double) throw(); extern "C" long double __jnl(int, long double) throw(); 
# 241
extern "C" long double y0l(long double) throw(); extern "C" long double __y0l(long double) throw(); 
# 242
extern "C" long double y1l(long double) throw(); extern "C" long double __y1l(long double) throw(); 
# 243
extern "C" long double ynl(int, long double) throw(); extern "C" long double __ynl(int, long double) throw(); 
# 250
extern "C" long double erfl(long double) throw(); extern "C" long double __erfl(long double) throw(); 
# 251
extern "C" long double erfcl(long double) throw(); extern "C" long double __erfcl(long double) throw(); 
# 252
extern "C" long double lgammal(long double) throw(); extern "C" long double __lgammal(long double) throw(); 
# 259
extern "C" long double tgammal(long double) throw(); extern "C" long double __tgammal(long double) throw(); 
# 265
extern "C" long double gammal(long double) throw(); extern "C" long double __gammal(long double) throw(); 
# 272
extern "C" long double lgammal_r(long double, int * ) throw(); extern "C" long double __lgammal_r(long double, int * ) throw(); 
# 280
extern "C" long double rintl(long double ) throw(); extern "C" long double __rintl(long double ) throw(); 
# 283
extern "C" long double nextafterl(long double , long double ) throw() __attribute((const)); extern "C" long double __nextafterl(long double , long double ) throw() __attribute((const)); 
# 285
extern "C" long double nexttowardl(long double , long double ) throw() __attribute((const)); extern "C" long double __nexttowardl(long double , long double ) throw() __attribute((const)); 
# 289
extern "C" long double remainderl(long double , long double ) throw(); extern "C" long double __remainderl(long double , long double ) throw(); 
# 293
extern "C" long double scalbnl(long double , int ) throw(); extern "C" long double __scalbnl(long double , int ) throw(); 
# 297
extern "C" int ilogbl(long double ) throw(); extern "C" int __ilogbl(long double ) throw(); 
# 302
extern "C" long double scalblnl(long double , long ) throw(); extern "C" long double __scalblnl(long double , long ) throw(); 
# 306
extern "C" long double nearbyintl(long double ) throw(); extern "C" long double __nearbyintl(long double ) throw(); 
# 310
extern "C" long double roundl(long double ) throw() __attribute((const)); extern "C" long double __roundl(long double ) throw() __attribute((const)); 
# 314
extern "C" long double truncl(long double ) throw() __attribute((const)); extern "C" long double __truncl(long double ) throw() __attribute((const)); 
# 319
extern "C" long double remquol(long double , long double , int * ) throw(); extern "C" long double __remquol(long double , long double , int * ) throw(); 
# 326
extern "C" long lrintl(long double ) throw(); extern "C" long __lrintl(long double ) throw(); 
# 327
extern "C" long long llrintl(long double ) throw(); extern "C" long long __llrintl(long double ) throw(); 
# 331
extern "C" long lroundl(long double ) throw(); extern "C" long __lroundl(long double ) throw(); 
# 332
extern "C" long long llroundl(long double ) throw(); extern "C" long long __llroundl(long double ) throw(); 
# 336
extern "C" long double fdiml(long double , long double ) throw(); extern "C" long double __fdiml(long double , long double ) throw(); 
# 339
extern "C" long double fmaxl(long double , long double ) throw(); extern "C" long double __fmaxl(long double , long double ) throw(); 
# 342
extern "C" long double fminl(long double , long double ) throw(); extern "C" long double __fminl(long double , long double ) throw(); 
# 346
extern "C" int __fpclassifyl(long double ) throw()
# 347
 __attribute((const)); 
# 350
extern "C" { extern __attribute((gnu_inline)) inline int __signbitl(long double ) throw()
# 351
 __attribute((const)); } 
# 355
extern "C" long double fmal(long double , long double , long double ) throw(); extern "C" long double __fmal(long double , long double , long double ) throw(); 
# 364
extern "C" long double scalbl(long double , long double ) throw(); extern "C" long double __scalbl(long double , long double ) throw(); 
# 161 "/usr/include/math.h" 3
extern "C" { extern int signgam; } 
# 203 "/usr/include/math.h" 3
enum { 
# 204
FP_NAN, 
# 206
FP_INFINITE, 
# 208
FP_ZERO, 
# 210
FP_SUBNORMAL, 
# 212
FP_NORMAL
# 214
}; 
# 302 "/usr/include/math.h" 3
extern "C" { typedef 
# 296
enum { 
# 297
_IEEE_ = (-1), 
# 298
_SVID_ = 0, 
# 299
_XOPEN_, 
# 300
_POSIX_, 
# 301
_ISOC_
# 302
} _LIB_VERSION_TYPE; }
# 307
extern "C" { extern _LIB_VERSION_TYPE _LIB_VERSION; } 
# 318 "/usr/include/math.h" 3
extern "C" { struct __exception { 
# 323
int type; 
# 324
char *name; 
# 325
double arg1; 
# 326
double arg2; 
# 327
double retval; 
# 328
}; }
# 331
extern "C" int matherr(__exception * ) throw(); 
# 38 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3
extern "C" { 
# 37
__attribute((__gnu_inline__)) inline int 
# 38
__signbitf(float __x) throw() 
# 39
{ 
# 44
int __m; 
# 45
__asm__("pmovmskb %1, %0" : "=r" (__m) : "x" (__x)); 
# 46
return __m & 8; 
# 48
} } 
# 50
extern "C" { 
# 49
__attribute((__gnu_inline__)) inline int 
# 50
__signbit(double __x) throw() 
# 51
{ 
# 56
int __m; 
# 57
__asm__("pmovmskb %1, %0" : "=r" (__m) : "x" (__x)); 
# 58
return __m & 128; 
# 60
} } 
# 62
extern "C" { 
# 61
__attribute((__gnu_inline__)) inline int 
# 62
__signbitl(long double __x) throw() 
# 63
{ 
# 64
union { long double __l; int __i[3]; } __u = {__l: __x}; 
# 65
return (((__u.__i)[2]) & 32768) != 0; 
# 66
} } 
# 67 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
extern "C" { union wait { 
# 69
int w_status; 
# 71
struct { 
# 73
unsigned __w_termsig:7; 
# 74
unsigned __w_coredump:1; 
# 75
unsigned __w_retcode:8; 
# 76
unsigned:16; 
# 84
} __wait_terminated; 
# 86
struct { 
# 88
unsigned __w_stopval:8; 
# 89
unsigned __w_stopsig:8; 
# 90
unsigned:16; 
# 97
} __wait_stopped; 
# 98
}; }
# 102 "/usr/include/stdlib.h" 3
extern "C" { typedef 
# 99
struct { 
# 100
int quot; 
# 101
int rem; 
# 102
} div_t; }
# 110
extern "C" { typedef 
# 107
struct { 
# 108
long quot; 
# 109
long rem; 
# 110
} ldiv_t; }
# 122
extern "C" { typedef 
# 119
struct { 
# 120
long long quot; 
# 121
long long rem; 
# 122
} lldiv_t; }
# 140 "/usr/include/stdlib.h" 3
extern "C" size_t __ctype_get_mb_cur_max() throw(); 
# 145
extern "C" { extern __attribute((gnu_inline)) inline double atof(const char * ) throw()
# 146
 __attribute((__pure__)) __attribute((__nonnull__(1))); } 
# 148
extern "C" { extern __attribute((gnu_inline)) inline int atoi(const char * ) throw()
# 149
 __attribute((__pure__)) __attribute((__nonnull__(1))); } 
# 151
extern "C" { extern __attribute((gnu_inline)) inline long atol(const char * ) throw()
# 152
 __attribute((__pure__)) __attribute((__nonnull__(1))); } 
# 158
extern "C" { extern __attribute((gnu_inline)) inline long long atoll(const char * ) throw()
# 159
 __attribute((__pure__)) __attribute((__nonnull__(1))); } 
# 165
extern "C" double strtod(const char *__restrict__ , char **__restrict__ ) throw()
# 167
 __attribute((__nonnull__(1))); 
# 173
extern "C" float strtof(const char *__restrict__ , char **__restrict__ ) throw()
# 174
 __attribute((__nonnull__(1))); 
# 176
extern "C" long double strtold(const char *__restrict__ , char **__restrict__ ) throw()
# 178
 __attribute((__nonnull__(1))); 
# 184
extern "C" long strtol(const char *__restrict__ , char **__restrict__ , int ) throw()
# 186
 __attribute((__nonnull__(1))); 
# 188
extern "C" unsigned long strtoul(const char *__restrict__ , char **__restrict__ , int ) throw()
# 190
 __attribute((__nonnull__(1))); 
# 196
extern "C" long long strtoq(const char *__restrict__ , char **__restrict__ , int ) throw()
# 198
 __attribute((__nonnull__(1))); 
# 201
extern "C" unsigned long long strtouq(const char *__restrict__ , char **__restrict__ , int ) throw()
# 203
 __attribute((__nonnull__(1))); 
# 210
extern "C" long long strtoll(const char *__restrict__ , char **__restrict__ , int ) throw()
# 212
 __attribute((__nonnull__(1))); 
# 215
extern "C" unsigned long long strtoull(const char *__restrict__ , char **__restrict__ , int ) throw()
# 217
 __attribute((__nonnull__(1))); 
# 240 "/usr/include/stdlib.h" 3
extern "C" long strtol_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 242
 __attribute((__nonnull__(1, 4))); 
# 244
extern "C" unsigned long strtoul_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 247
 __attribute((__nonnull__(1, 4))); 
# 250
extern "C" long long strtoll_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 253
 __attribute((__nonnull__(1, 4))); 
# 256
extern "C" unsigned long long strtoull_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 259
 __attribute((__nonnull__(1, 4))); 
# 261
extern "C" double strtod_l(const char *__restrict__ , char **__restrict__ , __locale_t ) throw()
# 263
 __attribute((__nonnull__(1, 3))); 
# 265
extern "C" float strtof_l(const char *__restrict__ , char **__restrict__ , __locale_t ) throw()
# 267
 __attribute((__nonnull__(1, 3))); 
# 269
extern "C" long double strtold_l(const char *__restrict__ , char **__restrict__ , __locale_t ) throw()
# 272
 __attribute((__nonnull__(1, 3))); 
# 279
extern "C" { 
# 278
__attribute((__gnu_inline__)) inline double 
# 279
atof(const char *__nptr) throw() 
# 280
{ 
# 281
return strtod(__nptr, (char **)__null); 
# 282
} } 
# 284
extern "C" { 
# 283
__attribute((__gnu_inline__)) inline int 
# 284
atoi(const char *__nptr) throw() 
# 285
{ 
# 286
return (int)strtol(__nptr, (char **)__null, 10); 
# 287
} } 
# 289
extern "C" { 
# 288
__attribute((__gnu_inline__)) inline long 
# 289
atol(const char *__nptr) throw() 
# 290
{ 
# 291
return strtol(__nptr, (char **)__null, 10); 
# 292
} } 
# 298
extern "C" { 
# 297
__attribute((__gnu_inline__)) inline long long 
# 298
atoll(const char *__nptr) throw() 
# 299
{ 
# 300
return strtoll(__nptr, (char **)__null, 10); 
# 301
} } 
# 311 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long ) throw(); 
# 314
extern "C" long a64l(const char * ) throw()
# 315
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 34 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __u_char u_char; }
# 35
extern "C" { typedef __u_short u_short; }
# 36
extern "C" { typedef __u_int u_int; }
# 37
extern "C" { typedef __u_long u_long; }
# 38
extern "C" { typedef __quad_t quad_t; }
# 39
extern "C" { typedef __u_quad_t u_quad_t; }
# 40
extern "C" { typedef __fsid_t fsid_t; }
# 45
extern "C" { typedef __loff_t loff_t; }
# 49
extern "C" { typedef __ino_t ino_t; }
# 56
extern "C" { typedef __ino64_t ino64_t; }
# 61
extern "C" { typedef __dev_t dev_t; }
# 66
extern "C" { typedef __gid_t gid_t; }
# 71
extern "C" { typedef __mode_t mode_t; }
# 76
extern "C" { typedef __nlink_t nlink_t; }
# 81
extern "C" { typedef __uid_t uid_t; }
# 87
extern "C" { typedef __off_t off_t; }
# 94
extern "C" { typedef __off64_t off64_t; }
# 105 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __id_t id_t; }
# 110
extern "C" { typedef __ssize_t ssize_t; }
# 116
extern "C" { typedef __daddr_t daddr_t; }
# 117
extern "C" { typedef __caddr_t caddr_t; }
# 123
extern "C" { typedef __key_t key_t; }
# 137 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __useconds_t useconds_t; }
# 141
extern "C" { typedef __suseconds_t suseconds_t; }
# 151 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef unsigned long ulong; }
# 152
extern "C" { typedef unsigned short ushort; }
# 153
extern "C" { typedef unsigned uint; }
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef signed char int8_t __attribute((__mode__(__QI__))); }
# 196
extern "C" { typedef short int16_t __attribute((__mode__(__HI__))); }
# 197
extern "C" { typedef int int32_t __attribute((__mode__(__SI__))); }
# 198
extern "C" { typedef long int64_t __attribute((__mode__(__DI__))); }
# 201
extern "C" { typedef unsigned char u_int8_t __attribute((__mode__(__QI__))); }
# 202
extern "C" { typedef unsigned short u_int16_t __attribute((__mode__(__HI__))); }
# 203
extern "C" { typedef unsigned u_int32_t __attribute((__mode__(__SI__))); }
# 204
extern "C" { typedef unsigned long u_int64_t __attribute((__mode__(__DI__))); }
# 206
extern "C" { typedef long register_t __attribute((__mode__(__word__))); }
# 24 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
extern "C" { typedef int __sig_atomic_t; }
# 32
extern "C" { typedef 
# 30
struct { 
# 31
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 32
} __sigset_t; }
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" { typedef __sigset_t sigset_t; }
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" { struct timeval { 
# 77
__time_t tv_sec; 
# 78
__suseconds_t tv_usec; 
# 79
}; }
# 55 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" { typedef long __fd_mask; }
# 78 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" { typedef 
# 68
struct { 
# 72
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 78
} fd_set; }
# 85
extern "C" { typedef __fd_mask fd_mask; }
# 109 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" int select(int , fd_set *__restrict__ , fd_set *__restrict__ , fd_set *__restrict__ , timeval *__restrict__ ); 
# 121 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" int pselect(int , fd_set *__restrict__ , fd_set *__restrict__ , fd_set *__restrict__ , const timespec *__restrict__ , const __sigset_t *__restrict__ ); 
# 31 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
extern "C" { extern __attribute((gnu_inline)) inline unsigned gnu_dev_major(unsigned long long ) throw(); } 
# 34
extern "C" { extern __attribute((gnu_inline)) inline unsigned gnu_dev_minor(unsigned long long ) throw(); } 
# 37
extern "C" { extern __attribute((gnu_inline)) inline unsigned long long gnu_dev_makedev(unsigned , unsigned ) throw(); } 
# 43
extern "C" { 
# 42
__attribute((__gnu_inline__)) inline unsigned 
# 43
gnu_dev_major(unsigned long long __dev) throw() 
# 44
{ 
# 45
return ((__dev >> 8) & (4095)) | (((unsigned)(__dev >> 32)) & (~4095)); 
# 46
} } 
# 49
extern "C" { 
# 48
__attribute((__gnu_inline__)) inline unsigned 
# 49
gnu_dev_minor(unsigned long long __dev) throw() 
# 50
{ 
# 51
return (__dev & (255)) | (((unsigned)(__dev >> 12)) & (~255)); 
# 52
} } 
# 55
extern "C" { 
# 54
__attribute((__gnu_inline__)) inline unsigned long long 
# 55
gnu_dev_makedev(unsigned __major, unsigned __minor) throw() 
# 56
{ 
# 57
return (((__minor & (255)) | ((__major & (4095)) << 8)) | (((unsigned long long)(__minor & (~255))) << 12)) | (((unsigned long long)(__major & (~4095))) << 32); 
# 60
} } 
# 229 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __blksize_t blksize_t; }
# 236
extern "C" { typedef __blkcnt_t blkcnt_t; }
# 240
extern "C" { typedef __fsblkcnt_t fsblkcnt_t; }
# 244
extern "C" { typedef __fsfilcnt_t fsfilcnt_t; }
# 263 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" { typedef __blkcnt64_t blkcnt64_t; }
# 264
extern "C" { typedef __fsblkcnt64_t fsblkcnt64_t; }
# 265
extern "C" { typedef __fsfilcnt64_t fsfilcnt64_t; }
# 50 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned long pthread_t; }
# 57
extern "C" { typedef 
# 54
union { 
# 55
char __size[56]; 
# 56
long __align; 
# 57
} pthread_attr_t; }
# 65
extern "C" { typedef 
# 61
struct __pthread_internal_list { 
# 63
__pthread_internal_list *__prev; 
# 64
__pthread_internal_list *__next; 
# 65
} __pthread_list_t; }
# 104 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
extern "C" { typedef 
# 77 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union { 
# 78
struct __pthread_mutex_s { 
# 80
int __lock; 
# 81
unsigned __count; 
# 82
int __owner; 
# 84
unsigned __nusers; 
# 88
int __kind; 
# 90
int __spins; 
# 91
__pthread_list_t __list; 
# 101 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
} __data; 
# 102
char __size[40]; 
# 103
long __align; 
# 104
} pthread_mutex_t; }
# 110
extern "C" { typedef 
# 107
union { 
# 108
char __size[4]; 
# 109
int __align; 
# 110
} pthread_mutexattr_t; }
# 130
extern "C" { typedef 
# 116
union { 
# 118
struct { 
# 119
int __lock; 
# 120
unsigned __futex; 
# 121
__extension__ unsigned long long __total_seq; 
# 122
__extension__ unsigned long long __wakeup_seq; 
# 123
__extension__ unsigned long long __woken_seq; 
# 124
void *__mutex; 
# 125
unsigned __nwaiters; 
# 126
unsigned __broadcast_seq; 
# 127
} __data; 
# 128
char __size[48]; 
# 129
__extension__ long long __align; 
# 130
} pthread_cond_t; }
# 136
extern "C" { typedef 
# 133
union { 
# 134
char __size[4]; 
# 135
int __align; 
# 136
} pthread_condattr_t; }
# 140
extern "C" { typedef unsigned pthread_key_t; }
# 144
extern "C" { typedef int pthread_once_t; }
# 189 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
extern "C" { typedef 
# 151 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
union { 
# 154
struct { 
# 155
int __lock; 
# 156
unsigned __nr_readers; 
# 157
unsigned __readers_wakeup; 
# 158
unsigned __writer_wakeup; 
# 159
unsigned __nr_readers_queued; 
# 160
unsigned __nr_writers_queued; 
# 161
int __writer; 
# 162
int __shared; 
# 163
unsigned long __pad1; 
# 164
unsigned long __pad2; 
# 167
unsigned __flags; 
# 168
} __data; 
# 187 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
char __size[56]; 
# 188
long __align; 
# 189
} pthread_rwlock_t; }
# 195
extern "C" { typedef 
# 192
union { 
# 193
char __size[8]; 
# 194
long __align; 
# 195
} pthread_rwlockattr_t; }
# 201
extern "C" { typedef volatile int pthread_spinlock_t; }
# 210
extern "C" { typedef 
# 207
union { 
# 208
char __size[32]; 
# 209
long __align; 
# 210
} pthread_barrier_t; }
# 216
extern "C" { typedef 
# 213
union { 
# 214
char __size[4]; 
# 215
int __align; 
# 216
} pthread_barrierattr_t; }
# 327 "/usr/include/stdlib.h" 3
extern "C" long random() throw(); 
# 330
extern "C" void srandom(unsigned ) throw(); 
# 336
extern "C" char *initstate(unsigned , char * , size_t ) throw()
# 337
 __attribute((__nonnull__(2))); 
# 341
extern "C" char *setstate(char * ) throw() __attribute((__nonnull__(1))); 
# 349
extern "C" { struct random_data { 
# 351
int32_t *fptr; 
# 352
int32_t *rptr; 
# 353
int32_t *state; 
# 354
int rand_type; 
# 355
int rand_deg; 
# 356
int rand_sep; 
# 357
int32_t *end_ptr; 
# 358
}; }
# 360
extern "C" int random_r(random_data *__restrict__ , int32_t *__restrict__ ) throw()
# 361
 __attribute((__nonnull__(1, 2))); 
# 363
extern "C" int srandom_r(unsigned , random_data * ) throw()
# 364
 __attribute((__nonnull__(2))); 
# 366
extern "C" int initstate_r(unsigned , char *__restrict__ , size_t , random_data *__restrict__ ) throw()
# 369
 __attribute((__nonnull__(2, 4))); 
# 371
extern "C" int setstate_r(char *__restrict__ , random_data *__restrict__ ) throw()
# 373
 __attribute((__nonnull__(1, 2))); 
# 380
extern "C" int rand() throw(); 
# 382
extern "C" void srand(unsigned ) throw(); 
# 387
extern "C" int rand_r(unsigned * ) throw(); 
# 395
extern "C" double drand48() throw(); 
# 396
extern "C" double erand48(unsigned short  [3]) throw() __attribute((__nonnull__(1))); 
# 399
extern "C" long lrand48() throw(); 
# 400
extern "C" long nrand48(unsigned short  [3]) throw()
# 401
 __attribute((__nonnull__(1))); 
# 404
extern "C" long mrand48() throw(); 
# 405
extern "C" long jrand48(unsigned short  [3]) throw()
# 406
 __attribute((__nonnull__(1))); 
# 409
extern "C" void srand48(long ) throw(); 
# 410
extern "C" unsigned short *seed48(unsigned short  [3]) throw()
# 411
 __attribute((__nonnull__(1))); 
# 412
extern "C" void lcong48(unsigned short  [7]) throw() __attribute((__nonnull__(1))); 
# 418
extern "C" { struct drand48_data { 
# 420
unsigned short __x[3]; 
# 421
unsigned short __old_x[3]; 
# 422
unsigned short __c; 
# 423
unsigned short __init; 
# 424
unsigned long long __a; 
# 425
}; }
# 428
extern "C" int drand48_r(drand48_data *__restrict__ , double *__restrict__ ) throw()
# 429
 __attribute((__nonnull__(1, 2))); 
# 430
extern "C" int erand48_r(unsigned short  [3], drand48_data *__restrict__ , double *__restrict__ ) throw()
# 432
 __attribute((__nonnull__(1, 2))); 
# 435
extern "C" int lrand48_r(drand48_data *__restrict__ , long *__restrict__ ) throw()
# 437
 __attribute((__nonnull__(1, 2))); 
# 438
extern "C" int nrand48_r(unsigned short  [3], drand48_data *__restrict__ , long *__restrict__ ) throw()
# 441
 __attribute((__nonnull__(1, 2))); 
# 444
extern "C" int mrand48_r(drand48_data *__restrict__ , long *__restrict__ ) throw()
# 446
 __attribute((__nonnull__(1, 2))); 
# 447
extern "C" int jrand48_r(unsigned short  [3], drand48_data *__restrict__ , long *__restrict__ ) throw()
# 450
 __attribute((__nonnull__(1, 2))); 
# 453
extern "C" int srand48_r(long , drand48_data * ) throw()
# 454
 __attribute((__nonnull__(2))); 
# 456
extern "C" int seed48_r(unsigned short  [3], drand48_data * ) throw()
# 457
 __attribute((__nonnull__(1, 2))); 
# 459
extern "C" int lcong48_r(unsigned short  [7], drand48_data * ) throw()
# 461
 __attribute((__nonnull__(1, 2))); 
# 471
extern "C" void *malloc(size_t ) throw() __attribute((__malloc__)); 
# 473
extern "C" void *calloc(size_t , size_t ) throw()
# 474
 __attribute((__malloc__)); 
# 485
extern "C" void *realloc(void * , size_t ) throw()
# 486
 __attribute((__warn_unused_result__)); 
# 488
extern "C" void free(void * ) throw(); 
# 493
extern "C" void cfree(void * ) throw(); 
# 33 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t ) throw(); 
# 503 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t ) throw() __attribute((__malloc__)); 
# 508
extern "C" int posix_memalign(void ** , size_t , size_t ) throw()
# 509
 __attribute((__nonnull__(1))); 
# 514
extern "C" void abort() throw() __attribute((__noreturn__)); 
# 518
extern "C" int atexit(void (* )(void)) throw() __attribute((__nonnull__(1))); 
# 525
int at_quick_exit(void (* )(void)) throw() __asm__("at_quick_exit")
# 526
 __attribute((__nonnull__(1))); 
# 536
extern "C" int on_exit(void (* )(int , void * ), void * ) throw()
# 537
 __attribute((__nonnull__(1))); 
# 544
extern "C" void exit(int ) throw() __attribute((__noreturn__)); 
# 552
extern "C" void quick_exit(int ) throw() __attribute((__noreturn__)); 
# 560
extern "C" void _Exit(int ) throw() __attribute((__noreturn__)); 
# 567
extern "C" char *getenv(const char * ) throw() __attribute((__nonnull__(1))); 
# 572
extern "C" char *__secure_getenv(const char * ) throw()
# 573
 __attribute((__nonnull__(1))); 
# 579
extern "C" int putenv(char * ) throw() __attribute((__nonnull__(1))); 
# 585
extern "C" int setenv(const char * , const char * , int ) throw()
# 586
 __attribute((__nonnull__(2))); 
# 589
extern "C" int unsetenv(const char * ) throw() __attribute((__nonnull__(1))); 
# 596
extern "C" int clearenv() throw(); 
# 606 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char * ) throw() __attribute((__nonnull__(1))); 
# 620 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char * ) __attribute((__nonnull__(1))); 
# 630 "/usr/include/stdlib.h" 3
extern "C" int mkstemp64(char * ) __attribute((__nonnull__(1))); 
# 642 "/usr/include/stdlib.h" 3
extern "C" int mkstemps(char * , int ) __attribute((__nonnull__(1))); 
# 652 "/usr/include/stdlib.h" 3
extern "C" int mkstemps64(char * , int )
# 653
 __attribute((__nonnull__(1))); 
# 663 "/usr/include/stdlib.h" 3
extern "C" char *mkdtemp(char * ) throw() __attribute((__nonnull__(1))); 
# 674 "/usr/include/stdlib.h" 3
extern "C" int mkostemp(char * , int ) __attribute((__nonnull__(1))); 
# 684 "/usr/include/stdlib.h" 3
extern "C" int mkostemp64(char * , int ) __attribute((__nonnull__(1))); 
# 694 "/usr/include/stdlib.h" 3
extern "C" int mkostemps(char * , int , int )
# 695
 __attribute((__nonnull__(1))); 
# 706 "/usr/include/stdlib.h" 3
extern "C" int mkostemps64(char * , int , int )
# 707
 __attribute((__nonnull__(1))); 
# 717
extern "C" int system(const char * ); 
# 724
extern "C" char *canonicalize_file_name(const char * ) throw()
# 725
 __attribute((__nonnull__(1))); 
# 734 "/usr/include/stdlib.h" 3
extern "C" char *realpath(const char *__restrict__ , char *__restrict__ ) throw(); 
# 742
extern "C" { typedef int (*__compar_fn_t)(const void *, const void *); }
# 745
extern "C" { typedef __compar_fn_t comparison_fn_t; }
# 749
extern "C" { typedef int (*__compar_d_fn_t)(const void *, const void *, void *); }
# 755
extern "C" void *bsearch(const void * , const void * , size_t , size_t , __compar_fn_t )
# 757
 __attribute((__nonnull__(1, 2, 5))); 
# 761
extern "C" void qsort(void * , size_t , size_t , __compar_fn_t )
# 762
 __attribute((__nonnull__(1, 4))); 
# 764
extern "C" void qsort_r(void * , size_t , size_t , __compar_d_fn_t , void * )
# 766
 __attribute((__nonnull__(1, 4))); 
# 771
extern "C" int abs(int ) throw() __attribute((const)); 
# 772
extern "C" long labs(long ) throw() __attribute((const)); 
# 776
extern "C" long long llabs(long long ) throw()
# 777
 __attribute((const)); 
# 785
extern "C" div_t div(int , int ) throw()
# 786
 __attribute((const)); 
# 787
extern "C" ldiv_t ldiv(long , long ) throw()
# 788
 __attribute((const)); 
# 793
extern "C" lldiv_t lldiv(long long , long long ) throw()
# 795
 __attribute((const)); 
# 808 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double , int , int *__restrict__ , int *__restrict__ ) throw()
# 809
 __attribute((__nonnull__(3, 4))); 
# 814
extern "C" char *fcvt(double , int , int *__restrict__ , int *__restrict__ ) throw()
# 815
 __attribute((__nonnull__(3, 4))); 
# 820
extern "C" char *gcvt(double , int , char * ) throw()
# 821
 __attribute((__nonnull__(3))); 
# 826
extern "C" char *qecvt(long double , int , int *__restrict__ , int *__restrict__ ) throw()
# 828
 __attribute((__nonnull__(3, 4))); 
# 829
extern "C" char *qfcvt(long double , int , int *__restrict__ , int *__restrict__ ) throw()
# 831
 __attribute((__nonnull__(3, 4))); 
# 832
extern "C" char *qgcvt(long double , int , char * ) throw()
# 833
 __attribute((__nonnull__(3))); 
# 838
extern "C" int ecvt_r(double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 840
 __attribute((__nonnull__(3, 4, 5))); 
# 841
extern "C" int fcvt_r(double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 843
 __attribute((__nonnull__(3, 4, 5))); 
# 845
extern "C" int qecvt_r(long double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 848
 __attribute((__nonnull__(3, 4, 5))); 
# 849
extern "C" int qfcvt_r(long double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 852
 __attribute((__nonnull__(3, 4, 5))); 
# 860
extern "C" int mblen(const char * , size_t ) throw(); 
# 863
extern "C" int mbtowc(wchar_t *__restrict__ , const char *__restrict__ , size_t ) throw(); 
# 867
extern "C" int wctomb(char * , wchar_t ) throw(); 
# 871
extern "C" size_t mbstowcs(wchar_t *__restrict__ , const char *__restrict__ , size_t ) throw(); 
# 874
extern "C" size_t wcstombs(char *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 885
extern "C" int rpmatch(const char * ) throw() __attribute((__nonnull__(1))); 
# 896 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **__restrict__ , char *const *__restrict__ , char **__restrict__ ) throw()
# 899
 __attribute((__nonnull__(1, 2, 3))); 
# 905
extern "C" void setkey(const char * ) throw() __attribute((__nonnull__(1))); 
# 913
extern "C" int posix_openpt(int ); 
# 921
extern "C" int grantpt(int ) throw(); 
# 925
extern "C" int unlockpt(int ) throw(); 
# 930
extern "C" char *ptsname(int ) throw(); 
# 937
extern "C" int ptsname_r(int , char * , size_t ) throw()
# 938
 __attribute((__nonnull__(2))); 
# 941
extern "C" int getpt(); 
# 948
extern "C" int getloadavg(double  [], int ) throw()
# 949
 __attribute((__nonnull__(1))); 
# 69 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 71
template < typename _Iterator, typename _Container >
    class __normal_iterator;
# 74
}
# 76
namespace std __attribute((__visibility__("default"))) { 
# 78
struct __true_type { }; 
# 79
struct __false_type { }; 
# 81
template< bool __T0> 
# 82
struct __truth_type { 
# 83
typedef __false_type __type; }; 
# 86
template<> struct __truth_type< true>  { 
# 87
typedef __true_type __type; }; 
# 91
template< class _Sp, class _Tp> 
# 92
struct __traitor { 
# 94
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 95
typedef typename __truth_type< __value> ::__type __type; 
# 96
}; 
# 99
template< class , class > 
# 100
struct __are_same { 
# 102
enum { __value}; 
# 103
typedef __false_type __type; 
# 104
}; 
# 106
template< class _Tp> 
# 107
struct __are_same< _Tp, _Tp>  { 
# 109
enum { __value = 1}; 
# 110
typedef __true_type __type; 
# 111
}; 
# 114
template< class _Tp> 
# 115
struct __is_void { 
# 117
enum { __value}; 
# 118
typedef __false_type __type; 
# 119
}; 
# 122
template<> struct __is_void< void>  { 
# 124
enum { __value = 1}; 
# 125
typedef __true_type __type; 
# 126
}; 
# 131
template< class _Tp> 
# 132
struct __is_integer { 
# 134
enum { __value}; 
# 135
typedef __false_type __type; 
# 136
}; 
# 142
template<> struct __is_integer< bool>  { 
# 144
enum { __value = 1}; 
# 145
typedef __true_type __type; 
# 146
}; 
# 149
template<> struct __is_integer< char>  { 
# 151
enum { __value = 1}; 
# 152
typedef __true_type __type; 
# 153
}; 
# 156
template<> struct __is_integer< signed char>  { 
# 158
enum { __value = 1}; 
# 159
typedef __true_type __type; 
# 160
}; 
# 163
template<> struct __is_integer< unsigned char>  { 
# 165
enum { __value = 1}; 
# 166
typedef __true_type __type; 
# 167
}; 
# 171
template<> struct __is_integer< wchar_t>  { 
# 173
enum { __value = 1}; 
# 174
typedef __true_type __type; 
# 175
}; 
# 195 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short>  { 
# 197
enum { __value = 1}; 
# 198
typedef __true_type __type; 
# 199
}; 
# 202
template<> struct __is_integer< unsigned short>  { 
# 204
enum { __value = 1}; 
# 205
typedef __true_type __type; 
# 206
}; 
# 209
template<> struct __is_integer< int>  { 
# 211
enum { __value = 1}; 
# 212
typedef __true_type __type; 
# 213
}; 
# 216
template<> struct __is_integer< unsigned>  { 
# 218
enum { __value = 1}; 
# 219
typedef __true_type __type; 
# 220
}; 
# 223
template<> struct __is_integer< long>  { 
# 225
enum { __value = 1}; 
# 226
typedef __true_type __type; 
# 227
}; 
# 230
template<> struct __is_integer< unsigned long>  { 
# 232
enum { __value = 1}; 
# 233
typedef __true_type __type; 
# 234
}; 
# 237
template<> struct __is_integer< long long>  { 
# 239
enum { __value = 1}; 
# 240
typedef __true_type __type; 
# 241
}; 
# 244
template<> struct __is_integer< unsigned long long>  { 
# 246
enum { __value = 1}; 
# 247
typedef __true_type __type; 
# 248
}; 
# 253
template< class _Tp> 
# 254
struct __is_floating { 
# 256
enum { __value}; 
# 257
typedef __false_type __type; 
# 258
}; 
# 262
template<> struct __is_floating< float>  { 
# 264
enum { __value = 1}; 
# 265
typedef __true_type __type; 
# 266
}; 
# 269
template<> struct __is_floating< double>  { 
# 271
enum { __value = 1}; 
# 272
typedef __true_type __type; 
# 273
}; 
# 276
template<> struct __is_floating< long double>  { 
# 278
enum { __value = 1}; 
# 279
typedef __true_type __type; 
# 280
}; 
# 285
template< class _Tp> 
# 286
struct __is_pointer { 
# 288
enum { __value}; 
# 289
typedef __false_type __type; 
# 290
}; 
# 292
template< class _Tp> 
# 293
struct __is_pointer< _Tp *>  { 
# 295
enum { __value = 1}; 
# 296
typedef __true_type __type; 
# 297
}; 
# 302
template< class _Tp> 
# 303
struct __is_normal_iterator { 
# 305
enum { __value}; 
# 306
typedef __false_type __type; 
# 307
}; 
# 309
template< class _Iterator, class _Container> 
# 310
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> >  { 
# 313
enum { __value = 1}; 
# 314
typedef __true_type __type; 
# 315
}; 
# 320
template< class _Tp> 
# 321
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 323
}; 
# 328
template< class _Tp> 
# 329
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> >  { 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 339
}; 
# 344
template< class _Tp> 
# 345
struct __is_char { 
# 347
enum { __value}; 
# 348
typedef __false_type __type; 
# 349
}; 
# 352
template<> struct __is_char< char>  { 
# 354
enum { __value = 1}; 
# 355
typedef __true_type __type; 
# 356
}; 
# 360
template<> struct __is_char< wchar_t>  { 
# 362
enum { __value = 1}; 
# 363
typedef __true_type __type; 
# 364
}; 
# 367
template< class _Tp> 
# 368
struct __is_byte { 
# 370
enum { __value}; 
# 371
typedef __false_type __type; 
# 372
}; 
# 375
template<> struct __is_byte< char>  { 
# 377
enum { __value = 1}; 
# 378
typedef __true_type __type; 
# 379
}; 
# 382
template<> struct __is_byte< signed char>  { 
# 384
enum { __value = 1}; 
# 385
typedef __true_type __type; 
# 386
}; 
# 389
template<> struct __is_byte< unsigned char>  { 
# 391
enum { __value = 1}; 
# 392
typedef __true_type __type; 
# 393
}; 
# 398
template< class _Tp> 
# 399
struct __is_move_iterator { 
# 401
enum { __value}; 
# 402
typedef __false_type __type; 
# 403
}; 
# 417 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 37 "/usr/include/c++/4.4/ext/type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 40
template< bool __T1, class > 
# 41
struct __enable_if { 
# 42
}; 
# 44
template< class _Tp> 
# 45
struct __enable_if< true, _Tp>  { 
# 46
typedef _Tp __type; }; 
# 50
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 51
struct __conditional_type { 
# 52
typedef _Iftrue __type; }; 
# 54
template< class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 56
typedef _Iffalse __type; }; 
# 60
template< class _Tp> 
# 61
struct __add_unsigned { 
# 64
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 67
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 68
}; 
# 71
template<> struct __add_unsigned< char>  { 
# 72
typedef unsigned char __type; }; 
# 75
template<> struct __add_unsigned< signed char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< short>  { 
# 80
typedef unsigned short __type; }; 
# 83
template<> struct __add_unsigned< int>  { 
# 84
typedef unsigned __type; }; 
# 87
template<> struct __add_unsigned< long>  { 
# 88
typedef unsigned long __type; }; 
# 91
template<> struct __add_unsigned< long long>  { 
# 92
typedef unsigned long long __type; }; 
# 96
template<> struct __add_unsigned< bool> ; 
# 99
template<> struct __add_unsigned< wchar_t> ; 
# 103
template< class _Tp> 
# 104
struct __remove_unsigned { 
# 107
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 110
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 111
}; 
# 114
template<> struct __remove_unsigned< char>  { 
# 115
typedef signed char __type; }; 
# 118
template<> struct __remove_unsigned< unsigned char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned short>  { 
# 123
typedef short __type; }; 
# 126
template<> struct __remove_unsigned< unsigned>  { 
# 127
typedef int __type; }; 
# 130
template<> struct __remove_unsigned< unsigned long>  { 
# 131
typedef long __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long long>  { 
# 135
typedef long long __type; }; 
# 139
template<> struct __remove_unsigned< bool> ; 
# 142
template<> struct __remove_unsigned< wchar_t> ; 
# 146
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type * __ptr )
    { return __ptr == 0; }
# 151
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type )
    { return false; }
# 158
template< class _Tp, bool __T2 = std::__is_integer< _Tp> ::__value> 
# 159
struct __promote { 
# 160
typedef double __type; }; 
# 162
template< class _Tp> 
# 163
struct __promote< _Tp, false>  { 
# 164
typedef _Tp __type; }; 
# 166
template< class _Tp, class _Up> 
# 167
struct __promote_2 { 
# 170
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1; 
# 171
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2; 
# 174
public: typedef __typeof__(__type1() + __type2()) __type; 
# 175
}; 
# 177
template< class _Tp, class _Up, class _Vp> 
# 178
struct __promote_3 { 
# 181
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1; 
# 182
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2; 
# 183
typedef typename __promote< _Vp, std::__is_integer< _Vp> ::__value> ::__type __type3; 
# 186
public: typedef __typeof__((__type1() + __type2()) + __type3()) __type; 
# 187
}; 
# 189
template< class _Tp, class _Up, class _Vp, class _Wp> 
# 190
struct __promote_4 { 
# 193
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1; 
# 194
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2; 
# 195
typedef typename __promote< _Vp, std::__is_integer< _Vp> ::__value> ::__type __type3; 
# 196
typedef typename __promote< _Wp, std::__is_integer< _Wp> ::__value> ::__type __type4; 
# 199
public: typedef __typeof__(((__type1() + __type2()) + __type3()) + __type4()) __type; 
# 200
}; 
# 202
}
# 77 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
template < typename _Tp >
    _Tp __cmath_power ( _Tp, unsigned int );
# 84
template < typename _Tp >
    inline _Tp
    __pow_helper ( _Tp __x, int __n )
    {
      return __n < 0
        ? _Tp ( 1 ) / __cmath_power ( __x, - __n )
        : __cmath_power ( __x, __n );
    }
# 94
inline double abs(double __x) 
# 95
{ return __builtin_fabs(__x); } 
# 98
inline float abs(float __x) 
# 99
{ return __builtin_fabsf(__x); } 
# 102
inline long double abs(long double __x) 
# 103
{ return __builtin_fabsl(__x); } 
# 105
using ::acos;
# 108
inline float acos(float __x) 
# 109
{ return __builtin_acosf(__x); } 
# 112
inline long double acos(long double __x) 
# 113
{ return __builtin_acosl(__x); } 
# 115
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    acos ( _Tp __x )
    { return __builtin_acos ( __x ); }
# 121
using ::asin;
# 124
inline float asin(float __x) 
# 125
{ return __builtin_asinf(__x); } 
# 128
inline long double asin(long double __x) 
# 129
{ return __builtin_asinl(__x); } 
# 131
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    asin ( _Tp __x )
    { return __builtin_asin ( __x ); }
# 137
using ::atan;
# 140
inline float atan(float __x) 
# 141
{ return __builtin_atanf(__x); } 
# 144
inline long double atan(long double __x) 
# 145
{ return __builtin_atanl(__x); } 
# 147
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    atan ( _Tp __x )
    { return __builtin_atan ( __x ); }
# 153
using ::atan2;
# 156
inline float atan2(float __y, float __x) 
# 157
{ return __builtin_atan2f(__y, __x); } 
# 160
inline long double atan2(long double __y, long double __x) 
# 161
{ return __builtin_atan2l(__y, __x); } 
# 163
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    atan2 ( _Tp __y, _Up __x )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return atan2 ( __type ( __y ), __type ( __x ) );
    }
# 175
using ::ceil;
# 178
inline float ceil(float __x) 
# 179
{ return __builtin_ceilf(__x); } 
# 182
inline long double ceil(long double __x) 
# 183
{ return __builtin_ceill(__x); } 
# 185
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    ceil ( _Tp __x )
    { return __builtin_ceil ( __x ); }
# 191
using ::cos;
# 194
inline float cos(float __x) 
# 195
{ return __builtin_cosf(__x); } 
# 198
inline long double cos(long double __x) 
# 199
{ return __builtin_cosl(__x); } 
# 201
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cos ( _Tp __x )
    { return __builtin_cos ( __x ); }
# 207
using ::cosh;
# 210
inline float cosh(float __x) 
# 211
{ return __builtin_coshf(__x); } 
# 214
inline long double cosh(long double __x) 
# 215
{ return __builtin_coshl(__x); } 
# 217
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cosh ( _Tp __x )
    { return __builtin_cosh ( __x ); }
# 223
using ::exp;
# 226
inline float exp(float __x) 
# 227
{ return __builtin_expf(__x); } 
# 230
inline long double exp(long double __x) 
# 231
{ return __builtin_expl(__x); } 
# 233
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    exp ( _Tp __x )
    { return __builtin_exp ( __x ); }
# 239
using ::fabs;
# 242
inline float fabs(float __x) 
# 243
{ return __builtin_fabsf(__x); } 
# 246
inline long double fabs(long double __x) 
# 247
{ return __builtin_fabsl(__x); } 
# 249
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    fabs ( _Tp __x )
    { return __builtin_fabs ( __x ); }
# 255
using ::floor;
# 258
inline float floor(float __x) 
# 259
{ return __builtin_floorf(__x); } 
# 262
inline long double floor(long double __x) 
# 263
{ return __builtin_floorl(__x); } 
# 265
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    floor ( _Tp __x )
    { return __builtin_floor ( __x ); }
# 271
using ::fmod;
# 274
inline float fmod(float __x, float __y) 
# 275
{ return __builtin_fmodf(__x, __y); } 
# 278
inline long double fmod(long double __x, long double __y) 
# 279
{ return __builtin_fmodl(__x, __y); } 
# 281
using ::frexp;
# 284
inline float frexp(float __x, int *__exp) 
# 285
{ return __builtin_frexpf(__x, __exp); } 
# 288
inline long double frexp(long double __x, int *__exp) 
# 289
{ return __builtin_frexpl(__x, __exp); } 
# 291
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    frexp ( _Tp __x, int * __exp )
    { return __builtin_frexp ( __x, __exp ); }
# 297
using ::ldexp;
# 300
inline float ldexp(float __x, int __exp) 
# 301
{ return __builtin_ldexpf(__x, __exp); } 
# 304
inline long double ldexp(long double __x, int __exp) 
# 305
{ return __builtin_ldexpl(__x, __exp); } 
# 307
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
  ldexp ( _Tp __x, int __exp )
  { return __builtin_ldexp ( __x, __exp ); }
# 313
using ::log;
# 316
inline float log(float __x) 
# 317
{ return __builtin_logf(__x); } 
# 320
inline long double log(long double __x) 
# 321
{ return __builtin_logl(__x); } 
# 323
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log ( _Tp __x )
    { return __builtin_log ( __x ); }
# 329
using ::log10;
# 332
inline float log10(float __x) 
# 333
{ return __builtin_log10f(__x); } 
# 336
inline long double log10(long double __x) 
# 337
{ return __builtin_log10l(__x); } 
# 339
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log10 ( _Tp __x )
    { return __builtin_log10 ( __x ); }
# 345
using ::modf;
# 348
inline float modf(float __x, float *__iptr) 
# 349
{ return __builtin_modff(__x, __iptr); } 
# 352
inline long double modf(long double __x, long double *__iptr) 
# 353
{ return __builtin_modfl(__x, __iptr); } 
# 355
using ::pow;
# 358
inline float pow(float __x, float __y) 
# 359
{ return __builtin_powf(__x, __y); } 
# 362
inline long double pow(long double __x, long double __y) 
# 363
{ return __builtin_powl(__x, __y); } 
# 369
inline double pow(double __x, int __i) 
# 370
{ return __builtin_powi(__x, __i); } 
# 373
inline float pow(float __x, int __n) 
# 374
{ return __builtin_powif(__x, __n); } 
# 377
inline long double pow(long double __x, int __n) 
# 378
{ return __builtin_powil(__x, __n); } 
# 381
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    pow ( _Tp __x, _Up __y )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return pow ( __type ( __x ), __type ( __y ) );
    }
# 393
using ::sin;
# 396
inline float sin(float __x) 
# 397
{ return __builtin_sinf(__x); } 
# 400
inline long double sin(long double __x) 
# 401
{ return __builtin_sinl(__x); } 
# 403
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sin ( _Tp __x )
    { return __builtin_sin ( __x ); }
# 409
using ::sinh;
# 412
inline float sinh(float __x) 
# 413
{ return __builtin_sinhf(__x); } 
# 416
inline long double sinh(long double __x) 
# 417
{ return __builtin_sinhl(__x); } 
# 419
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sinh ( _Tp __x )
    { return __builtin_sinh ( __x ); }
# 425
using ::sqrt;
# 428
inline float sqrt(float __x) 
# 429
{ return __builtin_sqrtf(__x); } 
# 432
inline long double sqrt(long double __x) 
# 433
{ return __builtin_sqrtl(__x); } 
# 435
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sqrt ( _Tp __x )
    { return __builtin_sqrt ( __x ); }
# 441
using ::tan;
# 444
inline float tan(float __x) 
# 445
{ return __builtin_tanf(__x); } 
# 448
inline long double tan(long double __x) 
# 449
{ return __builtin_tanl(__x); } 
# 451
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tan ( _Tp __x )
    { return __builtin_tan ( __x ); }
# 457
using ::tanh;
# 460
inline float tanh(float __x) 
# 461
{ return __builtin_tanhf(__x); } 
# 464
inline long double tanh(long double __x) 
# 465
{ return __builtin_tanhl(__x); } 
# 467
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tanh ( _Tp __x )
    { return __builtin_tanh ( __x ); }
# 473
}
# 492 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 494
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    fpclassify ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_fpclassify ( FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type ( __f ) );
    }
# 504
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isfinite ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isfinite ( __type ( __f ) );
    }
# 513
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isinf ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isinf ( __type ( __f ) );
    }
# 522
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnan ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnan ( __type ( __f ) );
    }
# 531
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnormal ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnormal ( __type ( __f ) );
    }
# 540
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    signbit ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_signbit ( __type ( __f ) );
    }
# 549
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 558
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreaterequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreaterequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 567
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isless ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isless ( __type ( __f1 ), __type ( __f2 ) );
    }
# 576
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 585
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 594
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isunordered ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isunordered ( __type ( __f1 ), __type ( __f2 ) );
    }
# 603
}
# 35 "/usr/include/c++/4.4/bits/cmath.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 37
template < typename _Tp >
    inline _Tp
    __cmath_power ( _Tp __x, unsigned int __n )
    {
      _Tp __y = __n % 2 ? __x : _Tp ( 1 );

      while ( __n >>= 1 )
        {
          __x = __x * __x;
          if ( __n % 2 )
            __y = __y * __x;
        }

      return __y;
    }
# 53
}
# 49 "/usr/include/c++/4.4/cstddef" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
using ::ptrdiff_t;
# 52
using ::size_t;
# 54
}
# 100 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute((__visibility__("default"))) { 
# 102
using ::div_t;
# 103
using ::ldiv_t;
# 105
using ::abort;
# 106
using ::abs;
# 107
using ::atexit;
# 108
using ::atof;
# 109
using ::atoi;
# 110
using ::atol;
# 111
using ::bsearch;
# 112
using ::calloc;
# 113
using ::div;
# 114
using ::exit;
# 115
using ::free;
# 116
using ::getenv;
# 117
using ::labs;
# 118
using ::ldiv;
# 119
using ::malloc;
# 121
using ::mblen;
# 122
using ::mbstowcs;
# 123
using ::mbtowc;
# 125
using ::qsort;
# 126
using ::rand;
# 127
using ::realloc;
# 128
using ::srand;
# 129
using ::strtod;
# 130
using ::strtol;
# 131
using ::strtoul;
# 132
using ::system;
# 134
using ::wcstombs;
# 135
using ::wctomb;
# 139
inline long abs(long __i) { return labs(__i); } 
# 142
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 144
}
# 157 "/usr/include/c++/4.4/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 160
using ::lldiv_t;
# 166
using ::_Exit;
# 170
inline long long abs(long long __x) { return (__x >= (0)) ? __x : (-__x); } 
# 173
using ::llabs;
# 176
inline lldiv_t div(long long __n, long long __d) 
# 177
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 179
using ::lldiv;
# 190 "/usr/include/c++/4.4/cstdlib" 3
using ::atoll;
# 191
using ::strtoll;
# 192
using ::strtoull;
# 194
using ::strtof;
# 195
using ::strtold;
# 197
}
# 199
namespace std __attribute((__visibility__("default"))) { 
# 202
using __gnu_cxx::lldiv_t;
# 204
using __gnu_cxx::_Exit;
# 205
using __gnu_cxx::abs;
# 207
using __gnu_cxx::llabs;
# 208
using __gnu_cxx::div;
# 209
using __gnu_cxx::lldiv;
# 211
using __gnu_cxx::atoll;
# 212
using __gnu_cxx::strtof;
# 213
using __gnu_cxx::strtoll;
# 214
using __gnu_cxx::strtoull;
# 215
using __gnu_cxx::strtold;
# 217
}
# 2335 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
namespace __gnu_cxx { 
# 2337
extern inline long long abs(long long); 
# 2338
}
# 2340
namespace std { 
# 2342
template< class T> extern inline T __pow_helper(T, int); 
# 2343
template< class T> extern inline T __cmath_power(T, unsigned); 
# 2344
}
# 2346
using std::abs;
# 2347
using std::fabs;
# 2348
using std::ceil;
# 2349
using std::floor;
# 2350
using std::sqrt;
# 2351
using std::pow;
# 2352
using std::log;
# 2353
using std::log10;
# 2354
using std::fmod;
# 2355
using std::modf;
# 2356
using std::exp;
# 2357
using std::frexp;
# 2358
using std::ldexp;
# 2359
using std::asin;
# 2360
using std::sin;
# 2361
using std::sinh;
# 2362
using std::acos;
# 2363
using std::cos;
# 2364
using std::cosh;
# 2365
using std::atan;
# 2366
using std::atan2;
# 2367
using std::tan;
# 2368
using std::tanh;
# 2531 "/home/bachelor/deicide218/cuda-4.2/include/math_functions.h"
namespace std { 
# 2534
extern inline long abs(long); 
# 2535
extern inline float abs(float); 
# 2536
extern inline double abs(double); 
# 2537
extern inline float fabs(float); 
# 2538
extern inline float ceil(float); 
# 2539
extern inline float floor(float); 
# 2540
extern inline float sqrt(float); 
# 2541
extern inline float pow(float, float); 
# 2542
extern inline float pow(float, int); 
# 2543
extern inline double pow(double, int); 
# 2544
extern inline float log(float); 
# 2545
extern inline float log10(float); 
# 2546
extern inline float fmod(float, float); 
# 2547
extern inline float modf(float, float *); 
# 2548
extern inline float exp(float); 
# 2549
extern inline float frexp(float, int *); 
# 2550
extern inline float ldexp(float, int); 
# 2551
extern inline float asin(float); 
# 2552
extern inline float sin(float); 
# 2553
extern inline float sinh(float); 
# 2554
extern inline float acos(float); 
# 2555
extern inline float cos(float); 
# 2556
extern inline float cosh(float); 
# 2557
extern inline float atan(float); 
# 2558
extern inline float atan2(float, float); 
# 2559
extern inline float tan(float); 
# 2560
extern inline float tanh(float); 
# 2563
}
# 2566
static inline float logb(float a) 
# 2567
{ 
# 2568
return logbf(a); 
# 2569
} 
# 2571
static inline int ilogb(float a) 
# 2572
{ 
# 2573
return ilogbf(a); 
# 2574
} 
# 2576
static inline float scalbn(float a, int b) 
# 2577
{ 
# 2578
return scalbnf(a, b); 
# 2579
} 
# 2581
static inline float scalbln(float a, long b) 
# 2582
{ 
# 2583
return scalblnf(a, b); 
# 2584
} 
# 2586
static inline float exp2(float a) 
# 2587
{ 
# 2588
return exp2f(a); 
# 2589
} 
# 2591
static inline float exp10(float a) 
# 2592
{ 
# 2593
return exp10f(a); 
# 2594
} 
# 2596
static inline float expm1(float a) 
# 2597
{ 
# 2598
return expm1f(a); 
# 2599
} 
# 2601
static inline float log2(float a) 
# 2602
{ 
# 2603
return log2f(a); 
# 2604
} 
# 2606
static inline float log1p(float a) 
# 2607
{ 
# 2608
return log1pf(a); 
# 2609
} 
# 2611
static inline float rsqrt(float a) 
# 2612
{ 
# 2613
return rsqrtf(a); 
# 2614
} 
# 2616
static inline float acosh(float a) 
# 2617
{ 
# 2618
return acoshf(a); 
# 2619
} 
# 2621
static inline float asinh(float a) 
# 2622
{ 
# 2623
return asinhf(a); 
# 2624
} 
# 2626
static inline float atanh(float a) 
# 2627
{ 
# 2628
return atanhf(a); 
# 2629
} 
# 2631
static inline float hypot(float a, float b) 
# 2632
{ 
# 2633
return hypotf(a, b); 
# 2634
} 
# 2636
static inline float cbrt(float a) 
# 2637
{ 
# 2638
return cbrtf(a); 
# 2639
} 
# 2641
static inline float rcbrt(float a) 
# 2642
{ 
# 2643
return rcbrtf(a); 
# 2644
} 
# 2646
static inline float sinpi(float a) 
# 2647
{ 
# 2648
return sinpif(a); 
# 2649
} 
# 2651
static inline float cospi(float a) 
# 2652
{ 
# 2653
return cospif(a); 
# 2654
} 
# 2656
static inline void sincos(float a, float *sptr, float *cptr) 
# 2657
{ 
# 2658
sincosf(a, sptr, cptr); 
# 2659
} 
# 2661
static inline float j0(float a) 
# 2662
{ 
# 2663
return j0f(a); 
# 2664
} 
# 2666
static inline float j1(float a) 
# 2667
{ 
# 2668
return j1f(a); 
# 2669
} 
# 2671
static inline float jn(int n, float a) 
# 2672
{ 
# 2673
return jnf(n, a); 
# 2674
} 
# 2676
static inline float y0(float a) 
# 2677
{ 
# 2678
return y0f(a); 
# 2679
} 
# 2681
static inline float y1(float a) 
# 2682
{ 
# 2683
return y1f(a); 
# 2684
} 
# 2686
static inline float yn(int n, float a) 
# 2687
{ 
# 2688
return ynf(n, a); 
# 2689
} 
# 2691
static inline float erf(float a) 
# 2692
{ 
# 2693
return erff(a); 
# 2694
} 
# 2696
static inline float erfinv(float a) 
# 2697
{ 
# 2698
return erfinvf(a); 
# 2699
} 
# 2701
static inline float erfc(float a) 
# 2702
{ 
# 2703
return erfcf(a); 
# 2704
} 
# 2706
static inline float erfcinv(float a) 
# 2707
{ 
# 2708
return erfcinvf(a); 
# 2709
} 
# 2711
static inline float erfcx(float a) 
# 2712
{ 
# 2713
return erfcxf(a); 
# 2714
} 
# 2716
static inline float lgamma(float a) 
# 2717
{ 
# 2718
return lgammaf(a); 
# 2719
} 
# 2721
static inline float tgamma(float a) 
# 2722
{ 
# 2723
return tgammaf(a); 
# 2724
} 
# 2726
static inline float copysign(float a, float b) 
# 2727
{ 
# 2728
return copysignf(a, b); 
# 2729
} 
# 2731
static inline double copysign(double a, float b) 
# 2732
{ 
# 2733
return copysign(a, (double)b); 
# 2734
} 
# 2736
static inline float copysign(float a, double b) 
# 2737
{ 
# 2738
return copysignf(a, (float)b); 
# 2739
} 
# 2741
static inline float nextafter(float a, float b) 
# 2742
{ 
# 2743
return nextafterf(a, b); 
# 2744
} 
# 2746
static inline float remainder(float a, float b) 
# 2747
{ 
# 2748
return remainderf(a, b); 
# 2749
} 
# 2751
static inline float remquo(float a, float b, int *quo) 
# 2752
{ 
# 2753
return remquof(a, b, quo); 
# 2754
} 
# 2756
static inline float round(float a) 
# 2757
{ 
# 2758
return roundf(a); 
# 2759
} 
# 2761
static inline long lround(float a) 
# 2762
{ 
# 2763
return lroundf(a); 
# 2764
} 
# 2766
static inline long long llround(float a) 
# 2767
{ 
# 2768
return llroundf(a); 
# 2769
} 
# 2771
static inline float trunc(float a) 
# 2772
{ 
# 2773
return truncf(a); 
# 2774
} 
# 2776
static inline float rint(float a) 
# 2777
{ 
# 2778
return rintf(a); 
# 2779
} 
# 2781
static inline long lrint(float a) 
# 2782
{ 
# 2783
return lrintf(a); 
# 2784
} 
# 2786
static inline long long llrint(float a) 
# 2787
{ 
# 2788
return llrintf(a); 
# 2789
} 
# 2791
static inline float nearbyint(float a) 
# 2792
{ 
# 2793
return nearbyintf(a); 
# 2794
} 
# 2796
static inline float fdim(float a, float b) 
# 2797
{ 
# 2798
return fdimf(a, b); 
# 2799
} 
# 2801
static inline float fma(float a, float b, float c) 
# 2802
{ 
# 2803
return fmaf(a, b, c); 
# 2804
} 
# 2806
static inline float fmax(float a, float b) 
# 2807
{ 
# 2808
return fmaxf(a, b); 
# 2809
} 
# 2811
static inline float fmin(float a, float b) 
# 2812
{ 
# 2813
return fminf(a, b); 
# 2814
} 
# 2816
static inline unsigned min(unsigned a, unsigned b) 
# 2817
{ 
# 2818
return umin(a, b); 
# 2819
} 
# 2821
static inline unsigned min(int a, unsigned b) 
# 2822
{ 
# 2823
return umin((unsigned)a, b); 
# 2824
} 
# 2826
static inline unsigned min(unsigned a, int b) 
# 2827
{ 
# 2828
return umin(a, (unsigned)b); 
# 2829
} 
# 2831
static inline long long min(long long a, long long b) 
# 2832
{ 
# 2833
return llmin(a, b); 
# 2834
} 
# 2836
static inline unsigned long long min(unsigned long long a, unsigned long long b) 
# 2837
{ 
# 2838
return ullmin(a, b); 
# 2839
} 
# 2841
static inline unsigned long long min(long long a, unsigned long long b) 
# 2842
{ 
# 2843
return ullmin((unsigned long long)a, b); 
# 2844
} 
# 2846
static inline unsigned long long min(unsigned long long a, long long b) 
# 2847
{ 
# 2848
return ullmin(a, (unsigned long long)b); 
# 2849
} 
# 2851
static inline float min(float a, float b) 
# 2852
{ 
# 2853
return fminf(a, b); 
# 2854
} 
# 2856
static inline double min(double a, double b) 
# 2857
{ 
# 2858
return fmin(a, b); 
# 2859
} 
# 2861
static inline double min(float a, double b) 
# 2862
{ 
# 2863
return fmin((double)a, b); 
# 2864
} 
# 2866
static inline double min(double a, float b) 
# 2867
{ 
# 2868
return fmin(a, (double)b); 
# 2869
} 
# 2871
static inline unsigned max(unsigned a, unsigned b) 
# 2872
{ 
# 2873
return umax(a, b); 
# 2874
} 
# 2876
static inline unsigned max(int a, unsigned b) 
# 2877
{ 
# 2878
return umax((unsigned)a, b); 
# 2879
} 
# 2881
static inline unsigned max(unsigned a, int b) 
# 2882
{ 
# 2883
return umax(a, (unsigned)b); 
# 2884
} 
# 2886
static inline long long max(long long a, long long b) 
# 2887
{ 
# 2888
return llmax(a, b); 
# 2889
} 
# 2891
static inline unsigned long long max(unsigned long long a, unsigned long long b) 
# 2892
{ 
# 2893
return ullmax(a, b); 
# 2894
} 
# 2896
static inline unsigned long long max(long long a, unsigned long long b) 
# 2897
{ 
# 2898
return ullmax((unsigned long long)a, b); 
# 2899
} 
# 2901
static inline unsigned long long max(unsigned long long a, long long b) 
# 2902
{ 
# 2903
return ullmax(a, (unsigned long long)b); 
# 2904
} 
# 2906
static inline float max(float a, float b) 
# 2907
{ 
# 2908
return fmaxf(a, b); 
# 2909
} 
# 2911
static inline double max(double a, double b) 
# 2912
{ 
# 2913
return fmax(a, b); 
# 2914
} 
# 2916
static inline double max(float a, double b) 
# 2917
{ 
# 2918
return fmax((double)a, b); 
# 2919
} 
# 2921
static inline double max(double a, float b) 
# 2922
{ 
# 2923
return fmax(a, (double)b); 
# 2924
} 
# 73 "/home/bachelor/deicide218/cuda-4.2/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 74
struct surface : public surfaceReference { 
# 76
surface() 
# 77
{ 
# 78
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 79
} 
# 81
surface(cudaChannelFormatDesc desc) 
# 82
{ 
# 83
(channelDesc) = desc; 
# 84
} 
# 85
}; 
# 87
template< int dim> 
# 88
struct surface< void, dim>  : public surfaceReference { 
# 90
surface() 
# 91
{ 
# 92
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 93
} 
# 94
}; 
# 73 "/home/bachelor/deicide218/cuda-4.2/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 74
struct texture : public textureReference { 
# 76
texture(int norm = 0, cudaTextureFilterMode 
# 77
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 78
aMode = cudaAddressModeClamp) 
# 79
{ 
# 80
(normalized) = norm; 
# 81
(filterMode) = fMode; 
# 82
((addressMode)[0]) = aMode; 
# 83
((addressMode)[1]) = aMode; 
# 84
((addressMode)[2]) = aMode; 
# 85
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 86
(sRGB) = 0; 
# 87
} 
# 89
texture(int norm, cudaTextureFilterMode 
# 90
fMode, cudaTextureAddressMode 
# 91
aMode, cudaChannelFormatDesc 
# 92
desc) 
# 93
{ 
# 94
(normalized) = norm; 
# 95
(filterMode) = fMode; 
# 96
((addressMode)[0]) = aMode; 
# 97
((addressMode)[1]) = aMode; 
# 98
((addressMode)[2]) = aMode; 
# 99
(channelDesc) = desc; 
# 100
(sRGB) = 0; 
# 101
} 
# 102
}; 
# 1103 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline int mulhi(int a, int b) 
# 1104
{int volatile ___ = 1;(void)a;(void)b;
# 1106
exit(___);}
#if 0
# 1104
{ 
# 1105
return __mulhi(a, b); 
# 1106
} 
#endif
# 1108 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b) 
# 1109
{int volatile ___ = 1;(void)a;(void)b;
# 1111
exit(___);}
#if 0
# 1109
{ 
# 1110
return __umulhi(a, b); 
# 1111
} 
#endif
# 1113 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b) 
# 1114
{int volatile ___ = 1;(void)a;(void)b;
# 1116
exit(___);}
#if 0
# 1114
{ 
# 1115
return __umulhi((unsigned)a, b); 
# 1116
} 
#endif
# 1118 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b) 
# 1119
{int volatile ___ = 1;(void)a;(void)b;
# 1121
exit(___);}
#if 0
# 1119
{ 
# 1120
return __umulhi(a, (unsigned)b); 
# 1121
} 
#endif
# 1123 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b) 
# 1124
{int volatile ___ = 1;(void)a;(void)b;
# 1126
exit(___);}
#if 0
# 1124
{ 
# 1125
return __mul64hi(a, b); 
# 1126
} 
#endif
# 1128 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b) 
# 1129
{int volatile ___ = 1;(void)a;(void)b;
# 1131
exit(___);}
#if 0
# 1129
{ 
# 1130
return __umul64hi(a, b); 
# 1131
} 
#endif
# 1133 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b) 
# 1134
{int volatile ___ = 1;(void)a;(void)b;
# 1136
exit(___);}
#if 0
# 1134
{ 
# 1135
return __umul64hi((unsigned long long)a, b); 
# 1136
} 
#endif
# 1138 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b) 
# 1139
{int volatile ___ = 1;(void)a;(void)b;
# 1141
exit(___);}
#if 0
# 1139
{ 
# 1140
return __umul64hi(a, (unsigned long long)b); 
# 1141
} 
#endif
# 1143 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline int float_as_int(float a) 
# 1144
{int volatile ___ = 1;(void)a;
# 1146
exit(___);}
#if 0
# 1144
{ 
# 1145
return __float_as_int(a); 
# 1146
} 
#endif
# 1148 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline float int_as_float(int a) 
# 1149
{int volatile ___ = 1;(void)a;
# 1151
exit(___);}
#if 0
# 1149
{ 
# 1150
return __int_as_float(a); 
# 1151
} 
#endif
# 1153 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline float saturate(float a) 
# 1154
{int volatile ___ = 1;(void)a;
# 1156
exit(___);}
#if 0
# 1154
{ 
# 1155
return __saturatef(a); 
# 1156
} 
#endif
# 1158 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline int mul24(int a, int b) 
# 1159
{int volatile ___ = 1;(void)a;(void)b;
# 1161
exit(___);}
#if 0
# 1159
{ 
# 1160
return __mul24(a, b); 
# 1161
} 
#endif
# 1163 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b) 
# 1164
{int volatile ___ = 1;(void)a;(void)b;
# 1166
exit(___);}
#if 0
# 1164
{ 
# 1165
return __umul24(a, b); 
# 1166
} 
#endif
# 1168 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline void trap() 
# 1169
{int volatile ___ = 1;
# 1171
exit(___);}
#if 0
# 1169
{ 
# 1170
__trap(); 
# 1171
} 
#endif
# 1174 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline void brkpt(int c = 0) 
# 1175
{int volatile ___ = 1;(void)c;
# 1177
exit(___);}
#if 0
# 1175
{ 
# 1176
__brkpt(c); 
# 1177
} 
#endif
# 1179 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline void syncthreads() 
# 1180
{int volatile ___ = 1;
# 1182
exit(___);}
#if 0
# 1180
{ 
# 1181
__syncthreads(); 
# 1182
} 
#endif
# 1184 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline void prof_trigger(int e) 
# 1185
{int volatile ___ = 1;(void)e;
# 1202
exit(___);}
#if 0
# 1185
{ 
# 1186
if (e == 0) { __prof_trigger(0); } else { 
# 1187
if (e == 1) { __prof_trigger(1); } else { 
# 1188
if (e == 2) { __prof_trigger(2); } else { 
# 1189
if (e == 3) { __prof_trigger(3); } else { 
# 1190
if (e == 4) { __prof_trigger(4); } else { 
# 1191
if (e == 5) { __prof_trigger(5); } else { 
# 1192
if (e == 6) { __prof_trigger(6); } else { 
# 1193
if (e == 7) { __prof_trigger(7); } else { 
# 1194
if (e == 8) { __prof_trigger(8); } else { 
# 1195
if (e == 9) { __prof_trigger(9); } else { 
# 1196
if (e == 10) { __prof_trigger(10); } else { 
# 1197
if (e == 11) { __prof_trigger(11); } else { 
# 1198
if (e == 12) { __prof_trigger(12); } else { 
# 1199
if (e == 13) { __prof_trigger(13); } else { 
# 1200
if (e == 14) { __prof_trigger(14); } else { 
# 1201
if (e == 15) { __prof_trigger(15); }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  
# 1202
} 
#endif
# 1204 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline void threadfence(bool global = true) 
# 1205
{int volatile ___ = 1;(void)global;
# 1207
exit(___);}
#if 0
# 1205
{ 
# 1206
global ? __threadfence() : __threadfence_block(); 
# 1207
} 
#endif
# 1209 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero) 
# 1210
{int volatile ___ = 1;(void)a;(void)mode;
# 1215
exit(___);}
#if 0
# 1210
{ 
# 1211
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 1215
} 
#endif
# 1217 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero) 
# 1218
{int volatile ___ = 1;(void)a;(void)mode;
# 1223
exit(___);}
#if 0
# 1218
{ 
# 1219
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 1223
} 
#endif
# 1225 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest) 
# 1226
{int volatile ___ = 1;(void)a;(void)mode;
# 1231
exit(___);}
#if 0
# 1226
{ 
# 1227
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 1231
} 
#endif
# 1233 "/home/bachelor/deicide218/cuda-4.2/include/device_functions.h"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest) 
# 1234
{int volatile ___ = 1;(void)a;(void)mode;
# 1239
exit(___);}
#if 0
# 1234
{ 
# 1235
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 1239
} 
#endif
# 96 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) 
# 97
{int volatile ___ = 1;(void)address;(void)val;
# 99
exit(___);}
#if 0
# 97
{ 
# 98
return __iAtomicAdd(address, val); 
# 99
} 
#endif
# 101 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) 
# 102
{int volatile ___ = 1;(void)address;(void)val;
# 104
exit(___);}
#if 0
# 102
{ 
# 103
return __uAtomicAdd(address, val); 
# 104
} 
#endif
# 106 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) 
# 107
{int volatile ___ = 1;(void)address;(void)val;
# 109
exit(___);}
#if 0
# 107
{ 
# 108
return __iAtomicAdd(address, (unsigned)(-((int)val))); 
# 109
} 
#endif
# 111 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) 
# 112
{int volatile ___ = 1;(void)address;(void)val;
# 114
exit(___);}
#if 0
# 112
{ 
# 113
return __uAtomicAdd(address, (unsigned)(-((int)val))); 
# 114
} 
#endif
# 116 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) 
# 117
{int volatile ___ = 1;(void)address;(void)val;
# 119
exit(___);}
#if 0
# 117
{ 
# 118
return __iAtomicExch(address, val); 
# 119
} 
#endif
# 121 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) 
# 122
{int volatile ___ = 1;(void)address;(void)val;
# 124
exit(___);}
#if 0
# 122
{ 
# 123
return __uAtomicExch(address, val); 
# 124
} 
#endif
# 126 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) 
# 127
{int volatile ___ = 1;(void)address;(void)val;
# 129
exit(___);}
#if 0
# 127
{ 
# 128
return __fAtomicExch(address, val); 
# 129
} 
#endif
# 131 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) 
# 132
{int volatile ___ = 1;(void)address;(void)val;
# 134
exit(___);}
#if 0
# 132
{ 
# 133
return __iAtomicMin(address, val); 
# 134
} 
#endif
# 136 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) 
# 137
{int volatile ___ = 1;(void)address;(void)val;
# 139
exit(___);}
#if 0
# 137
{ 
# 138
return __uAtomicMin(address, val); 
# 139
} 
#endif
# 141 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) 
# 142
{int volatile ___ = 1;(void)address;(void)val;
# 144
exit(___);}
#if 0
# 142
{ 
# 143
return __iAtomicMax(address, val); 
# 144
} 
#endif
# 146 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) 
# 147
{int volatile ___ = 1;(void)address;(void)val;
# 149
exit(___);}
#if 0
# 147
{ 
# 148
return __uAtomicMax(address, val); 
# 149
} 
#endif
# 151 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) 
# 152
{int volatile ___ = 1;(void)address;(void)val;
# 154
exit(___);}
#if 0
# 152
{ 
# 153
return __uAtomicInc(address, val); 
# 154
} 
#endif
# 156 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) 
# 157
{int volatile ___ = 1;(void)address;(void)val;
# 159
exit(___);}
#if 0
# 157
{ 
# 158
return __uAtomicDec(address, val); 
# 159
} 
#endif
# 161 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) 
# 162
{int volatile ___ = 1;(void)address;(void)val;
# 164
exit(___);}
#if 0
# 162
{ 
# 163
return __iAtomicAnd(address, val); 
# 164
} 
#endif
# 166 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) 
# 167
{int volatile ___ = 1;(void)address;(void)val;
# 169
exit(___);}
#if 0
# 167
{ 
# 168
return __uAtomicAnd(address, val); 
# 169
} 
#endif
# 171 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) 
# 172
{int volatile ___ = 1;(void)address;(void)val;
# 174
exit(___);}
#if 0
# 172
{ 
# 173
return __iAtomicOr(address, val); 
# 174
} 
#endif
# 176 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) 
# 177
{int volatile ___ = 1;(void)address;(void)val;
# 179
exit(___);}
#if 0
# 177
{ 
# 178
return __uAtomicOr(address, val); 
# 179
} 
#endif
# 181 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) 
# 182
{int volatile ___ = 1;(void)address;(void)val;
# 184
exit(___);}
#if 0
# 182
{ 
# 183
return __iAtomicXor(address, val); 
# 184
} 
#endif
# 186 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) 
# 187
{int volatile ___ = 1;(void)address;(void)val;
# 189
exit(___);}
#if 0
# 187
{ 
# 188
return __uAtomicXor(address, val); 
# 189
} 
#endif
# 191 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) 
# 192
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 194
exit(___);}
#if 0
# 192
{ 
# 193
return __iAtomicCAS(address, compare, val); 
# 194
} 
#endif
# 196 "/home/bachelor/deicide218/cuda-4.2/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) 
# 197
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 199
exit(___);}
#if 0
# 197
{ 
# 198
return __uAtomicCAS(address, compare, val); 
# 199
} 
#endif
# 81 "/home/bachelor/deicide218/cuda-4.2/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) 
# 82
{int volatile ___ = 1;(void)address;(void)val;
# 84
exit(___);}
#if 0
# 82
{ 
# 83
return __ullAtomicAdd(address, val); 
# 84
} 
#endif
# 86 "/home/bachelor/deicide218/cuda-4.2/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) 
# 87
{int volatile ___ = 1;(void)address;(void)val;
# 89
exit(___);}
#if 0
# 87
{ 
# 88
return __ullAtomicExch(address, val); 
# 89
} 
#endif
# 91 "/home/bachelor/deicide218/cuda-4.2/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) 
# 92
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 94
exit(___);}
#if 0
# 92
{ 
# 93
return __ullAtomicCAS(address, compare, val); 
# 94
} 
#endif
# 96 "/home/bachelor/deicide218/cuda-4.2/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool any(bool cond) 
# 97
{int volatile ___ = 1;(void)cond;
# 99
exit(___);}
#if 0
# 97
{ 
# 98
return (bool)__any((int)cond); 
# 99
} 
#endif
# 101 "/home/bachelor/deicide218/cuda-4.2/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool all(bool cond) 
# 102
{int volatile ___ = 1;(void)cond;
# 104
exit(___);}
#if 0
# 102
{ 
# 103
return (bool)__all((int)cond); 
# 104
} 
#endif
# 521 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 522
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 527
exit(___);}
#if 0
# 522
{ 
# 523
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 527
} 
#endif
# 529 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest) 
# 530
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 535
exit(___);}
#if 0
# 530
{ 
# 531
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 535
} 
#endif
# 537 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest) 
# 538
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 543
exit(___);}
#if 0
# 538
{ 
# 539
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 543
} 
#endif
# 545 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero) 
# 546
{int volatile ___ = 1;(void)a;(void)mode;
# 551
exit(___);}
#if 0
# 546
{ 
# 547
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 551
} 
#endif
# 553 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero) 
# 554
{int volatile ___ = 1;(void)a;(void)mode;
# 559
exit(___);}
#if 0
# 554
{ 
# 555
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 559
} 
#endif
# 561 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero) 
# 562
{int volatile ___ = 1;(void)a;(void)mode;
# 567
exit(___);}
#if 0
# 562
{ 
# 563
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 567
} 
#endif
# 569 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero) 
# 570
{int volatile ___ = 1;(void)a;(void)mode;
# 575
exit(___);}
#if 0
# 570
{ 
# 571
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 575
} 
#endif
# 577 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest) 
# 578
{int volatile ___ = 1;(void)a;(void)mode;
# 583
exit(___);}
#if 0
# 578
{ 
# 579
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 583
} 
#endif
# 585 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest) 
# 586
{int volatile ___ = 1;(void)a;(void)mode;
# 591
exit(___);}
#if 0
# 586
{ 
# 587
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 591
} 
#endif
# 593 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest) 
# 594
{int volatile ___ = 1;(void)a;(void)mode;
# 596
exit(___);}
#if 0
# 594
{ 
# 595
return (double)a; 
# 596
} 
#endif
# 598 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest) 
# 599
{int volatile ___ = 1;(void)a;(void)mode;
# 601
exit(___);}
#if 0
# 599
{ 
# 600
return (double)a; 
# 601
} 
#endif
# 603 "/home/bachelor/deicide218/cuda-4.2/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest) 
# 604
{int volatile ___ = 1;(void)a;(void)mode;
# 606
exit(___);}
#if 0
# 604
{ 
# 605
return (double)a; 
# 606
} 
#endif
# 77 "/home/bachelor/deicide218/cuda-4.2/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) 
# 78
{int volatile ___ = 1;(void)address;(void)val;
# 80
exit(___);}
#if 0
# 78
{ 
# 79
return __fAtomicAdd(address, val); 
# 80
} 
#endif
# 239 "/home/bachelor/deicide218/cuda-4.2/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned ballot(bool pred) 
# 240
{int volatile ___ = 1;(void)pred;
# 242
exit(___);}
#if 0
# 240
{ 
# 241
return __ballot((int)pred); 
# 242
} 
#endif
# 244 "/home/bachelor/deicide218/cuda-4.2/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) 
# 245
{int volatile ___ = 1;(void)pred;
# 247
exit(___);}
#if 0
# 245
{ 
# 246
return __syncthreads_count((int)pred); 
# 247
} 
#endif
# 249 "/home/bachelor/deicide218/cuda-4.2/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) 
# 250
{int volatile ___ = 1;(void)pred;
# 252
exit(___);}
#if 0
# 250
{ 
# 251
return (bool)__syncthreads_and((int)pred); 
# 252
} 
#endif
# 254 "/home/bachelor/deicide218/cuda-4.2/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) 
# 255
{int volatile ___ = 1;(void)pred;
# 257
exit(___);}
#if 0
# 255
{ 
# 256
return (bool)__syncthreads_or((int)pred); 
# 257
} 
#endif
# 93 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 98
exit(___);}
#if 0
# 93
{ 
# 94
int ret, c; 
# 95
c = (((32 - width) << 8) | 31); 
# 96
__asm__ volatile("shfl.idx.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (srcLane), "r" (c)); 
# 97
return ret; 
# 98
} 
#endif
# 100 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 105
exit(___);}
#if 0
# 100
{ 
# 101
int ret, c; 
# 102
c = ((32 - width) << 8); 
# 103
__asm__ volatile("shfl.up.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (delta), "r" (c)); 
# 104
return ret; 
# 105
} 
#endif
# 107 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 112
exit(___);}
#if 0
# 107
{ 
# 108
int ret, c; 
# 109
c = (((32 - width) << 8) | 31); 
# 110
__asm__ volatile("shfl.down.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (delta), "r" (c)); 
# 111
return ret; 
# 112
} 
#endif
# 114 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 119
exit(___);}
#if 0
# 114
{ 
# 115
int ret, c; 
# 116
c = (((32 - width) << 8) | 31); 
# 117
__asm__ volatile("shfl.bfly.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (laneMask), "r" (c)); 
# 118
return ret; 
# 119
} 
#endif
# 121 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 127
exit(___);}
#if 0
# 121
{ 
# 122
float ret; 
# 123
int c; 
# 124
c = (((32 - width) << 8) | 31); 
# 125
__asm__ volatile("shfl.idx.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (srcLane), "r" (c)); 
# 126
return ret; 
# 127
} 
#endif
# 129 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 135
exit(___);}
#if 0
# 129
{ 
# 130
float ret; 
# 131
int c; 
# 132
c = ((32 - width) << 8); 
# 133
__asm__ volatile("shfl.up.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (delta), "r" (c)); 
# 134
return ret; 
# 135
} 
#endif
# 137 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 143
exit(___);}
#if 0
# 137
{ 
# 138
float ret; 
# 139
int c; 
# 140
c = (((32 - width) << 8) | 31); 
# 141
__asm__ volatile("shfl.down.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (delta), "r" (c)); 
# 142
return ret; 
# 143
} 
#endif
# 145 "/home/bachelor/deicide218/cuda-4.2/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 151
exit(___);}
#if 0
# 145
{ 
# 146
float ret; 
# 147
int c; 
# 148
c = (((32 - width) << 8) | 31); 
# 149
__asm__ volatile("shfl.bfly.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (laneMask), "r" (c)); 
# 150
return ret; 
# 151
} 
#endif
# 99 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 100
surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 101
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 108
exit(___);}
#if 0
# 101
{ 
# 102
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf1Dreads1(surf, x, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap))) : ((void)0))))); 
# 108
} 
#endif
# 110 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 111
surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 112
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 118
exit(___);}
#if 0
# 112
{ 
# 113
T tmp; 
# 115
surf1Dread(&tmp, surf, x, (int)sizeof(T), mode); 
# 117
return tmp; 
# 118
} 
#endif
# 120 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 121
surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 122
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 124
exit(___);}
#if 0
# 122
{ 
# 123
(*res) = surf1Dread< T> (surf, x, mode); 
# 124
} 
#endif
# 127 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 128
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 130
exit(___);}
#if 0
# 128
{ 
# 129
return (char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x); 
# 130
} 
#endif
# 133 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 134
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 136
exit(___);}
#if 0
# 134
{ 
# 135
return (signed char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x); 
# 136
} 
#endif
# 139 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 140
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 142
exit(___);}
#if 0
# 140
{ 
# 141
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x; 
# 142
} 
#endif
# 145 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 146
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 148
exit(___);}
#if 0
# 146
{ 
# 147
return make_char1((signed char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x)); 
# 148
} 
#endif
# 151 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 152
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 154
exit(___);}
#if 0
# 152
{ 
# 153
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap); 
# 154
} 
#endif
# 157 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 158
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 162
exit(___);}
#if 0
# 158
{ 
# 159
uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
# 161
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 162
} 
#endif
# 165 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 166
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 168
exit(___);}
#if 0
# 166
{ 
# 167
return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
# 168
} 
#endif
# 171 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 172
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 176
exit(___);}
#if 0
# 172
{ 
# 173
uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
# 175
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 176
} 
#endif
# 179 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 180
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 182
exit(___);}
#if 0
# 180
{ 
# 181
return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
# 182
} 
#endif
# 185 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 186
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 188
exit(___);}
#if 0
# 186
{ 
# 187
return (short)(__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x); 
# 188
} 
#endif
# 191 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 192
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 194
exit(___);}
#if 0
# 192
{ 
# 193
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap).x; 
# 194
} 
#endif
# 197 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 198
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 200
exit(___);}
#if 0
# 198
{ 
# 199
return make_short1((signed short)(__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x)); 
# 200
} 
#endif
# 203 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 204
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 206
exit(___);}
#if 0
# 204
{ 
# 205
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap); 
# 206
} 
#endif
# 209 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 210
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 214
exit(___);}
#if 0
# 210
{ 
# 211
ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
# 213
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 214
} 
#endif
# 217 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 218
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 220
exit(___);}
#if 0
# 218
{ 
# 219
return __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
# 220
} 
#endif
# 223 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 224
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 228
exit(___);}
#if 0
# 224
{ 
# 225
ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
# 227
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 228
} 
#endif
# 231 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 232
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 234
exit(___);}
#if 0
# 232
{ 
# 233
return __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
# 234
} 
#endif
# 237 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 238
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 240
exit(___);}
#if 0
# 238
{ 
# 239
return (int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x); 
# 240
} 
#endif
# 243 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 244
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 246
exit(___);}
#if 0
# 244
{ 
# 245
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x; 
# 246
} 
#endif
# 249 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 250
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 252
exit(___);}
#if 0
# 250
{ 
# 251
return make_int1((signed int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x)); 
# 252
} 
#endif
# 255 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 256
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 258
exit(___);}
#if 0
# 256
{ 
# 257
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap); 
# 258
} 
#endif
# 261 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 262
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 266
exit(___);}
#if 0
# 262
{ 
# 263
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 265
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 266
} 
#endif
# 269 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 270
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 272
exit(___);}
#if 0
# 270
{ 
# 271
return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 272
} 
#endif
# 275 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 276
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 280
exit(___);}
#if 0
# 276
{ 
# 277
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 279
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 280
} 
#endif
# 283 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 284
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 286
exit(___);}
#if 0
# 284
{ 
# 285
return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 286
} 
#endif
# 289 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 290
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 292
exit(___);}
#if 0
# 290
{ 
# 291
return (long long)(__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x); 
# 292
} 
#endif
# 295 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 296
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 298
exit(___);}
#if 0
# 296
{ 
# 297
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x; 
# 298
} 
#endif
# 301 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 302
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 304
exit(___);}
#if 0
# 302
{ 
# 303
return make_longlong1((long long)(__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x)); 
# 304
} 
#endif
# 307 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 308
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 310
exit(___);}
#if 0
# 308
{ 
# 309
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap); 
# 310
} 
#endif
# 313 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 314
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 318
exit(___);}
#if 0
# 314
{ 
# 315
ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
# 317
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 318
} 
#endif
# 321 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 322
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 324
exit(___);}
#if 0
# 322
{ 
# 323
return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
# 324
} 
#endif
# 387 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 388
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 390
exit(___);}
#if 0
# 388
{ 
# 389
return __int_as_float((int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x)); 
# 390
} 
#endif
# 393 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 394
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 396
exit(___);}
#if 0
# 394
{ 
# 395
return make_float1(__int_as_float((int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x))); 
# 396
} 
#endif
# 399 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 400
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 404
exit(___);}
#if 0
# 400
{ 
# 401
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 403
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 404
} 
#endif
# 407 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 408
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 412
exit(___);}
#if 0
# 408
{ 
# 409
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 411
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 412
} 
#endif
# 447 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 448
surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 449
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 456
exit(___);}
#if 0
# 449
{ 
# 450
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap))) : ((void)0))))); 
# 456
} 
#endif
# 458 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 459
surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 460
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 466
exit(___);}
#if 0
# 460
{ 
# 461
T tmp; 
# 463
surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode); 
# 465
return tmp; 
# 466
} 
#endif
# 468 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 469
surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 470
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 472
exit(___);}
#if 0
# 470
{ 
# 471
(*res) = surf2Dread< T> (surf, x, y, mode); 
# 472
} 
#endif
# 475 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 476
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 478
exit(___);}
#if 0
# 476
{ 
# 477
return (char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x); 
# 478
} 
#endif
# 481 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 482
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 484
exit(___);}
#if 0
# 482
{ 
# 483
return (signed char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x); 
# 484
} 
#endif
# 487 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 488
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 490
exit(___);}
#if 0
# 488
{ 
# 489
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x; 
# 490
} 
#endif
# 493 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 494
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 496
exit(___);}
#if 0
# 494
{ 
# 495
return make_char1((signed char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 496
} 
#endif
# 499 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 500
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 502
exit(___);}
#if 0
# 500
{ 
# 501
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap); 
# 502
} 
#endif
# 505 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 506
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 510
exit(___);}
#if 0
# 506
{ 
# 507
uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
# 509
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 510
} 
#endif
# 513 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 514
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 516
exit(___);}
#if 0
# 514
{ 
# 515
return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
# 516
} 
#endif
# 519 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 520
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 524
exit(___);}
#if 0
# 520
{ 
# 521
uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
# 523
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 524
} 
#endif
# 527 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 528
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 530
exit(___);}
#if 0
# 528
{ 
# 529
return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
# 530
} 
#endif
# 533 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 534
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 536
exit(___);}
#if 0
# 534
{ 
# 535
return (short)(__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x); 
# 536
} 
#endif
# 539 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 540
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 542
exit(___);}
#if 0
# 540
{ 
# 541
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x; 
# 542
} 
#endif
# 545 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 546
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 548
exit(___);}
#if 0
# 546
{ 
# 547
return make_short1((signed short)(__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 548
} 
#endif
# 551 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 552
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 554
exit(___);}
#if 0
# 552
{ 
# 553
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap); 
# 554
} 
#endif
# 557 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 558
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 562
exit(___);}
#if 0
# 558
{ 
# 559
ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
# 561
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 562
} 
#endif
# 565 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 566
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 568
exit(___);}
#if 0
# 566
{ 
# 567
return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
# 568
} 
#endif
# 571 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 572
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 576
exit(___);}
#if 0
# 572
{ 
# 573
ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
# 575
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 576
} 
#endif
# 579 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 580
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 582
exit(___);}
#if 0
# 580
{ 
# 581
return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
# 582
} 
#endif
# 585 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 586
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 588
exit(___);}
#if 0
# 586
{ 
# 587
return (int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x); 
# 588
} 
#endif
# 591 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 592
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 594
exit(___);}
#if 0
# 592
{ 
# 593
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x; 
# 594
} 
#endif
# 597 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 598
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 600
exit(___);}
#if 0
# 598
{ 
# 599
return make_int1((signed int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 600
} 
#endif
# 603 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 604
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 606
exit(___);}
#if 0
# 604
{ 
# 605
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap); 
# 606
} 
#endif
# 609 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 610
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 614
exit(___);}
#if 0
# 610
{ 
# 611
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 613
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 614
} 
#endif
# 617 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 618
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 620
exit(___);}
#if 0
# 618
{ 
# 619
return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 620
} 
#endif
# 623 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 624
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 628
exit(___);}
#if 0
# 624
{ 
# 625
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 627
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 628
} 
#endif
# 631 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 632
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 634
exit(___);}
#if 0
# 632
{ 
# 633
return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 634
} 
#endif
# 637 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 638
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 640
exit(___);}
#if 0
# 638
{ 
# 639
return (long long)(__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x); 
# 640
} 
#endif
# 643 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 644
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 646
exit(___);}
#if 0
# 644
{ 
# 645
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x; 
# 646
} 
#endif
# 649 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 650
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 652
exit(___);}
#if 0
# 650
{ 
# 651
return make_longlong1((long long)(__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 652
} 
#endif
# 655 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 656
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 658
exit(___);}
#if 0
# 656
{ 
# 657
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap); 
# 658
} 
#endif
# 661 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 662
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 666
exit(___);}
#if 0
# 662
{ 
# 663
ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
# 665
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 666
} 
#endif
# 669 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 670
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 672
exit(___);}
#if 0
# 670
{ 
# 671
return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
# 672
} 
#endif
# 735 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 736
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 738
exit(___);}
#if 0
# 736
{ 
# 737
return __int_as_float((int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 738
} 
#endif
# 741 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 742
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 744
exit(___);}
#if 0
# 742
{ 
# 743
return make_float1(__int_as_float((int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x))); 
# 744
} 
#endif
# 747 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 748
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 752
exit(___);}
#if 0
# 748
{ 
# 749
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 751
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 752
} 
#endif
# 755 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 756
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 760
exit(___);}
#if 0
# 756
{ 
# 757
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 759
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 760
} 
#endif
# 795 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 796
surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 797
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 804
exit(___);}
#if 0
# 797
{ 
# 798
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap))) : ((void)0))))); 
# 804
} 
#endif
# 806 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 807
surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 808
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 814
exit(___);}
#if 0
# 808
{ 
# 809
T tmp; 
# 811
surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode); 
# 813
return tmp; 
# 814
} 
#endif
# 816 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 817
surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 818
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 820
exit(___);}
#if 0
# 818
{ 
# 819
(*res) = surf3Dread< T> (surf, x, y, z, mode); 
# 820
} 
#endif
# 823 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 824
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 826
exit(___);}
#if 0
# 824
{ 
# 825
return (char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 826
} 
#endif
# 829 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 830
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 832
exit(___);}
#if 0
# 830
{ 
# 831
return (signed char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 832
} 
#endif
# 835 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 836
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 838
exit(___);}
#if 0
# 836
{ 
# 837
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 838
} 
#endif
# 841 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 842
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 844
exit(___);}
#if 0
# 842
{ 
# 843
return make_char1((signed char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 844
} 
#endif
# 847 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 848
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 850
exit(___);}
#if 0
# 848
{ 
# 849
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap); 
# 850
} 
#endif
# 853 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 854
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 858
exit(___);}
#if 0
# 854
{ 
# 855
uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
# 857
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 858
} 
#endif
# 861 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 862
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 864
exit(___);}
#if 0
# 862
{ 
# 863
return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
# 864
} 
#endif
# 867 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 868
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 872
exit(___);}
#if 0
# 868
{ 
# 869
uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
# 871
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 872
} 
#endif
# 875 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 876
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 878
exit(___);}
#if 0
# 876
{ 
# 877
return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
# 878
} 
#endif
# 881 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 882
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 884
exit(___);}
#if 0
# 882
{ 
# 883
return (short)(__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 884
} 
#endif
# 887 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 888
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 890
exit(___);}
#if 0
# 888
{ 
# 889
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 890
} 
#endif
# 893 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 894
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 896
exit(___);}
#if 0
# 894
{ 
# 895
return make_short1((signed short)(__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 896
} 
#endif
# 899 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 900
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 902
exit(___);}
#if 0
# 900
{ 
# 901
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap); 
# 902
} 
#endif
# 905 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 906
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 910
exit(___);}
#if 0
# 906
{ 
# 907
ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
# 909
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 910
} 
#endif
# 913 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 914
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 916
exit(___);}
#if 0
# 914
{ 
# 915
return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
# 916
} 
#endif
# 919 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 920
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 924
exit(___);}
#if 0
# 920
{ 
# 921
ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
# 923
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 924
} 
#endif
# 927 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 928
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 930
exit(___);}
#if 0
# 928
{ 
# 929
return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
# 930
} 
#endif
# 933 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 934
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 936
exit(___);}
#if 0
# 934
{ 
# 935
return (int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 936
} 
#endif
# 939 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 940
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 942
exit(___);}
#if 0
# 940
{ 
# 941
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 942
} 
#endif
# 945 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 946
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 948
exit(___);}
#if 0
# 946
{ 
# 947
return make_int1((signed int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 948
} 
#endif
# 951 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 952
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 954
exit(___);}
#if 0
# 952
{ 
# 953
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap); 
# 954
} 
#endif
# 957 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 958
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 962
exit(___);}
#if 0
# 958
{ 
# 959
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 961
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 962
} 
#endif
# 965 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 966
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 968
exit(___);}
#if 0
# 966
{ 
# 967
return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 968
} 
#endif
# 971 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 972
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 976
exit(___);}
#if 0
# 972
{ 
# 973
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 975
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 976
} 
#endif
# 979 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 980
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 982
exit(___);}
#if 0
# 980
{ 
# 981
return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 982
} 
#endif
# 985 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 986
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 988
exit(___);}
#if 0
# 986
{ 
# 987
return (long long)(__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 988
} 
#endif
# 991 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 992
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 994
exit(___);}
#if 0
# 992
{ 
# 993
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 994
} 
#endif
# 997 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 998
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1000
exit(___);}
#if 0
# 998
{ 
# 999
return make_longlong1((long long)(__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 1000
} 
#endif
# 1003 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1004
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1006
exit(___);}
#if 0
# 1004
{ 
# 1005
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap); 
# 1006
} 
#endif
# 1009 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1010
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1014
exit(___);}
#if 0
# 1010
{ 
# 1011
ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1013
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1014
} 
#endif
# 1017 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1018
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1020
exit(___);}
#if 0
# 1018
{ 
# 1019
return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1020
} 
#endif
# 1083 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1084
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1086
exit(___);}
#if 0
# 1084
{ 
# 1085
return __int_as_float((int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 1086
} 
#endif
# 1089 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1090
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1092
exit(___);}
#if 0
# 1090
{ 
# 1091
return make_float1(__int_as_float((int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x))); 
# 1092
} 
#endif
# 1095 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1096
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1100
exit(___);}
#if 0
# 1096
{ 
# 1097
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1099
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1100
} 
#endif
# 1103 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1104
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1108
exit(___);}
#if 0
# 1104
{ 
# 1105
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 1107
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1108
} 
#endif
# 1143 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 1144
surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1145
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 1152
exit(___);}
#if 0
# 1145
{ 
# 1146
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap))) : ((void)0))))); 
# 1152
} 
#endif
# 1154 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 1155
surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1156
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1162
exit(___);}
#if 0
# 1156
{ 
# 1157
T tmp; 
# 1159
surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode); 
# 1161
return tmp; 
# 1162
} 
#endif
# 1164 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 1165
surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1166
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 1168
exit(___);}
#if 0
# 1166
{ 
# 1167
(*res) = surf1DLayeredread< T> (surf, x, layer, mode); 
# 1168
} 
#endif
# 1171 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1172
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1174
exit(___);}
#if 0
# 1172
{ 
# 1173
return (char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1174
} 
#endif
# 1177 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1178
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1180
exit(___);}
#if 0
# 1178
{ 
# 1179
return (signed char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1180
} 
#endif
# 1183 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1184
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1186
exit(___);}
#if 0
# 1184
{ 
# 1185
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1186
} 
#endif
# 1189 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1190
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1192
exit(___);}
#if 0
# 1190
{ 
# 1191
return make_char1((signed char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1192
} 
#endif
# 1195 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1196
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1198
exit(___);}
#if 0
# 1196
{ 
# 1197
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap); 
# 1198
} 
#endif
# 1201 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1202
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1206
exit(___);}
#if 0
# 1202
{ 
# 1203
uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
# 1205
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1206
} 
#endif
# 1209 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1210
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1212
exit(___);}
#if 0
# 1210
{ 
# 1211
return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
# 1212
} 
#endif
# 1215 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1216
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1220
exit(___);}
#if 0
# 1216
{ 
# 1217
uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
# 1219
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1220
} 
#endif
# 1223 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1224
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1226
exit(___);}
#if 0
# 1224
{ 
# 1225
return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
# 1226
} 
#endif
# 1229 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1230
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1232
exit(___);}
#if 0
# 1230
{ 
# 1231
return (short)(__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1232
} 
#endif
# 1235 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1236
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1238
exit(___);}
#if 0
# 1236
{ 
# 1237
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1238
} 
#endif
# 1241 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1242
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1244
exit(___);}
#if 0
# 1242
{ 
# 1243
return make_short1((signed short)(__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1244
} 
#endif
# 1247 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1248
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1250
exit(___);}
#if 0
# 1248
{ 
# 1249
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap); 
# 1250
} 
#endif
# 1253 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1254
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1258
exit(___);}
#if 0
# 1254
{ 
# 1255
ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
# 1257
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1258
} 
#endif
# 1261 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1262
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1264
exit(___);}
#if 0
# 1262
{ 
# 1263
return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
# 1264
} 
#endif
# 1267 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1268
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1272
exit(___);}
#if 0
# 1268
{ 
# 1269
ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
# 1271
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1272
} 
#endif
# 1275 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1276
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1278
exit(___);}
#if 0
# 1276
{ 
# 1277
return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
# 1278
} 
#endif
# 1281 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1282
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1284
exit(___);}
#if 0
# 1282
{ 
# 1283
return (int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1284
} 
#endif
# 1287 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1288
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1290
exit(___);}
#if 0
# 1288
{ 
# 1289
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1290
} 
#endif
# 1293 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1294
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1296
exit(___);}
#if 0
# 1294
{ 
# 1295
return make_int1((signed int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1296
} 
#endif
# 1299 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1300
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1302
exit(___);}
#if 0
# 1300
{ 
# 1301
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap); 
# 1302
} 
#endif
# 1305 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1306
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1310
exit(___);}
#if 0
# 1306
{ 
# 1307
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1309
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 1310
} 
#endif
# 1313 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1314
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1316
exit(___);}
#if 0
# 1314
{ 
# 1315
return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1316
} 
#endif
# 1319 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1320
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1324
exit(___);}
#if 0
# 1320
{ 
# 1321
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1323
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 1324
} 
#endif
# 1327 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1328
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1330
exit(___);}
#if 0
# 1328
{ 
# 1329
return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1330
} 
#endif
# 1333 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1334
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1336
exit(___);}
#if 0
# 1334
{ 
# 1335
return (long long)(__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1336
} 
#endif
# 1339 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1340
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1342
exit(___);}
#if 0
# 1340
{ 
# 1341
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1342
} 
#endif
# 1345 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1346
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1348
exit(___);}
#if 0
# 1346
{ 
# 1347
return make_longlong1((long long)(__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1348
} 
#endif
# 1351 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1352
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1354
exit(___);}
#if 0
# 1352
{ 
# 1353
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap); 
# 1354
} 
#endif
# 1357 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1358
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1362
exit(___);}
#if 0
# 1358
{ 
# 1359
ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
# 1361
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1362
} 
#endif
# 1365 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1366
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1368
exit(___);}
#if 0
# 1366
{ 
# 1367
return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
# 1368
} 
#endif
# 1431 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1432
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1434
exit(___);}
#if 0
# 1432
{ 
# 1433
return __int_as_float((int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1434
} 
#endif
# 1437 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1438
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1440
exit(___);}
#if 0
# 1438
{ 
# 1439
return make_float1(__int_as_float((int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x))); 
# 1440
} 
#endif
# 1443 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1444
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1448
exit(___);}
#if 0
# 1444
{ 
# 1445
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1447
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1448
} 
#endif
# 1451 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1452
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1456
exit(___);}
#if 0
# 1452
{ 
# 1453
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1455
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1456
} 
#endif
# 1491 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 1492
surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1493
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 1500
exit(___);}
#if 0
# 1493
{ 
# 1494
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap))) : ((void)0))))); 
# 1500
} 
#endif
# 1502 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 1503
surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1504
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1510
exit(___);}
#if 0
# 1504
{ 
# 1505
T tmp; 
# 1507
surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode); 
# 1509
return tmp; 
# 1510
} 
#endif
# 1512 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 1513
surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1514
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1516
exit(___);}
#if 0
# 1514
{ 
# 1515
(*res) = surf2DLayeredread< T> (surf, x, y, layer, mode); 
# 1516
} 
#endif
# 1519 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1520
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1522
exit(___);}
#if 0
# 1520
{ 
# 1521
return (char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1522
} 
#endif
# 1525 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1526
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1528
exit(___);}
#if 0
# 1526
{ 
# 1527
return (signed char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1528
} 
#endif
# 1531 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1532
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1534
exit(___);}
#if 0
# 1532
{ 
# 1533
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1534
} 
#endif
# 1537 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1538
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1540
exit(___);}
#if 0
# 1538
{ 
# 1539
return make_char1((signed char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1540
} 
#endif
# 1543 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1544
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1546
exit(___);}
#if 0
# 1544
{ 
# 1545
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1546
} 
#endif
# 1549 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1550
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1554
exit(___);}
#if 0
# 1550
{ 
# 1551
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1553
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1554
} 
#endif
# 1557 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1558
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1560
exit(___);}
#if 0
# 1558
{ 
# 1559
return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1560
} 
#endif
# 1563 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1564
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1568
exit(___);}
#if 0
# 1564
{ 
# 1565
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1567
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1568
} 
#endif
# 1571 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1572
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1574
exit(___);}
#if 0
# 1572
{ 
# 1573
return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1574
} 
#endif
# 1577 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1578
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1580
exit(___);}
#if 0
# 1578
{ 
# 1579
return (short)(__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1580
} 
#endif
# 1583 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1584
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1586
exit(___);}
#if 0
# 1584
{ 
# 1585
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1586
} 
#endif
# 1589 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1590
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1592
exit(___);}
#if 0
# 1590
{ 
# 1591
return make_short1((signed short)(__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1592
} 
#endif
# 1595 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1596
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1598
exit(___);}
#if 0
# 1596
{ 
# 1597
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1598
} 
#endif
# 1601 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1602
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1606
exit(___);}
#if 0
# 1602
{ 
# 1603
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1605
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1606
} 
#endif
# 1609 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1610
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1612
exit(___);}
#if 0
# 1610
{ 
# 1611
return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1612
} 
#endif
# 1615 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1616
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1620
exit(___);}
#if 0
# 1616
{ 
# 1617
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1619
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1620
} 
#endif
# 1623 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1624
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1626
exit(___);}
#if 0
# 1624
{ 
# 1625
return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1626
} 
#endif
# 1629 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1630
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1632
exit(___);}
#if 0
# 1630
{ 
# 1631
return (int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1632
} 
#endif
# 1635 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1636
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1638
exit(___);}
#if 0
# 1636
{ 
# 1637
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1638
} 
#endif
# 1641 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1642
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1644
exit(___);}
#if 0
# 1642
{ 
# 1643
return make_int1((signed int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1644
} 
#endif
# 1647 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1648
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1650
exit(___);}
#if 0
# 1648
{ 
# 1649
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1650
} 
#endif
# 1653 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1654
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1658
exit(___);}
#if 0
# 1654
{ 
# 1655
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1657
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 1658
} 
#endif
# 1661 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1662
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1664
exit(___);}
#if 0
# 1662
{ 
# 1663
return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1664
} 
#endif
# 1667 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1668
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1672
exit(___);}
#if 0
# 1668
{ 
# 1669
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1671
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 1672
} 
#endif
# 1675 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1676
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1678
exit(___);}
#if 0
# 1676
{ 
# 1677
return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1678
} 
#endif
# 1681 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1682
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1684
exit(___);}
#if 0
# 1682
{ 
# 1683
return (long long)(__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1684
} 
#endif
# 1687 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1688
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1690
exit(___);}
#if 0
# 1688
{ 
# 1689
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1690
} 
#endif
# 1693 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1694
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1696
exit(___);}
#if 0
# 1694
{ 
# 1695
return make_longlong1((long long)(__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1696
} 
#endif
# 1699 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1700
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1702
exit(___);}
#if 0
# 1700
{ 
# 1701
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1702
} 
#endif
# 1705 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1706
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1710
exit(___);}
#if 0
# 1706
{ 
# 1707
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1709
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1710
} 
#endif
# 1713 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1714
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1716
exit(___);}
#if 0
# 1714
{ 
# 1715
return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1716
} 
#endif
# 1779 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1780
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1782
exit(___);}
#if 0
# 1780
{ 
# 1781
return __int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1782
} 
#endif
# 1785 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1786
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1788
exit(___);}
#if 0
# 1786
{ 
# 1787
return make_float1(__int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x))); 
# 1788
} 
#endif
# 1791 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1792
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1796
exit(___);}
#if 0
# 1792
{ 
# 1793
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1795
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1796
} 
#endif
# 1799 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1800
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1804
exit(___);}
#if 0
# 1800
{ 
# 1801
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1803
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1804
} 
#endif
# 1839 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 1840
surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1841
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 1848
exit(___);}
#if 0
# 1841
{ 
# 1842
(s == 1) ? ((void)((*((uchar1 *)res)) = __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap))) : ((void)0))))); 
# 1848
} 
#endif
# 1850 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 1851
surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1852
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1858
exit(___);}
#if 0
# 1852
{ 
# 1853
T tmp; 
# 1855
surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode); 
# 1857
return tmp; 
# 1858
} 
#endif
# 1860 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 1861
surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1862
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1864
exit(___);}
#if 0
# 1862
{ 
# 1863
(*res) = surfCubemapread< T> (surf, x, y, face, mode); 
# 1864
} 
#endif
# 1867 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1868
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1870
exit(___);}
#if 0
# 1868
{ 
# 1869
return (char)(__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1870
} 
#endif
# 1873 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1874
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1876
exit(___);}
#if 0
# 1874
{ 
# 1875
return (signed char)(__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1876
} 
#endif
# 1879 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1880
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1882
exit(___);}
#if 0
# 1880
{ 
# 1881
return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1882
} 
#endif
# 1885 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1886
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1888
exit(___);}
#if 0
# 1886
{ 
# 1887
return make_char1((signed char)(__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1888
} 
#endif
# 1891 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1892
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1894
exit(___);}
#if 0
# 1892
{ 
# 1893
return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1894
} 
#endif
# 1897 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1898
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1902
exit(___);}
#if 0
# 1898
{ 
# 1899
uchar2 tmp = __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1901
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1902
} 
#endif
# 1905 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1906
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1908
exit(___);}
#if 0
# 1906
{ 
# 1907
return __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1908
} 
#endif
# 1911 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1912
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1916
exit(___);}
#if 0
# 1912
{ 
# 1913
uchar4 tmp = __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1915
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1916
} 
#endif
# 1919 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1920
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1922
exit(___);}
#if 0
# 1920
{ 
# 1921
return __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1922
} 
#endif
# 1925 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1926
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1928
exit(___);}
#if 0
# 1926
{ 
# 1927
return (short)(__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1928
} 
#endif
# 1931 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1932
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1934
exit(___);}
#if 0
# 1932
{ 
# 1933
return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1934
} 
#endif
# 1937 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1938
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1940
exit(___);}
#if 0
# 1938
{ 
# 1939
return make_short1((signed short)(__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1940
} 
#endif
# 1943 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1944
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1946
exit(___);}
#if 0
# 1944
{ 
# 1945
return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1946
} 
#endif
# 1949 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1950
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1954
exit(___);}
#if 0
# 1950
{ 
# 1951
ushort2 tmp = __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1953
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1954
} 
#endif
# 1957 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1958
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1960
exit(___);}
#if 0
# 1958
{ 
# 1959
return __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1960
} 
#endif
# 1963 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1964
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1968
exit(___);}
#if 0
# 1964
{ 
# 1965
ushort4 tmp = __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1967
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1968
} 
#endif
# 1971 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1972
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1974
exit(___);}
#if 0
# 1972
{ 
# 1973
return __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1974
} 
#endif
# 1977 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1978
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1980
exit(___);}
#if 0
# 1978
{ 
# 1979
return (int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1980
} 
#endif
# 1983 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1984
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1986
exit(___);}
#if 0
# 1984
{ 
# 1985
return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1986
} 
#endif
# 1989 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1990
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1992
exit(___);}
#if 0
# 1990
{ 
# 1991
return make_int1((signed int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1992
} 
#endif
# 1995 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1996
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1998
exit(___);}
#if 0
# 1996
{ 
# 1997
return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1998
} 
#endif
# 2001 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2002
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2006
exit(___);}
#if 0
# 2002
{ 
# 2003
uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2005
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 2006
} 
#endif
# 2009 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2010
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2012
exit(___);}
#if 0
# 2010
{ 
# 2011
return __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2012
} 
#endif
# 2015 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2016
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2020
exit(___);}
#if 0
# 2016
{ 
# 2017
uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2019
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 2020
} 
#endif
# 2023 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2024
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2026
exit(___);}
#if 0
# 2024
{ 
# 2025
return __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2026
} 
#endif
# 2029 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2030
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2032
exit(___);}
#if 0
# 2030
{ 
# 2031
return (long long)(__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 2032
} 
#endif
# 2035 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2036
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2038
exit(___);}
#if 0
# 2036
{ 
# 2037
return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 2038
} 
#endif
# 2041 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2042
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2044
exit(___);}
#if 0
# 2042
{ 
# 2043
return make_longlong1((long long)(__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 2044
} 
#endif
# 2047 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2048
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2050
exit(___);}
#if 0
# 2048
{ 
# 2049
return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap); 
# 2050
} 
#endif
# 2053 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2054
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2058
exit(___);}
#if 0
# 2054
{ 
# 2055
ulonglong2 tmp = __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2057
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 2058
} 
#endif
# 2061 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2062
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2064
exit(___);}
#if 0
# 2062
{ 
# 2063
return __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2064
} 
#endif
# 2127 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2128
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2130
exit(___);}
#if 0
# 2128
{ 
# 2129
return __int_as_float((int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 2130
} 
#endif
# 2133 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2134
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2136
exit(___);}
#if 0
# 2134
{ 
# 2135
return make_float1(__int_as_float((int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x))); 
# 2136
} 
#endif
# 2139 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2140
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2144
exit(___);}
#if 0
# 2140
{ 
# 2141
uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2143
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 2144
} 
#endif
# 2147 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2148
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2152
exit(___);}
#if 0
# 2148
{ 
# 2149
uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2151
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 2152
} 
#endif
# 2188 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 2189
surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2190
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 2197
exit(___);}
#if 0
# 2190
{ 
# 2191
(s == 1) ? ((void)((*((uchar1 *)res)) = __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((void)0))))); 
# 2197
} 
#endif
# 2199 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T 
# 2200
surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2201
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2207
exit(___);}
#if 0
# 2201
{ 
# 2202
T tmp; 
# 2204
surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode); 
# 2206
return tmp; 
# 2207
} 
#endif
# 2209 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 2210
surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2211
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2213
exit(___);}
#if 0
# 2211
{ 
# 2212
(*res) = surfCubemapLayeredread< T> (surf, x, y, layerFace, mode); 
# 2213
} 
#endif
# 2216 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2217
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2219
exit(___);}
#if 0
# 2217
{ 
# 2218
return (char)(__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2219
} 
#endif
# 2222 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline signed char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2223
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2225
exit(___);}
#if 0
# 2223
{ 
# 2224
return (signed char)(__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2225
} 
#endif
# 2228 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2229
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2231
exit(___);}
#if 0
# 2229
{ 
# 2230
return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2231
} 
#endif
# 2234 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2235
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2237
exit(___);}
#if 0
# 2235
{ 
# 2236
return make_char1((signed char)(__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2237
} 
#endif
# 2240 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2241
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2243
exit(___);}
#if 0
# 2241
{ 
# 2242
return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2243
} 
#endif
# 2246 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2247
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2251
exit(___);}
#if 0
# 2247
{ 
# 2248
uchar2 tmp = __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2250
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 2251
} 
#endif
# 2254 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2255
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2257
exit(___);}
#if 0
# 2255
{ 
# 2256
return __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2257
} 
#endif
# 2260 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline char4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2261
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2265
exit(___);}
#if 0
# 2261
{ 
# 2262
uchar4 tmp = __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2264
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 2265
} 
#endif
# 2268 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uchar4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2269
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2271
exit(___);}
#if 0
# 2269
{ 
# 2270
return __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2271
} 
#endif
# 2274 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2275
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2277
exit(___);}
#if 0
# 2275
{ 
# 2276
return (short)(__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2277
} 
#endif
# 2280 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2281
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2283
exit(___);}
#if 0
# 2281
{ 
# 2282
return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2283
} 
#endif
# 2286 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2287
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2289
exit(___);}
#if 0
# 2287
{ 
# 2288
return make_short1((signed short)(__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2289
} 
#endif
# 2292 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2293
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2295
exit(___);}
#if 0
# 2293
{ 
# 2294
return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2295
} 
#endif
# 2298 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2299
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2303
exit(___);}
#if 0
# 2299
{ 
# 2300
ushort2 tmp = __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2302
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 2303
} 
#endif
# 2306 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2307
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2309
exit(___);}
#if 0
# 2307
{ 
# 2308
return __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2309
} 
#endif
# 2312 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline short4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2313
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2317
exit(___);}
#if 0
# 2313
{ 
# 2314
ushort4 tmp = __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2316
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 2317
} 
#endif
# 2320 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ushort4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2321
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2323
exit(___);}
#if 0
# 2321
{ 
# 2322
return __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2323
} 
#endif
# 2326 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2327
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2329
exit(___);}
#if 0
# 2327
{ 
# 2328
return (int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2329
} 
#endif
# 2332 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2333
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2335
exit(___);}
#if 0
# 2333
{ 
# 2334
return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2335
} 
#endif
# 2338 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2339
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2341
exit(___);}
#if 0
# 2339
{ 
# 2340
return make_int1((signed int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2341
} 
#endif
# 2344 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2345
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2347
exit(___);}
#if 0
# 2345
{ 
# 2346
return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2347
} 
#endif
# 2350 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2351
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2355
exit(___);}
#if 0
# 2351
{ 
# 2352
uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2354
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 2355
} 
#endif
# 2358 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2359
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2361
exit(___);}
#if 0
# 2359
{ 
# 2360
return __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2361
} 
#endif
# 2364 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline int4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2365
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2369
exit(___);}
#if 0
# 2365
{ 
# 2366
uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2368
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 2369
} 
#endif
# 2372 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline uint4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2373
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2375
exit(___);}
#if 0
# 2373
{ 
# 2374
return __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2375
} 
#endif
# 2378 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline long long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2379
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2381
exit(___);}
#if 0
# 2379
{ 
# 2380
return (long long)(__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2381
} 
#endif
# 2384 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline unsigned long long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2385
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2387
exit(___);}
#if 0
# 2385
{ 
# 2386
return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2387
} 
#endif
# 2390 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2391
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2393
exit(___);}
#if 0
# 2391
{ 
# 2392
return make_longlong1((long long)(__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2393
} 
#endif
# 2396 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2397
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2399
exit(___);}
#if 0
# 2397
{ 
# 2398
return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2399
} 
#endif
# 2402 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline longlong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2403
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2407
exit(___);}
#if 0
# 2403
{ 
# 2404
ulonglong2 tmp = __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2406
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 2407
} 
#endif
# 2410 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline ulonglong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2411
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2413
exit(___);}
#if 0
# 2411
{ 
# 2412
return __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2413
} 
#endif
# 2476 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2477
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2479
exit(___);}
#if 0
# 2477
{ 
# 2478
return __int_as_float((int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2479
} 
#endif
# 2482 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2483
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2485
exit(___);}
#if 0
# 2483
{ 
# 2484
return make_float1(__int_as_float((int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x))); 
# 2485
} 
#endif
# 2488 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2489
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2493
exit(___);}
#if 0
# 2489
{ 
# 2490
uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2492
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 2493
} 
#endif
# 2496 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template<> __attribute__((unused)) __specialization_static inline float4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2497
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2501
exit(___);}
#if 0
# 2497
{ 
# 2498
uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2500
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 2501
} 
#endif
# 2537 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 2538
surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2539
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 2557
exit(___);}
#if 0
# 2539
{ 
# 2540
union { 
# 2541
T val; 
# 2542
uchar1 c1; 
# 2543
ushort1 s1; 
# 2544
uint1 u1; 
# 2545
uint2 u2; 
# 2546
uint4 u4; 
# 2547
} tmp; 
# 2549
(tmp.val) = val; 
# 2551
(s == 1) ? ((void)__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap)) : ((void)0))))); 
# 2557
} 
#endif
# 2559 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 2560
surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2561
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2563
exit(___);}
#if 0
# 2561
{ ; 
# 2562
surf1Dwrite(val, surf, x, (int)sizeof(T), mode); 
# 2563
} 
#endif
# 2566 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2567
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2569
exit(___);}
#if 0
# 2567
{ 
# 2568
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
# 2569
} 
#endif
# 2571 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(signed char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2572
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2574
exit(___);}
#if 0
# 2572
{ 
# 2573
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
# 2574
} 
#endif
# 2576 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2577
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2579
exit(___);}
#if 0
# 2577
{ 
# 2578
__surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap); 
# 2579
} 
#endif
# 2581 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2582
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2584
exit(___);}
#if 0
# 2582
{ 
# 2583
__surf1Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2584
} 
#endif
# 2586 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2587
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2589
exit(___);}
#if 0
# 2587
{ 
# 2588
__surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap); 
# 2589
} 
#endif
# 2591 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2592
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2594
exit(___);}
#if 0
# 2592
{ 
# 2593
__surf1Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2594
} 
#endif
# 2596 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2597
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2599
exit(___);}
#if 0
# 2597
{ 
# 2598
__surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap); 
# 2599
} 
#endif
# 2601 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2602
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2604
exit(___);}
#if 0
# 2602
{ 
# 2603
__surf1Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2604
} 
#endif
# 2606 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2607
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2609
exit(___);}
#if 0
# 2607
{ 
# 2608
__surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap); 
# 2609
} 
#endif
# 2611 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2612
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2614
exit(___);}
#if 0
# 2612
{ 
# 2613
__surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap); 
# 2614
} 
#endif
# 2616 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2617
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2619
exit(___);}
#if 0
# 2617
{ 
# 2618
__surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap); 
# 2619
} 
#endif
# 2621 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2622
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2624
exit(___);}
#if 0
# 2622
{ 
# 2623
__surf1Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2624
} 
#endif
# 2626 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2627
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2629
exit(___);}
#if 0
# 2627
{ 
# 2628
__surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap); 
# 2629
} 
#endif
# 2631 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2632
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2634
exit(___);}
#if 0
# 2632
{ 
# 2633
__surf1Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2634
} 
#endif
# 2636 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2637
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2639
exit(___);}
#if 0
# 2637
{ 
# 2638
__surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap); 
# 2639
} 
#endif
# 2641 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2642
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2644
exit(___);}
#if 0
# 2642
{ 
# 2643
__surf1Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2644
} 
#endif
# 2646 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2647
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2649
exit(___);}
#if 0
# 2647
{ 
# 2648
__surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap); 
# 2649
} 
#endif
# 2651 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2652
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2654
exit(___);}
#if 0
# 2652
{ 
# 2653
__surf1Dwriteu1(make_uint1((unsigned)val), surf, x, cudaBoundaryModeTrap); 
# 2654
} 
#endif
# 2656 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2657
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2659
exit(___);}
#if 0
# 2657
{ 
# 2658
__surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap); 
# 2659
} 
#endif
# 2661 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2662
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2664
exit(___);}
#if 0
# 2662
{ 
# 2663
__surf1Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2664
} 
#endif
# 2666 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2667
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2669
exit(___);}
#if 0
# 2667
{ 
# 2668
__surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap); 
# 2669
} 
#endif
# 2671 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2672
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2674
exit(___);}
#if 0
# 2672
{ 
# 2673
__surf1Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2674
} 
#endif
# 2676 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2677
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2679
exit(___);}
#if 0
# 2677
{ 
# 2678
__surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap); 
# 2679
} 
#endif
# 2681 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2682
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2684
exit(___);}
#if 0
# 2682
{ 
# 2683
__surf1Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2684
} 
#endif
# 2686 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2687
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2689
exit(___);}
#if 0
# 2687
{ 
# 2688
__surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap); 
# 2689
} 
#endif
# 2691 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2692
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2694
exit(___);}
#if 0
# 2692
{ 
# 2693
__surf1Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, cudaBoundaryModeTrap); 
# 2694
} 
#endif
# 2696 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2697
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2699
exit(___);}
#if 0
# 2697
{ 
# 2698
__surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap); 
# 2699
} 
#endif
# 2701 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(longlong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2702
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2704
exit(___);}
#if 0
# 2702
{ 
# 2703
__surf1Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2704
} 
#endif
# 2706 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulonglong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2707
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2709
exit(___);}
#if 0
# 2707
{ 
# 2708
__surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap); 
# 2709
} 
#endif
# 2711 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(longlong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2712
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2714
exit(___);}
#if 0
# 2712
{ 
# 2713
__surf1Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2714
} 
#endif
# 2716 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulonglong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2717
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2719
exit(___);}
#if 0
# 2717
{ 
# 2718
__surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap); 
# 2719
} 
#endif
# 2765 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2766
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2768
exit(___);}
#if 0
# 2766
{ 
# 2767
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, cudaBoundaryModeTrap); 
# 2768
} 
#endif
# 2770 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2771
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2773
exit(___);}
#if 0
# 2771
{ 
# 2772
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2773
} 
#endif
# 2775 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2776
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2778
exit(___);}
#if 0
# 2776
{ 
# 2777
__surf1Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, cudaBoundaryModeTrap); 
# 2778
} 
#endif
# 2780 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2781
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2783
exit(___);}
#if 0
# 2781
{ 
# 2782
__surf1Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2783
} 
#endif
# 2819 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 2820
surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2821
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 2839
exit(___);}
#if 0
# 2821
{ 
# 2822
union { 
# 2823
T val; 
# 2824
uchar1 c1; 
# 2825
ushort1 s1; 
# 2826
uint1 u1; 
# 2827
uint2 u2; 
# 2828
uint4 u4; 
# 2829
} tmp; 
# 2831
(tmp.val) = val; 
# 2833
(s == 1) ? ((void)__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap)) : ((void)0))))); 
# 2839
} 
#endif
# 2841 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 2842
surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2843
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2845
exit(___);}
#if 0
# 2843
{ ; 
# 2844
surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode); 
# 2845
} 
#endif
# 2848 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2849
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2851
exit(___);}
#if 0
# 2849
{ 
# 2850
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
# 2851
} 
#endif
# 2853 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(signed char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2854
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2856
exit(___);}
#if 0
# 2854
{ 
# 2855
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
# 2856
} 
#endif
# 2858 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2859
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2861
exit(___);}
#if 0
# 2859
{ 
# 2860
__surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2861
} 
#endif
# 2863 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2864
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2866
exit(___);}
#if 0
# 2864
{ 
# 2865
__surf2Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2866
} 
#endif
# 2868 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2869
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2871
exit(___);}
#if 0
# 2869
{ 
# 2870
__surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2871
} 
#endif
# 2873 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2874
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2876
exit(___);}
#if 0
# 2874
{ 
# 2875
__surf2Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2876
} 
#endif
# 2878 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2879
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2881
exit(___);}
#if 0
# 2879
{ 
# 2880
__surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap); 
# 2881
} 
#endif
# 2883 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2884
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2886
exit(___);}
#if 0
# 2884
{ 
# 2885
__surf2Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 2886
} 
#endif
# 2888 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2889
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2891
exit(___);}
#if 0
# 2889
{ 
# 2890
__surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap); 
# 2891
} 
#endif
# 2893 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2894
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2896
exit(___);}
#if 0
# 2894
{ 
# 2895
__surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap); 
# 2896
} 
#endif
# 2898 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2899
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2901
exit(___);}
#if 0
# 2899
{ 
# 2900
__surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2901
} 
#endif
# 2903 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2904
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2906
exit(___);}
#if 0
# 2904
{ 
# 2905
__surf2Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2906
} 
#endif
# 2908 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2909
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2911
exit(___);}
#if 0
# 2909
{ 
# 2910
__surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2911
} 
#endif
# 2913 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2914
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2916
exit(___);}
#if 0
# 2914
{ 
# 2915
__surf2Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2916
} 
#endif
# 2918 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2919
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2921
exit(___);}
#if 0
# 2919
{ 
# 2920
__surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap); 
# 2921
} 
#endif
# 2923 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2924
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2926
exit(___);}
#if 0
# 2924
{ 
# 2925
__surf2Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 2926
} 
#endif
# 2928 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2929
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2931
exit(___);}
#if 0
# 2929
{ 
# 2930
__surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap); 
# 2931
} 
#endif
# 2933 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2934
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2936
exit(___);}
#if 0
# 2934
{ 
# 2935
__surf2Dwriteu1(make_uint1((unsigned)val), surf, x, y, cudaBoundaryModeTrap); 
# 2936
} 
#endif
# 2938 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2939
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2941
exit(___);}
#if 0
# 2939
{ 
# 2940
__surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2941
} 
#endif
# 2943 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2944
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2946
exit(___);}
#if 0
# 2944
{ 
# 2945
__surf2Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2946
} 
#endif
# 2948 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2949
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2951
exit(___);}
#if 0
# 2949
{ 
# 2950
__surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2951
} 
#endif
# 2953 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2954
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2956
exit(___);}
#if 0
# 2954
{ 
# 2955
__surf2Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2956
} 
#endif
# 2958 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2959
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2961
exit(___);}
#if 0
# 2959
{ 
# 2960
__surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap); 
# 2961
} 
#endif
# 2963 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2964
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2966
exit(___);}
#if 0
# 2964
{ 
# 2965
__surf2Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 2966
} 
#endif
# 2968 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2969
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2971
exit(___);}
#if 0
# 2969
{ 
# 2970
__surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap); 
# 2971
} 
#endif
# 2973 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2974
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2976
exit(___);}
#if 0
# 2974
{ 
# 2975
__surf2Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, cudaBoundaryModeTrap); 
# 2976
} 
#endif
# 2978 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2979
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2981
exit(___);}
#if 0
# 2979
{ 
# 2980
__surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2981
} 
#endif
# 2983 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(longlong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2984
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2986
exit(___);}
#if 0
# 2984
{ 
# 2985
__surf2Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2986
} 
#endif
# 2988 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulonglong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2989
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2991
exit(___);}
#if 0
# 2989
{ 
# 2990
__surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2991
} 
#endif
# 2993 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(longlong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2994
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2996
exit(___);}
#if 0
# 2994
{ 
# 2995
__surf2Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2996
} 
#endif
# 2998 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulonglong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2999
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3001
exit(___);}
#if 0
# 2999
{ 
# 3000
__surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap); 
# 3001
} 
#endif
# 3047 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3048
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3050
exit(___);}
#if 0
# 3048
{ 
# 3049
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap); 
# 3050
} 
#endif
# 3052 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3053
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3055
exit(___);}
#if 0
# 3053
{ 
# 3054
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 3055
} 
#endif
# 3057 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3058
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3060
exit(___);}
#if 0
# 3058
{ 
# 3059
__surf2Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, cudaBoundaryModeTrap); 
# 3060
} 
#endif
# 3062 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3063
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3065
exit(___);}
#if 0
# 3063
{ 
# 3064
__surf2Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 3065
} 
#endif
# 3101 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3102
surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3103
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 3121
exit(___);}
#if 0
# 3103
{ 
# 3104
union { 
# 3105
T val; 
# 3106
uchar1 c1; 
# 3107
ushort1 s1; 
# 3108
uint1 u1; 
# 3109
uint2 u2; 
# 3110
uint4 u4; 
# 3111
} tmp; 
# 3113
(tmp.val) = val; 
# 3115
(s == 1) ? ((void)__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3121
} 
#endif
# 3123 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3124
surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3125
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3127
exit(___);}
#if 0
# 3125
{ ; 
# 3126
surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode); 
# 3127
} 
#endif
# 3130 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3131
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3133
exit(___);}
#if 0
# 3131
{ 
# 3132
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3133
} 
#endif
# 3135 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(signed char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3136
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3138
exit(___);}
#if 0
# 3136
{ 
# 3137
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3138
} 
#endif
# 3140 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(unsigned char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3141
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3143
exit(___);}
#if 0
# 3141
{ 
# 3142
__surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3143
} 
#endif
# 3145 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(char1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3146
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3148
exit(___);}
#if 0
# 3146
{ 
# 3147
__surf3Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3148
} 
#endif
# 3150 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(uchar1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3151
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3153
exit(___);}
#if 0
# 3151
{ 
# 3152
__surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3153
} 
#endif
# 3155 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(char2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3156
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3158
exit(___);}
#if 0
# 3156
{ 
# 3157
__surf3Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3158
} 
#endif
# 3160 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(uchar2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3161
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3163
exit(___);}
#if 0
# 3161
{ 
# 3162
__surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3163
} 
#endif
# 3165 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(char4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3166
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3168
exit(___);}
#if 0
# 3166
{ 
# 3167
__surf3Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3168
} 
#endif
# 3170 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(uchar4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3171
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3173
exit(___);}
#if 0
# 3171
{ 
# 3172
__surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3173
} 
#endif
# 3175 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3176
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3178
exit(___);}
#if 0
# 3176
{ 
# 3177
__surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3178
} 
#endif
# 3180 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(unsigned short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3181
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3183
exit(___);}
#if 0
# 3181
{ 
# 3182
__surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3183
} 
#endif
# 3185 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(short1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3186
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3188
exit(___);}
#if 0
# 3186
{ 
# 3187
__surf3Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3188
} 
#endif
# 3190 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(ushort1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3191
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3193
exit(___);}
#if 0
# 3191
{ 
# 3192
__surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3193
} 
#endif
# 3195 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(short2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3196
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3198
exit(___);}
#if 0
# 3196
{ 
# 3197
__surf3Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3198
} 
#endif
# 3200 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(ushort2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3201
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3203
exit(___);}
#if 0
# 3201
{ 
# 3202
__surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3203
} 
#endif
# 3205 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(short4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3206
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3208
exit(___);}
#if 0
# 3206
{ 
# 3207
__surf3Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3208
} 
#endif
# 3210 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(ushort4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3211
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3213
exit(___);}
#if 0
# 3211
{ 
# 3212
__surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3213
} 
#endif
# 3215 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(int val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3216
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3218
exit(___);}
#if 0
# 3216
{ 
# 3217
__surf3Dwriteu1(make_uint1((unsigned)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3218
} 
#endif
# 3220 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(unsigned val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3221
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3223
exit(___);}
#if 0
# 3221
{ 
# 3222
__surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3223
} 
#endif
# 3225 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(int1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3226
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3228
exit(___);}
#if 0
# 3226
{ 
# 3227
__surf3Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3228
} 
#endif
# 3230 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(uint1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3231
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3233
exit(___);}
#if 0
# 3231
{ 
# 3232
__surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3233
} 
#endif
# 3235 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(int2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3236
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3238
exit(___);}
#if 0
# 3236
{ 
# 3237
__surf3Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3238
} 
#endif
# 3240 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(uint2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3241
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3243
exit(___);}
#if 0
# 3241
{ 
# 3242
__surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3243
} 
#endif
# 3245 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(int4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3246
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3248
exit(___);}
#if 0
# 3246
{ 
# 3247
__surf3Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3248
} 
#endif
# 3250 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(uint4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3251
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3253
exit(___);}
#if 0
# 3251
{ 
# 3252
__surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3253
} 
#endif
# 3255 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3256
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3258
exit(___);}
#if 0
# 3256
{ 
# 3257
__surf3Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3258
} 
#endif
# 3260 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(unsigned long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3261
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3263
exit(___);}
#if 0
# 3261
{ 
# 3262
__surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3263
} 
#endif
# 3265 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(longlong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3266
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3268
exit(___);}
#if 0
# 3266
{ 
# 3267
__surf3Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3268
} 
#endif
# 3270 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(ulonglong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3271
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3273
exit(___);}
#if 0
# 3271
{ 
# 3272
__surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3273
} 
#endif
# 3275 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(longlong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3276
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3278
exit(___);}
#if 0
# 3276
{ 
# 3277
__surf3Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3278
} 
#endif
# 3280 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(ulonglong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3281
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3283
exit(___);}
#if 0
# 3281
{ 
# 3282
__surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3283
} 
#endif
# 3329 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(float val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3330
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3332
exit(___);}
#if 0
# 3330
{ 
# 3331
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3332
} 
#endif
# 3334 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(float1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3337
exit(___);}
#if 0
# 3335
{ 
# 3336
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3337
} 
#endif
# 3339 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(float2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3340
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3342
exit(___);}
#if 0
# 3340
{ 
# 3341
__surf3Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, z, cudaBoundaryModeTrap); 
# 3342
} 
#endif
# 3344 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf3Dwrite(float4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3345
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3347
exit(___);}
#if 0
# 3345
{ 
# 3346
__surf3Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3347
} 
#endif
# 3383 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3384
surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3385
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 3403
exit(___);}
#if 0
# 3385
{ 
# 3386
union { 
# 3387
T val; 
# 3388
uchar1 c1; 
# 3389
ushort1 s1; 
# 3390
uint1 u1; 
# 3391
uint2 u2; 
# 3392
uint4 u4; 
# 3393
} tmp; 
# 3395
(tmp.val) = val; 
# 3397
(s == 1) ? ((void)__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3403
} 
#endif
# 3405 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3406
surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3407
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3409
exit(___);}
#if 0
# 3407
{ ; 
# 3408
surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode); 
# 3409
} 
#endif
# 3412 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3413
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3415
exit(___);}
#if 0
# 3413
{ 
# 3414
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3415
} 
#endif
# 3417 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(signed char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3418
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3420
exit(___);}
#if 0
# 3418
{ 
# 3419
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3420
} 
#endif
# 3422 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3423
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3425
exit(___);}
#if 0
# 3423
{ 
# 3424
__surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3425
} 
#endif
# 3427 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(char1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3428
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3430
exit(___);}
#if 0
# 3428
{ 
# 3429
__surf1DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3430
} 
#endif
# 3432 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3433
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3435
exit(___);}
#if 0
# 3433
{ 
# 3434
__surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3435
} 
#endif
# 3437 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(char2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3438
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3440
exit(___);}
#if 0
# 3438
{ 
# 3439
__surf1DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3440
} 
#endif
# 3442 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3443
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3445
exit(___);}
#if 0
# 3443
{ 
# 3444
__surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3445
} 
#endif
# 3447 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(char4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3448
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3450
exit(___);}
#if 0
# 3448
{ 
# 3449
__surf1DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3450
} 
#endif
# 3452 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3453
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3455
exit(___);}
#if 0
# 3453
{ 
# 3454
__surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3455
} 
#endif
# 3457 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3458
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3460
exit(___);}
#if 0
# 3458
{ 
# 3459
__surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3460
} 
#endif
# 3462 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3463
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3465
exit(___);}
#if 0
# 3463
{ 
# 3464
__surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3465
} 
#endif
# 3467 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(short1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3468
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3470
exit(___);}
#if 0
# 3468
{ 
# 3469
__surf1DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3470
} 
#endif
# 3472 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3473
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3475
exit(___);}
#if 0
# 3473
{ 
# 3474
__surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3475
} 
#endif
# 3477 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(short2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3478
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3480
exit(___);}
#if 0
# 3478
{ 
# 3479
__surf1DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3480
} 
#endif
# 3482 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3483
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3485
exit(___);}
#if 0
# 3483
{ 
# 3484
__surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3485
} 
#endif
# 3487 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(short4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3488
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3490
exit(___);}
#if 0
# 3488
{ 
# 3489
__surf1DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3490
} 
#endif
# 3492 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3493
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3495
exit(___);}
#if 0
# 3493
{ 
# 3494
__surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3495
} 
#endif
# 3497 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(int val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3498
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3500
exit(___);}
#if 0
# 3498
{ 
# 3499
__surf1DLayeredwriteu1(make_uint1((unsigned)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3500
} 
#endif
# 3502 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(unsigned val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3503
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3505
exit(___);}
#if 0
# 3503
{ 
# 3504
__surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3505
} 
#endif
# 3507 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(int1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3508
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3510
exit(___);}
#if 0
# 3508
{ 
# 3509
__surf1DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3510
} 
#endif
# 3512 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(uint1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3513
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3515
exit(___);}
#if 0
# 3513
{ 
# 3514
__surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3515
} 
#endif
# 3517 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(int2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3518
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3520
exit(___);}
#if 0
# 3518
{ 
# 3519
__surf1DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3520
} 
#endif
# 3522 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(uint2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3523
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3525
exit(___);}
#if 0
# 3523
{ 
# 3524
__surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3525
} 
#endif
# 3527 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(int4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3528
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3530
exit(___);}
#if 0
# 3528
{ 
# 3529
__surf1DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3530
} 
#endif
# 3532 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(uint4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3533
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3535
exit(___);}
#if 0
# 3533
{ 
# 3534
__surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3535
} 
#endif
# 3537 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3538
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3540
exit(___);}
#if 0
# 3538
{ 
# 3539
__surf1DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3540
} 
#endif
# 3542 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3543
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3545
exit(___);}
#if 0
# 3543
{ 
# 3544
__surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3545
} 
#endif
# 3547 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3548
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3550
exit(___);}
#if 0
# 3548
{ 
# 3549
__surf1DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3550
} 
#endif
# 3552 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3553
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3555
exit(___);}
#if 0
# 3553
{ 
# 3554
__surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3555
} 
#endif
# 3557 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3558
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3560
exit(___);}
#if 0
# 3558
{ 
# 3559
__surf1DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3560
} 
#endif
# 3562 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3563
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3565
exit(___);}
#if 0
# 3563
{ 
# 3564
__surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3565
} 
#endif
# 3611 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(float val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3612
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3614
exit(___);}
#if 0
# 3612
{ 
# 3613
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap); 
# 3614
} 
#endif
# 3616 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(float1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3617
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3619
exit(___);}
#if 0
# 3617
{ 
# 3618
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3619
} 
#endif
# 3621 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(float2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3622
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3624
exit(___);}
#if 0
# 3622
{ 
# 3623
__surf1DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, layer, cudaBoundaryModeTrap); 
# 3624
} 
#endif
# 3626 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf1DLayeredwrite(float4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3627
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3629
exit(___);}
#if 0
# 3627
{ 
# 3628
__surf1DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3629
} 
#endif
# 3665 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3666
surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3667
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 3685
exit(___);}
#if 0
# 3667
{ 
# 3668
union { 
# 3669
T val; 
# 3670
uchar1 c1; 
# 3671
ushort1 s1; 
# 3672
uint1 u1; 
# 3673
uint2 u2; 
# 3674
uint4 u4; 
# 3675
} tmp; 
# 3677
(tmp.val) = val; 
# 3679
(s == 1) ? ((void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3685
} 
#endif
# 3687 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3688
surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3689
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3691
exit(___);}
#if 0
# 3689
{ ; 
# 3690
surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode); 
# 3691
} 
#endif
# 3694 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3695
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3697
exit(___);}
#if 0
# 3695
{ 
# 3696
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3697
} 
#endif
# 3699 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(signed char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3700
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3702
exit(___);}
#if 0
# 3700
{ 
# 3701
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3702
} 
#endif
# 3704 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3705
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3707
exit(___);}
#if 0
# 3705
{ 
# 3706
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3707
} 
#endif
# 3709 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(char1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3710
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3712
exit(___);}
#if 0
# 3710
{ 
# 3711
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3712
} 
#endif
# 3714 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3715
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3717
exit(___);}
#if 0
# 3715
{ 
# 3716
__surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3717
} 
#endif
# 3719 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(char2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3720
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3722
exit(___);}
#if 0
# 3720
{ 
# 3721
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3722
} 
#endif
# 3724 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3725
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3727
exit(___);}
#if 0
# 3725
{ 
# 3726
__surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3727
} 
#endif
# 3729 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(char4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3730
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3732
exit(___);}
#if 0
# 3730
{ 
# 3731
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3732
} 
#endif
# 3734 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3735
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3737
exit(___);}
#if 0
# 3735
{ 
# 3736
__surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3737
} 
#endif
# 3739 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3740
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3742
exit(___);}
#if 0
# 3740
{ 
# 3741
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3742
} 
#endif
# 3744 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3745
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3747
exit(___);}
#if 0
# 3745
{ 
# 3746
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3747
} 
#endif
# 3749 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(short1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3750
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3752
exit(___);}
#if 0
# 3750
{ 
# 3751
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3752
} 
#endif
# 3754 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3755
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3757
exit(___);}
#if 0
# 3755
{ 
# 3756
__surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3757
} 
#endif
# 3759 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(short2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3760
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3762
exit(___);}
#if 0
# 3760
{ 
# 3761
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3762
} 
#endif
# 3764 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3765
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3767
exit(___);}
#if 0
# 3765
{ 
# 3766
__surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3767
} 
#endif
# 3769 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(short4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3770
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3772
exit(___);}
#if 0
# 3770
{ 
# 3771
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3772
} 
#endif
# 3774 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3775
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3777
exit(___);}
#if 0
# 3775
{ 
# 3776
__surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3777
} 
#endif
# 3779 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(int val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3780
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3782
exit(___);}
#if 0
# 3780
{ 
# 3781
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3782
} 
#endif
# 3784 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(unsigned val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3785
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3787
exit(___);}
#if 0
# 3785
{ 
# 3786
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3787
} 
#endif
# 3789 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(int1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3790
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3792
exit(___);}
#if 0
# 3790
{ 
# 3791
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3792
} 
#endif
# 3794 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(uint1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3795
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3797
exit(___);}
#if 0
# 3795
{ 
# 3796
__surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3797
} 
#endif
# 3799 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(int2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3800
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3802
exit(___);}
#if 0
# 3800
{ 
# 3801
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3802
} 
#endif
# 3804 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(uint2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3805
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3807
exit(___);}
#if 0
# 3805
{ 
# 3806
__surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3807
} 
#endif
# 3809 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(int4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3810
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3812
exit(___);}
#if 0
# 3810
{ 
# 3811
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3812
} 
#endif
# 3814 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(uint4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3815
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3817
exit(___);}
#if 0
# 3815
{ 
# 3816
__surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3817
} 
#endif
# 3819 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3820
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3822
exit(___);}
#if 0
# 3820
{ 
# 3821
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3822
} 
#endif
# 3824 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3825
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3827
exit(___);}
#if 0
# 3825
{ 
# 3826
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3827
} 
#endif
# 3829 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3830
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3832
exit(___);}
#if 0
# 3830
{ 
# 3831
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3832
} 
#endif
# 3834 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3835
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3837
exit(___);}
#if 0
# 3835
{ 
# 3836
__surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3837
} 
#endif
# 3839 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3840
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3842
exit(___);}
#if 0
# 3840
{ 
# 3841
__surf2DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3842
} 
#endif
# 3844 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3845
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3847
exit(___);}
#if 0
# 3845
{ 
# 3846
__surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3847
} 
#endif
# 3893 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(float val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3894
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3896
exit(___);}
#if 0
# 3894
{ 
# 3895
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3896
} 
#endif
# 3898 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(float1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3899
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3901
exit(___);}
#if 0
# 3899
{ 
# 3900
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3901
} 
#endif
# 3903 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(float2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3904
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3906
exit(___);}
#if 0
# 3904
{ 
# 3905
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3906
} 
#endif
# 3908 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surf2DLayeredwrite(float4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3909
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3911
exit(___);}
#if 0
# 3909
{ 
# 3910
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3911
} 
#endif
# 3947 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3948
surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3949
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 3967
exit(___);}
#if 0
# 3949
{ 
# 3950
union { 
# 3951
T val; 
# 3952
uchar1 c1; 
# 3953
ushort1 s1; 
# 3954
uint1 u1; 
# 3955
uint2 u2; 
# 3956
uint4 u4; 
# 3957
} tmp; 
# 3959
(tmp.val) = val; 
# 3961
(s == 1) ? ((void)__surfCubemapwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surfCubemapwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surfCubemapwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surfCubemapwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surfCubemapwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3967
} 
#endif
# 3969 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 3970
surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3971
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3973
exit(___);}
#if 0
# 3971
{ ; 
# 3972
surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode); 
# 3973
} 
#endif
# 3976 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3977
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3979
exit(___);}
#if 0
# 3977
{ 
# 3978
__surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 3979
} 
#endif
# 3981 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(signed char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3982
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3984
exit(___);}
#if 0
# 3982
{ 
# 3983
__surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 3984
} 
#endif
# 3986 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(unsigned char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3987
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3989
exit(___);}
#if 0
# 3987
{ 
# 3988
__surfCubemapwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 3989
} 
#endif
# 3991 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(char1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3992
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3994
exit(___);}
#if 0
# 3992
{ 
# 3993
__surfCubemapwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 3994
} 
#endif
# 3996 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(uchar1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 3997
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3999
exit(___);}
#if 0
# 3997
{ 
# 3998
__surfCubemapwritec1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 3999
} 
#endif
# 4001 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(char2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4002
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4004
exit(___);}
#if 0
# 4002
{ 
# 4003
__surfCubemapwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4004
} 
#endif
# 4006 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(uchar2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4007
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4009
exit(___);}
#if 0
# 4007
{ 
# 4008
__surfCubemapwritec2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4009
} 
#endif
# 4011 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(char4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4012
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4014
exit(___);}
#if 0
# 4012
{ 
# 4013
__surfCubemapwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4014
} 
#endif
# 4016 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(uchar4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4017
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4019
exit(___);}
#if 0
# 4017
{ 
# 4018
__surfCubemapwritec4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4019
} 
#endif
# 4021 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4022
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4024
exit(___);}
#if 0
# 4022
{ 
# 4023
__surfCubemapwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4024
} 
#endif
# 4026 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(unsigned short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4027
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4029
exit(___);}
#if 0
# 4027
{ 
# 4028
__surfCubemapwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4029
} 
#endif
# 4031 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(short1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4032
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4034
exit(___);}
#if 0
# 4032
{ 
# 4033
__surfCubemapwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4034
} 
#endif
# 4036 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(ushort1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4037
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4039
exit(___);}
#if 0
# 4037
{ 
# 4038
__surfCubemapwrites1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4039
} 
#endif
# 4041 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(short2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4042
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4044
exit(___);}
#if 0
# 4042
{ 
# 4043
__surfCubemapwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4044
} 
#endif
# 4046 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(ushort2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4047
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4049
exit(___);}
#if 0
# 4047
{ 
# 4048
__surfCubemapwrites2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4049
} 
#endif
# 4051 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(short4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4052
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4054
exit(___);}
#if 0
# 4052
{ 
# 4053
__surfCubemapwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4054
} 
#endif
# 4056 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(ushort4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4057
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4059
exit(___);}
#if 0
# 4057
{ 
# 4058
__surfCubemapwrites4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4059
} 
#endif
# 4061 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(int val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4062
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4064
exit(___);}
#if 0
# 4062
{ 
# 4063
__surfCubemapwriteu1(make_uint1((unsigned)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4064
} 
#endif
# 4066 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(unsigned val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4067
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4069
exit(___);}
#if 0
# 4067
{ 
# 4068
__surfCubemapwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4069
} 
#endif
# 4071 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(int1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4072
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4074
exit(___);}
#if 0
# 4072
{ 
# 4073
__surfCubemapwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4074
} 
#endif
# 4076 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(uint1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4077
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4079
exit(___);}
#if 0
# 4077
{ 
# 4078
__surfCubemapwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4079
} 
#endif
# 4081 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(int2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4082
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4084
exit(___);}
#if 0
# 4082
{ 
# 4083
__surfCubemapwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4084
} 
#endif
# 4086 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(uint2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4087
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4089
exit(___);}
#if 0
# 4087
{ 
# 4088
__surfCubemapwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4089
} 
#endif
# 4091 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(int4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4092
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4094
exit(___);}
#if 0
# 4092
{ 
# 4093
__surfCubemapwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4094
} 
#endif
# 4096 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(uint4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4097
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4099
exit(___);}
#if 0
# 4097
{ 
# 4098
__surfCubemapwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4099
} 
#endif
# 4101 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4102
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4104
exit(___);}
#if 0
# 4102
{ 
# 4103
__surfCubemapwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4104
} 
#endif
# 4106 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(unsigned long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4107
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4109
exit(___);}
#if 0
# 4107
{ 
# 4108
__surfCubemapwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4109
} 
#endif
# 4111 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(longlong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4112
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4114
exit(___);}
#if 0
# 4112
{ 
# 4113
__surfCubemapwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4114
} 
#endif
# 4116 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4117
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4119
exit(___);}
#if 0
# 4117
{ 
# 4118
__surfCubemapwritel1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4119
} 
#endif
# 4121 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(longlong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4122
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4124
exit(___);}
#if 0
# 4122
{ 
# 4123
__surfCubemapwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4124
} 
#endif
# 4126 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4127
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4129
exit(___);}
#if 0
# 4127
{ 
# 4128
__surfCubemapwritel2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4129
} 
#endif
# 4175 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(float val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4176
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4178
exit(___);}
#if 0
# 4176
{ 
# 4177
__surfCubemapwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4178
} 
#endif
# 4180 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(float1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4181
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4183
exit(___);}
#if 0
# 4181
{ 
# 4182
__surfCubemapwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4183
} 
#endif
# 4185 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(float2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4186
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4188
exit(___);}
#if 0
# 4186
{ 
# 4187
__surfCubemapwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, face, cudaBoundaryModeTrap); 
# 4188
} 
#endif
# 4190 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapwrite(float4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4191
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4193
exit(___);}
#if 0
# 4191
{ 
# 4192
__surfCubemapwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4193
} 
#endif
# 4229 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 4230
surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4231
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 4249
exit(___);}
#if 0
# 4231
{ 
# 4232
union { 
# 4233
T val; 
# 4234
uchar1 c1; 
# 4235
ushort1 s1; 
# 4236
uint1 u1; 
# 4237
uint2 u2; 
# 4238
uint4 u4; 
# 4239
} tmp; 
# 4241
(tmp.val) = val; 
# 4243
(s == 1) ? ((void)__surfCubemapLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surfCubemapLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surfCubemapLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surfCubemapLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surfCubemapLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((void)0))))); 
# 4249
} 
#endif
# 4251 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void 
# 4252
surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4253
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4255
exit(___);}
#if 0
# 4253
{ ; 
# 4254
surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode); 
# 4255
} 
#endif
# 4258 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4259
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4261
exit(___);}
#if 0
# 4259
{ 
# 4260
__surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4261
} 
#endif
# 4263 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4264
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4266
exit(___);}
#if 0
# 4264
{ 
# 4265
__surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4266
} 
#endif
# 4268 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4269
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4271
exit(___);}
#if 0
# 4269
{ 
# 4270
__surfCubemapLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4271
} 
#endif
# 4273 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4274
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4276
exit(___);}
#if 0
# 4274
{ 
# 4275
__surfCubemapLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4276
} 
#endif
# 4278 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4279
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4281
exit(___);}
#if 0
# 4279
{ 
# 4280
__surfCubemapLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4281
} 
#endif
# 4283 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4284
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4286
exit(___);}
#if 0
# 4284
{ 
# 4285
__surfCubemapLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4286
} 
#endif
# 4288 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4289
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4291
exit(___);}
#if 0
# 4289
{ 
# 4290
__surfCubemapLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4291
} 
#endif
# 4293 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4294
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4296
exit(___);}
#if 0
# 4294
{ 
# 4295
__surfCubemapLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4296
} 
#endif
# 4298 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4299
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4301
exit(___);}
#if 0
# 4299
{ 
# 4300
__surfCubemapLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4301
} 
#endif
# 4303 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4304
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4306
exit(___);}
#if 0
# 4304
{ 
# 4305
__surfCubemapLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4306
} 
#endif
# 4308 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4309
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4311
exit(___);}
#if 0
# 4309
{ 
# 4310
__surfCubemapLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4311
} 
#endif
# 4313 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4314
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4316
exit(___);}
#if 0
# 4314
{ 
# 4315
__surfCubemapLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4316
} 
#endif
# 4318 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4319
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4321
exit(___);}
#if 0
# 4319
{ 
# 4320
__surfCubemapLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4321
} 
#endif
# 4323 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4324
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4326
exit(___);}
#if 0
# 4324
{ 
# 4325
__surfCubemapLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4326
} 
#endif
# 4328 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4329
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4331
exit(___);}
#if 0
# 4329
{ 
# 4330
__surfCubemapLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4331
} 
#endif
# 4333 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4334
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4336
exit(___);}
#if 0
# 4334
{ 
# 4335
__surfCubemapLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4336
} 
#endif
# 4338 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4339
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4341
exit(___);}
#if 0
# 4339
{ 
# 4340
__surfCubemapLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4341
} 
#endif
# 4343 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(int val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4344
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4346
exit(___);}
#if 0
# 4344
{ 
# 4345
__surfCubemapLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4346
} 
#endif
# 4348 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4349
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4351
exit(___);}
#if 0
# 4349
{ 
# 4350
__surfCubemapLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4351
} 
#endif
# 4353 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4354
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4356
exit(___);}
#if 0
# 4354
{ 
# 4355
__surfCubemapLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4356
} 
#endif
# 4358 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4359
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4361
exit(___);}
#if 0
# 4359
{ 
# 4360
__surfCubemapLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4361
} 
#endif
# 4363 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4364
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4366
exit(___);}
#if 0
# 4364
{ 
# 4365
__surfCubemapLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4366
} 
#endif
# 4368 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4371
exit(___);}
#if 0
# 4369
{ 
# 4370
__surfCubemapLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4371
} 
#endif
# 4373 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4374
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4376
exit(___);}
#if 0
# 4374
{ 
# 4375
__surfCubemapLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4376
} 
#endif
# 4378 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4379
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4381
exit(___);}
#if 0
# 4379
{ 
# 4380
__surfCubemapLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4381
} 
#endif
# 4383 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4384
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4386
exit(___);}
#if 0
# 4384
{ 
# 4385
__surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4386
} 
#endif
# 4388 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4389
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4391
exit(___);}
#if 0
# 4389
{ 
# 4390
__surfCubemapLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4391
} 
#endif
# 4393 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4394
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4396
exit(___);}
#if 0
# 4394
{ 
# 4395
__surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4396
} 
#endif
# 4398 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4399
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4401
exit(___);}
#if 0
# 4399
{ 
# 4400
__surfCubemapLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4401
} 
#endif
# 4403 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4404
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4406
exit(___);}
#if 0
# 4404
{ 
# 4405
__surfCubemapLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4406
} 
#endif
# 4408 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4409
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4411
exit(___);}
#if 0
# 4409
{ 
# 4410
__surfCubemapLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4411
} 
#endif
# 4457 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(float val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4458
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4460
exit(___);}
#if 0
# 4458
{ 
# 4459
__surfCubemapLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4460
} 
#endif
# 4462 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4463
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4465
exit(___);}
#if 0
# 4463
{ 
# 4464
__surfCubemapLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4465
} 
#endif
# 4467 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4468
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4470
exit(___);}
#if 0
# 4468
{ 
# 4469
__surfCubemapLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4470
} 
#endif
# 4472 "/home/bachelor/deicide218/cuda-4.2/include/surface_functions.h"
__attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 4473
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4475
exit(___);}
#if 0
# 4473
{ 
# 4474
__surfCubemapLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4475
} 
#endif
# 96 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType>  t, int x) 
# 97
{int volatile ___ = 1;(void)t;(void)x;
# 105
exit(___);}
#if 0
# 97
{ 
# 101
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 104
return (char)(v.x); 
# 105
} 
#endif
# 107 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType>  t, int x) 
# 108
{int volatile ___ = 1;(void)t;(void)x;
# 112
exit(___);}
#if 0
# 108
{ 
# 109
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 111
return (signed char)(v.x); 
# 112
} 
#endif
# 114 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType>  t, int x) 
# 115
{int volatile ___ = 1;(void)t;(void)x;
# 119
exit(___);}
#if 0
# 115
{ 
# 116
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 118
return (unsigned char)(v.x); 
# 119
} 
#endif
# 121 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType>  t, int x) 
# 122
{int volatile ___ = 1;(void)t;(void)x;
# 126
exit(___);}
#if 0
# 122
{ 
# 123
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 125
return make_char1(v.x); 
# 126
} 
#endif
# 128 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType>  t, int x) 
# 129
{int volatile ___ = 1;(void)t;(void)x;
# 133
exit(___);}
#if 0
# 129
{ 
# 130
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 132
return make_uchar1(v.x); 
# 133
} 
#endif
# 135 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType>  t, int x) 
# 136
{int volatile ___ = 1;(void)t;(void)x;
# 140
exit(___);}
#if 0
# 136
{ 
# 137
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 139
return make_char2(v.x, v.y); 
# 140
} 
#endif
# 142 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType>  t, int x) 
# 143
{int volatile ___ = 1;(void)t;(void)x;
# 147
exit(___);}
#if 0
# 143
{ 
# 144
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 146
return make_uchar2(v.x, v.y); 
# 147
} 
#endif
# 149 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType>  t, int x) 
# 150
{int volatile ___ = 1;(void)t;(void)x;
# 154
exit(___);}
#if 0
# 150
{ 
# 151
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 153
return make_char4(v.x, v.y, v.z, v.w); 
# 154
} 
#endif
# 156 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType>  t, int x) 
# 157
{int volatile ___ = 1;(void)t;(void)x;
# 161
exit(___);}
#if 0
# 157
{ 
# 158
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 160
return make_uchar4(v.x, v.y, v.z, v.w); 
# 161
} 
#endif
# 169 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType>  t, int x) 
# 170
{int volatile ___ = 1;(void)t;(void)x;
# 174
exit(___);}
#if 0
# 170
{ 
# 171
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 173
return (short)(v.x); 
# 174
} 
#endif
# 176 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType>  t, int x) 
# 177
{int volatile ___ = 1;(void)t;(void)x;
# 181
exit(___);}
#if 0
# 177
{ 
# 178
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 180
return (unsigned short)(v.x); 
# 181
} 
#endif
# 183 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType>  t, int x) 
# 184
{int volatile ___ = 1;(void)t;(void)x;
# 188
exit(___);}
#if 0
# 184
{ 
# 185
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 187
return make_short1(v.x); 
# 188
} 
#endif
# 190 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType>  t, int x) 
# 191
{int volatile ___ = 1;(void)t;(void)x;
# 195
exit(___);}
#if 0
# 191
{ 
# 192
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 194
return make_ushort1(v.x); 
# 195
} 
#endif
# 197 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType>  t, int x) 
# 198
{int volatile ___ = 1;(void)t;(void)x;
# 202
exit(___);}
#if 0
# 198
{ 
# 199
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 201
return make_short2(v.x, v.y); 
# 202
} 
#endif
# 204 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType>  t, int x) 
# 205
{int volatile ___ = 1;(void)t;(void)x;
# 209
exit(___);}
#if 0
# 205
{ 
# 206
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 208
return make_ushort2(v.x, v.y); 
# 209
} 
#endif
# 211 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType>  t, int x) 
# 212
{int volatile ___ = 1;(void)t;(void)x;
# 216
exit(___);}
#if 0
# 212
{ 
# 213
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 215
return make_short4(v.x, v.y, v.z, v.w); 
# 216
} 
#endif
# 218 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType>  t, int x) 
# 219
{int volatile ___ = 1;(void)t;(void)x;
# 223
exit(___);}
#if 0
# 219
{ 
# 220
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 222
return make_ushort4(v.x, v.y, v.z, v.w); 
# 223
} 
#endif
# 231 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType>  t, int x) 
# 232
{int volatile ___ = 1;(void)t;(void)x;
# 236
exit(___);}
#if 0
# 232
{ 
# 233
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 235
return (int)(v.x); 
# 236
} 
#endif
# 238 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType>  t, int x) 
# 239
{int volatile ___ = 1;(void)t;(void)x;
# 243
exit(___);}
#if 0
# 239
{ 
# 240
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 242
return (unsigned)(v.x); 
# 243
} 
#endif
# 245 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType>  t, int x) 
# 246
{int volatile ___ = 1;(void)t;(void)x;
# 250
exit(___);}
#if 0
# 246
{ 
# 247
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 249
return make_int1(v.x); 
# 250
} 
#endif
# 252 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType>  t, int x) 
# 253
{int volatile ___ = 1;(void)t;(void)x;
# 257
exit(___);}
#if 0
# 253
{ 
# 254
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 256
return make_uint1(v.x); 
# 257
} 
#endif
# 259 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType>  t, int x) 
# 260
{int volatile ___ = 1;(void)t;(void)x;
# 264
exit(___);}
#if 0
# 260
{ 
# 261
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 263
return make_int2(v.x, v.y); 
# 264
} 
#endif
# 266 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType>  t, int x) 
# 267
{int volatile ___ = 1;(void)t;(void)x;
# 271
exit(___);}
#if 0
# 267
{ 
# 268
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 270
return make_uint2(v.x, v.y); 
# 271
} 
#endif
# 273 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType>  t, int x) 
# 274
{int volatile ___ = 1;(void)t;(void)x;
# 278
exit(___);}
#if 0
# 274
{ 
# 275
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 277
return make_int4(v.x, v.y, v.z, v.w); 
# 278
} 
#endif
# 280 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType>  t, int x) 
# 281
{int volatile ___ = 1;(void)t;(void)x;
# 285
exit(___);}
#if 0
# 281
{ 
# 282
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 284
return make_uint4(v.x, v.y, v.z, v.w); 
# 285
} 
#endif
# 359 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType>  t, int x) 
# 360
{int volatile ___ = 1;(void)t;(void)x;
# 364
exit(___);}
#if 0
# 360
{ 
# 361
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 363
return v.x; 
# 364
} 
#endif
# 366 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType>  t, int x) 
# 367
{int volatile ___ = 1;(void)t;(void)x;
# 371
exit(___);}
#if 0
# 367
{ 
# 368
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 370
return make_float1(v.x); 
# 371
} 
#endif
# 373 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType>  t, int x) 
# 374
{int volatile ___ = 1;(void)t;(void)x;
# 378
exit(___);}
#if 0
# 374
{ 
# 375
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 377
return make_float2(v.x, v.y); 
# 378
} 
#endif
# 380 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType>  t, int x) 
# 381
{int volatile ___ = 1;(void)t;(void)x;
# 385
exit(___);}
#if 0
# 381
{ 
# 382
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 384
return make_float4(v.x, v.y, v.z, v.w); 
# 385
} 
#endif
# 393 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 394
{int volatile ___ = 1;(void)t;(void)x;
# 403
exit(___);}
#if 0
# 394
{ 
# 398
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 400
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 402
return w.x; 
# 403
} 
#endif
# 405 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 406
{int volatile ___ = 1;(void)t;(void)x;
# 411
exit(___);}
#if 0
# 406
{ 
# 407
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 408
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 410
return w.x; 
# 411
} 
#endif
# 413 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 414
{int volatile ___ = 1;(void)t;(void)x;
# 419
exit(___);}
#if 0
# 414
{ 
# 415
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 416
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 418
return w.x; 
# 419
} 
#endif
# 421 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 422
{int volatile ___ = 1;(void)t;(void)x;
# 427
exit(___);}
#if 0
# 422
{ 
# 423
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 424
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 426
return make_float1(w.x); 
# 427
} 
#endif
# 429 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 430
{int volatile ___ = 1;(void)t;(void)x;
# 435
exit(___);}
#if 0
# 430
{ 
# 431
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 432
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 434
return make_float1(w.x); 
# 435
} 
#endif
# 437 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 438
{int volatile ___ = 1;(void)t;(void)x;
# 443
exit(___);}
#if 0
# 438
{ 
# 439
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 440
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 442
return make_float2(w.x, w.y); 
# 443
} 
#endif
# 445 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 446
{int volatile ___ = 1;(void)t;(void)x;
# 451
exit(___);}
#if 0
# 446
{ 
# 447
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 448
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 450
return make_float2(w.x, w.y); 
# 451
} 
#endif
# 453 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 454
{int volatile ___ = 1;(void)t;(void)x;
# 459
exit(___);}
#if 0
# 454
{ 
# 455
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 456
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 458
return make_float4(w.x, w.y, w.z, w.w); 
# 459
} 
#endif
# 461 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 462
{int volatile ___ = 1;(void)t;(void)x;
# 467
exit(___);}
#if 0
# 462
{ 
# 463
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 464
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 466
return make_float4(w.x, w.y, w.z, w.w); 
# 467
} 
#endif
# 475 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 476
{int volatile ___ = 1;(void)t;(void)x;
# 481
exit(___);}
#if 0
# 476
{ 
# 477
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 478
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 480
return w.x; 
# 481
} 
#endif
# 483 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 484
{int volatile ___ = 1;(void)t;(void)x;
# 489
exit(___);}
#if 0
# 484
{ 
# 485
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 486
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 488
return w.x; 
# 489
} 
#endif
# 491 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 492
{int volatile ___ = 1;(void)t;(void)x;
# 497
exit(___);}
#if 0
# 492
{ 
# 493
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 494
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 496
return make_float1(w.x); 
# 497
} 
#endif
# 499 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 500
{int volatile ___ = 1;(void)t;(void)x;
# 505
exit(___);}
#if 0
# 500
{ 
# 501
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 502
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 504
return make_float1(w.x); 
# 505
} 
#endif
# 507 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 508
{int volatile ___ = 1;(void)t;(void)x;
# 513
exit(___);}
#if 0
# 508
{ 
# 509
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 510
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 512
return make_float2(w.x, w.y); 
# 513
} 
#endif
# 515 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 516
{int volatile ___ = 1;(void)t;(void)x;
# 521
exit(___);}
#if 0
# 516
{ 
# 517
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 518
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 520
return make_float2(w.x, w.y); 
# 521
} 
#endif
# 523 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 524
{int volatile ___ = 1;(void)t;(void)x;
# 529
exit(___);}
#if 0
# 524
{ 
# 525
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 526
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 528
return make_float4(w.x, w.y, w.z, w.w); 
# 529
} 
#endif
# 531 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 532
{int volatile ___ = 1;(void)t;(void)x;
# 537
exit(___);}
#if 0
# 532
{ 
# 533
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 534
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 536
return make_float4(w.x, w.y, w.z, w.w); 
# 537
} 
#endif
# 545 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1D(texture< char, 1, cudaReadModeElementType>  t, float x) 
# 546
{int volatile ___ = 1;(void)t;(void)x;
# 554
exit(___);}
#if 0
# 546
{ 
# 550
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 553
return (char)(v.x); 
# 554
} 
#endif
# 556 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType>  t, float x) 
# 557
{int volatile ___ = 1;(void)t;(void)x;
# 561
exit(___);}
#if 0
# 557
{ 
# 558
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 560
return (signed char)(v.x); 
# 561
} 
#endif
# 563 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType>  t, float x) 
# 564
{int volatile ___ = 1;(void)t;(void)x;
# 568
exit(___);}
#if 0
# 564
{ 
# 565
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 567
return (unsigned char)(v.x); 
# 568
} 
#endif
# 570 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType>  t, float x) 
# 571
{int volatile ___ = 1;(void)t;(void)x;
# 575
exit(___);}
#if 0
# 571
{ 
# 572
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 574
return make_char1(v.x); 
# 575
} 
#endif
# 577 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType>  t, float x) 
# 578
{int volatile ___ = 1;(void)t;(void)x;
# 582
exit(___);}
#if 0
# 578
{ 
# 579
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 581
return make_uchar1(v.x); 
# 582
} 
#endif
# 584 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType>  t, float x) 
# 585
{int volatile ___ = 1;(void)t;(void)x;
# 589
exit(___);}
#if 0
# 585
{ 
# 586
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 588
return make_char2(v.x, v.y); 
# 589
} 
#endif
# 591 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType>  t, float x) 
# 592
{int volatile ___ = 1;(void)t;(void)x;
# 596
exit(___);}
#if 0
# 592
{ 
# 593
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 595
return make_uchar2(v.x, v.y); 
# 596
} 
#endif
# 598 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType>  t, float x) 
# 599
{int volatile ___ = 1;(void)t;(void)x;
# 603
exit(___);}
#if 0
# 599
{ 
# 600
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 602
return make_char4(v.x, v.y, v.z, v.w); 
# 603
} 
#endif
# 605 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType>  t, float x) 
# 606
{int volatile ___ = 1;(void)t;(void)x;
# 610
exit(___);}
#if 0
# 606
{ 
# 607
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 609
return make_uchar4(v.x, v.y, v.z, v.w); 
# 610
} 
#endif
# 618 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1D(texture< short, 1, cudaReadModeElementType>  t, float x) 
# 619
{int volatile ___ = 1;(void)t;(void)x;
# 623
exit(___);}
#if 0
# 619
{ 
# 620
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 622
return (short)(v.x); 
# 623
} 
#endif
# 625 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType>  t, float x) 
# 626
{int volatile ___ = 1;(void)t;(void)x;
# 630
exit(___);}
#if 0
# 626
{ 
# 627
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 629
return (unsigned short)(v.x); 
# 630
} 
#endif
# 632 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType>  t, float x) 
# 633
{int volatile ___ = 1;(void)t;(void)x;
# 637
exit(___);}
#if 0
# 633
{ 
# 634
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 636
return make_short1(v.x); 
# 637
} 
#endif
# 639 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType>  t, float x) 
# 640
{int volatile ___ = 1;(void)t;(void)x;
# 644
exit(___);}
#if 0
# 640
{ 
# 641
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 643
return make_ushort1(v.x); 
# 644
} 
#endif
# 646 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType>  t, float x) 
# 647
{int volatile ___ = 1;(void)t;(void)x;
# 651
exit(___);}
#if 0
# 647
{ 
# 648
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 650
return make_short2(v.x, v.y); 
# 651
} 
#endif
# 653 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType>  t, float x) 
# 654
{int volatile ___ = 1;(void)t;(void)x;
# 658
exit(___);}
#if 0
# 654
{ 
# 655
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 657
return make_ushort2(v.x, v.y); 
# 658
} 
#endif
# 660 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType>  t, float x) 
# 661
{int volatile ___ = 1;(void)t;(void)x;
# 665
exit(___);}
#if 0
# 661
{ 
# 662
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 664
return make_short4(v.x, v.y, v.z, v.w); 
# 665
} 
#endif
# 667 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType>  t, float x) 
# 668
{int volatile ___ = 1;(void)t;(void)x;
# 672
exit(___);}
#if 0
# 668
{ 
# 669
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 671
return make_ushort4(v.x, v.y, v.z, v.w); 
# 672
} 
#endif
# 680 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1D(texture< int, 1, cudaReadModeElementType>  t, float x) 
# 681
{int volatile ___ = 1;(void)t;(void)x;
# 685
exit(___);}
#if 0
# 681
{ 
# 682
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 684
return (int)(v.x); 
# 685
} 
#endif
# 687 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType>  t, float x) 
# 688
{int volatile ___ = 1;(void)t;(void)x;
# 692
exit(___);}
#if 0
# 688
{ 
# 689
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 691
return (unsigned)(v.x); 
# 692
} 
#endif
# 694 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType>  t, float x) 
# 695
{int volatile ___ = 1;(void)t;(void)x;
# 699
exit(___);}
#if 0
# 695
{ 
# 696
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 698
return make_int1(v.x); 
# 699
} 
#endif
# 701 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType>  t, float x) 
# 702
{int volatile ___ = 1;(void)t;(void)x;
# 706
exit(___);}
#if 0
# 702
{ 
# 703
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 705
return make_uint1(v.x); 
# 706
} 
#endif
# 708 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType>  t, float x) 
# 709
{int volatile ___ = 1;(void)t;(void)x;
# 713
exit(___);}
#if 0
# 709
{ 
# 710
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 712
return make_int2(v.x, v.y); 
# 713
} 
#endif
# 715 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType>  t, float x) 
# 716
{int volatile ___ = 1;(void)t;(void)x;
# 720
exit(___);}
#if 0
# 716
{ 
# 717
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 719
return make_uint2(v.x, v.y); 
# 720
} 
#endif
# 722 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType>  t, float x) 
# 723
{int volatile ___ = 1;(void)t;(void)x;
# 727
exit(___);}
#if 0
# 723
{ 
# 724
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 726
return make_int4(v.x, v.y, v.z, v.w); 
# 727
} 
#endif
# 729 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType>  t, float x) 
# 730
{int volatile ___ = 1;(void)t;(void)x;
# 734
exit(___);}
#if 0
# 730
{ 
# 731
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 733
return make_uint4(v.x, v.y, v.z, v.w); 
# 734
} 
#endif
# 814 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< float, 1, cudaReadModeElementType>  t, float x) 
# 815
{int volatile ___ = 1;(void)t;(void)x;
# 819
exit(___);}
#if 0
# 815
{ 
# 816
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 818
return v.x; 
# 819
} 
#endif
# 821 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType>  t, float x) 
# 822
{int volatile ___ = 1;(void)t;(void)x;
# 826
exit(___);}
#if 0
# 822
{ 
# 823
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 825
return make_float1(v.x); 
# 826
} 
#endif
# 828 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType>  t, float x) 
# 829
{int volatile ___ = 1;(void)t;(void)x;
# 833
exit(___);}
#if 0
# 829
{ 
# 830
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 832
return make_float2(v.x, v.y); 
# 833
} 
#endif
# 835 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType>  t, float x) 
# 836
{int volatile ___ = 1;(void)t;(void)x;
# 840
exit(___);}
#if 0
# 836
{ 
# 837
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 839
return make_float4(v.x, v.y, v.z, v.w); 
# 840
} 
#endif
# 848 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 849
{int volatile ___ = 1;(void)t;(void)x;
# 858
exit(___);}
#if 0
# 849
{ 
# 853
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 857
return w.x; 
# 858
} 
#endif
# 860 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 861
{int volatile ___ = 1;(void)t;(void)x;
# 866
exit(___);}
#if 0
# 861
{ 
# 862
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 865
return w.x; 
# 866
} 
#endif
# 868 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 869
{int volatile ___ = 1;(void)t;(void)x;
# 874
exit(___);}
#if 0
# 869
{ 
# 870
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 873
return w.x; 
# 874
} 
#endif
# 876 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 877
{int volatile ___ = 1;(void)t;(void)x;
# 882
exit(___);}
#if 0
# 877
{ 
# 878
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 879
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 881
return make_float1(w.x); 
# 882
} 
#endif
# 884 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 885
{int volatile ___ = 1;(void)t;(void)x;
# 890
exit(___);}
#if 0
# 885
{ 
# 886
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 887
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 889
return make_float1(w.x); 
# 890
} 
#endif
# 892 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 893
{int volatile ___ = 1;(void)t;(void)x;
# 898
exit(___);}
#if 0
# 893
{ 
# 894
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 895
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 897
return make_float2(w.x, w.y); 
# 898
} 
#endif
# 900 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 901
{int volatile ___ = 1;(void)t;(void)x;
# 906
exit(___);}
#if 0
# 901
{ 
# 902
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 903
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 905
return make_float2(w.x, w.y); 
# 906
} 
#endif
# 908 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 909
{int volatile ___ = 1;(void)t;(void)x;
# 914
exit(___);}
#if 0
# 909
{ 
# 910
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 911
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 913
return make_float4(w.x, w.y, w.z, w.w); 
# 914
} 
#endif
# 916 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 917
{int volatile ___ = 1;(void)t;(void)x;
# 922
exit(___);}
#if 0
# 917
{ 
# 918
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 919
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 921
return make_float4(w.x, w.y, w.z, w.w); 
# 922
} 
#endif
# 930 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 931
{int volatile ___ = 1;(void)t;(void)x;
# 936
exit(___);}
#if 0
# 931
{ 
# 932
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 933
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 935
return w.x; 
# 936
} 
#endif
# 938 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 939
{int volatile ___ = 1;(void)t;(void)x;
# 944
exit(___);}
#if 0
# 939
{ 
# 940
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 941
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 943
return w.x; 
# 944
} 
#endif
# 946 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 947
{int volatile ___ = 1;(void)t;(void)x;
# 952
exit(___);}
#if 0
# 947
{ 
# 948
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 949
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 951
return make_float1(w.x); 
# 952
} 
#endif
# 954 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 955
{int volatile ___ = 1;(void)t;(void)x;
# 960
exit(___);}
#if 0
# 955
{ 
# 956
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 957
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 959
return make_float1(w.x); 
# 960
} 
#endif
# 962 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 963
{int volatile ___ = 1;(void)t;(void)x;
# 968
exit(___);}
#if 0
# 963
{ 
# 964
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 965
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 967
return make_float2(w.x, w.y); 
# 968
} 
#endif
# 970 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 971
{int volatile ___ = 1;(void)t;(void)x;
# 976
exit(___);}
#if 0
# 971
{ 
# 972
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 973
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 975
return make_float2(w.x, w.y); 
# 976
} 
#endif
# 978 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 979
{int volatile ___ = 1;(void)t;(void)x;
# 984
exit(___);}
#if 0
# 979
{ 
# 980
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 981
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 983
return make_float4(w.x, w.y, w.z, w.w); 
# 984
} 
#endif
# 986 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 987
{int volatile ___ = 1;(void)t;(void)x;
# 992
exit(___);}
#if 0
# 987
{ 
# 988
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 989
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 991
return make_float4(w.x, w.y, w.z, w.w); 
# 992
} 
#endif
# 1000 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex2D(texture< char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1001
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1009
exit(___);}
#if 0
# 1001
{ 
# 1005
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1008
return (char)(v.x); 
# 1009
} 
#endif
# 1011 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1012
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1016
exit(___);}
#if 0
# 1012
{ 
# 1013
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1015
return (signed char)(v.x); 
# 1016
} 
#endif
# 1018 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1019
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1023
exit(___);}
#if 0
# 1019
{ 
# 1020
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1022
return (unsigned char)(v.x); 
# 1023
} 
#endif
# 1025 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1026
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1030
exit(___);}
#if 0
# 1026
{ 
# 1027
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1029
return make_char1(v.x); 
# 1030
} 
#endif
# 1032 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1033
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1037
exit(___);}
#if 0
# 1033
{ 
# 1034
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1036
return make_uchar1(v.x); 
# 1037
} 
#endif
# 1039 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1040
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1044
exit(___);}
#if 0
# 1040
{ 
# 1041
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1043
return make_char2(v.x, v.y); 
# 1044
} 
#endif
# 1046 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1047
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1051
exit(___);}
#if 0
# 1047
{ 
# 1048
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1050
return make_uchar2(v.x, v.y); 
# 1051
} 
#endif
# 1053 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1054
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1058
exit(___);}
#if 0
# 1054
{ 
# 1055
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1057
return make_char4(v.x, v.y, v.z, v.w); 
# 1058
} 
#endif
# 1060 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1061
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1065
exit(___);}
#if 0
# 1061
{ 
# 1062
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1064
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1065
} 
#endif
# 1073 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex2D(texture< short, 2, cudaReadModeElementType>  t, float x, float y) 
# 1074
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1078
exit(___);}
#if 0
# 1074
{ 
# 1075
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1077
return (short)(v.x); 
# 1078
} 
#endif
# 1080 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y) 
# 1081
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1085
exit(___);}
#if 0
# 1081
{ 
# 1082
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1084
return (unsigned short)(v.x); 
# 1085
} 
#endif
# 1087 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1088
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1092
exit(___);}
#if 0
# 1088
{ 
# 1089
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1091
return make_short1(v.x); 
# 1092
} 
#endif
# 1094 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1095
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1099
exit(___);}
#if 0
# 1095
{ 
# 1096
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1098
return make_ushort1(v.x); 
# 1099
} 
#endif
# 1101 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1102
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1106
exit(___);}
#if 0
# 1102
{ 
# 1103
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1105
return make_short2(v.x, v.y); 
# 1106
} 
#endif
# 1108 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1109
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1113
exit(___);}
#if 0
# 1109
{ 
# 1110
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1112
return make_ushort2(v.x, v.y); 
# 1113
} 
#endif
# 1115 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1116
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1120
exit(___);}
#if 0
# 1116
{ 
# 1117
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1119
return make_short4(v.x, v.y, v.z, v.w); 
# 1120
} 
#endif
# 1122 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1123
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1127
exit(___);}
#if 0
# 1123
{ 
# 1124
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1126
return make_ushort4(v.x, v.y, v.z, v.w); 
# 1127
} 
#endif
# 1135 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex2D(texture< int, 2, cudaReadModeElementType>  t, float x, float y) 
# 1136
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1140
exit(___);}
#if 0
# 1136
{ 
# 1137
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1139
return (int)(v.x); 
# 1140
} 
#endif
# 1142 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y) 
# 1143
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1147
exit(___);}
#if 0
# 1143
{ 
# 1144
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1146
return (unsigned)(v.x); 
# 1147
} 
#endif
# 1149 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1150
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1154
exit(___);}
#if 0
# 1150
{ 
# 1151
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1153
return make_int1(v.x); 
# 1154
} 
#endif
# 1156 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1157
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1161
exit(___);}
#if 0
# 1157
{ 
# 1158
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1160
return make_uint1(v.x); 
# 1161
} 
#endif
# 1163 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1164
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1168
exit(___);}
#if 0
# 1164
{ 
# 1165
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1167
return make_int2(v.x, v.y); 
# 1168
} 
#endif
# 1170 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1171
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1175
exit(___);}
#if 0
# 1171
{ 
# 1172
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1174
return make_uint2(v.x, v.y); 
# 1175
} 
#endif
# 1177 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1178
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1182
exit(___);}
#if 0
# 1178
{ 
# 1179
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1181
return make_int4(v.x, v.y, v.z, v.w); 
# 1182
} 
#endif
# 1184 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1185
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1189
exit(___);}
#if 0
# 1185
{ 
# 1186
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1188
return make_uint4(v.x, v.y, v.z, v.w); 
# 1189
} 
#endif
# 1263 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< float, 2, cudaReadModeElementType>  t, float x, float y) 
# 1264
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1268
exit(___);}
#if 0
# 1264
{ 
# 1265
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1267
return v.x; 
# 1268
} 
#endif
# 1270 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1271
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1275
exit(___);}
#if 0
# 1271
{ 
# 1272
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1274
return make_float1(v.x); 
# 1275
} 
#endif
# 1277 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1278
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1282
exit(___);}
#if 0
# 1278
{ 
# 1279
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1281
return make_float2(v.x, v.y); 
# 1282
} 
#endif
# 1284 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1285
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1289
exit(___);}
#if 0
# 1285
{ 
# 1286
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1288
return make_float4(v.x, v.y, v.z, v.w); 
# 1289
} 
#endif
# 1297 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1298
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1307
exit(___);}
#if 0
# 1298
{ 
# 1302
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1306
return w.x; 
# 1307
} 
#endif
# 1309 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1310
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1315
exit(___);}
#if 0
# 1310
{ 
# 1311
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1314
return w.x; 
# 1315
} 
#endif
# 1317 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1318
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1323
exit(___);}
#if 0
# 1318
{ 
# 1319
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1322
return w.x; 
# 1323
} 
#endif
# 1325 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1326
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1331
exit(___);}
#if 0
# 1326
{ 
# 1327
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1328
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1330
return make_float1(w.x); 
# 1331
} 
#endif
# 1333 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1334
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1339
exit(___);}
#if 0
# 1334
{ 
# 1335
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1336
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1338
return make_float1(w.x); 
# 1339
} 
#endif
# 1341 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1342
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1347
exit(___);}
#if 0
# 1342
{ 
# 1343
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1344
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1346
return make_float2(w.x, w.y); 
# 1347
} 
#endif
# 1349 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1350
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1355
exit(___);}
#if 0
# 1350
{ 
# 1351
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1352
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1354
return make_float2(w.x, w.y); 
# 1355
} 
#endif
# 1357 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1358
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1363
exit(___);}
#if 0
# 1358
{ 
# 1359
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1360
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1362
return make_float4(w.x, w.y, w.z, w.w); 
# 1363
} 
#endif
# 1365 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1366
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1371
exit(___);}
#if 0
# 1366
{ 
# 1367
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1368
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1370
return make_float4(w.x, w.y, w.z, w.w); 
# 1371
} 
#endif
# 1379 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1380
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1385
exit(___);}
#if 0
# 1380
{ 
# 1381
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1382
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1384
return w.x; 
# 1385
} 
#endif
# 1387 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1388
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1393
exit(___);}
#if 0
# 1388
{ 
# 1389
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1390
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1392
return w.x; 
# 1393
} 
#endif
# 1395 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1396
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1401
exit(___);}
#if 0
# 1396
{ 
# 1397
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1398
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1400
return make_float1(w.x); 
# 1401
} 
#endif
# 1403 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1404
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1409
exit(___);}
#if 0
# 1404
{ 
# 1405
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1406
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1408
return make_float1(w.x); 
# 1409
} 
#endif
# 1411 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1412
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1417
exit(___);}
#if 0
# 1412
{ 
# 1413
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1414
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1416
return make_float2(w.x, w.y); 
# 1417
} 
#endif
# 1419 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1420
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1425
exit(___);}
#if 0
# 1420
{ 
# 1421
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1422
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1424
return make_float2(w.x, w.y); 
# 1425
} 
#endif
# 1427 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1428
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1433
exit(___);}
#if 0
# 1428
{ 
# 1429
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1430
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1432
return make_float4(w.x, w.y, w.z, w.w); 
# 1433
} 
#endif
# 1435 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1436
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1441
exit(___);}
#if 0
# 1436
{ 
# 1437
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1438
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1440
return make_float4(w.x, w.y, w.z, w.w); 
# 1441
} 
#endif
# 1449 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1DLayered(texture< char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1450
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1458
exit(___);}
#if 0
# 1450
{ 
# 1454
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1457
return (char)(v.x); 
# 1458
} 
#endif
# 1460 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1DLayered(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1461
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1465
exit(___);}
#if 0
# 1461
{ 
# 1462
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1464
return (signed char)(v.x); 
# 1465
} 
#endif
# 1467 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1DLayered(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1468
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1472
exit(___);}
#if 0
# 1468
{ 
# 1469
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1471
return (unsigned char)(v.x); 
# 1472
} 
#endif
# 1474 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1DLayered(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1475
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1479
exit(___);}
#if 0
# 1475
{ 
# 1476
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1478
return make_char1(v.x); 
# 1479
} 
#endif
# 1481 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1DLayered(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1482
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1486
exit(___);}
#if 0
# 1482
{ 
# 1483
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1485
return make_uchar1(v.x); 
# 1486
} 
#endif
# 1488 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1DLayered(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1489
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1493
exit(___);}
#if 0
# 1489
{ 
# 1490
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1492
return make_char2(v.x, v.y); 
# 1493
} 
#endif
# 1495 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1DLayered(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1496
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1500
exit(___);}
#if 0
# 1496
{ 
# 1497
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1499
return make_uchar2(v.x, v.y); 
# 1500
} 
#endif
# 1502 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1DLayered(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1503
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1507
exit(___);}
#if 0
# 1503
{ 
# 1504
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1506
return make_char4(v.x, v.y, v.z, v.w); 
# 1507
} 
#endif
# 1509 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1DLayered(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1510
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1514
exit(___);}
#if 0
# 1510
{ 
# 1511
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1513
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1514
} 
#endif
# 1522 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1DLayered(texture< short, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1523
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1527
exit(___);}
#if 0
# 1523
{ 
# 1524
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1526
return (short)(v.x); 
# 1527
} 
#endif
# 1529 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1DLayered(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1530
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1534
exit(___);}
#if 0
# 1530
{ 
# 1531
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1533
return (unsigned short)(v.x); 
# 1534
} 
#endif
# 1536 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1DLayered(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1537
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1541
exit(___);}
#if 0
# 1537
{ 
# 1538
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1540
return make_short1(v.x); 
# 1541
} 
#endif
# 1543 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1DLayered(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1544
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1548
exit(___);}
#if 0
# 1544
{ 
# 1545
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1547
return make_ushort1(v.x); 
# 1548
} 
#endif
# 1550 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1DLayered(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1551
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1555
exit(___);}
#if 0
# 1551
{ 
# 1552
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1554
return make_short2(v.x, v.y); 
# 1555
} 
#endif
# 1557 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1DLayered(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1558
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1562
exit(___);}
#if 0
# 1558
{ 
# 1559
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1561
return make_ushort2(v.x, v.y); 
# 1562
} 
#endif
# 1564 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1DLayered(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1565
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1569
exit(___);}
#if 0
# 1565
{ 
# 1566
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1568
return make_short4(v.x, v.y, v.z, v.w); 
# 1569
} 
#endif
# 1571 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1DLayered(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1572
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1576
exit(___);}
#if 0
# 1572
{ 
# 1573
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1575
return make_ushort4(v.x, v.y, v.z, v.w); 
# 1576
} 
#endif
# 1584 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1DLayered(texture< int, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1585
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1589
exit(___);}
#if 0
# 1585
{ 
# 1586
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1588
return (int)(v.x); 
# 1589
} 
#endif
# 1591 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1DLayered(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1592
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1596
exit(___);}
#if 0
# 1592
{ 
# 1593
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1595
return (unsigned)(v.x); 
# 1596
} 
#endif
# 1598 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1DLayered(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1599
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1603
exit(___);}
#if 0
# 1599
{ 
# 1600
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1602
return make_int1(v.x); 
# 1603
} 
#endif
# 1605 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1DLayered(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1606
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1610
exit(___);}
#if 0
# 1606
{ 
# 1607
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1609
return make_uint1(v.x); 
# 1610
} 
#endif
# 1612 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1DLayered(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1613
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1617
exit(___);}
#if 0
# 1613
{ 
# 1614
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1616
return make_int2(v.x, v.y); 
# 1617
} 
#endif
# 1619 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1DLayered(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1620
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1624
exit(___);}
#if 0
# 1620
{ 
# 1621
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1623
return make_uint2(v.x, v.y); 
# 1624
} 
#endif
# 1626 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1DLayered(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1627
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1631
exit(___);}
#if 0
# 1627
{ 
# 1628
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1630
return make_int4(v.x, v.y, v.z, v.w); 
# 1631
} 
#endif
# 1633 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1DLayered(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1634
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1638
exit(___);}
#if 0
# 1634
{ 
# 1635
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1637
return make_uint4(v.x, v.y, v.z, v.w); 
# 1638
} 
#endif
# 1712 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1DLayered(texture< float, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1713
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1717
exit(___);}
#if 0
# 1713
{ 
# 1714
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1716
return v.x; 
# 1717
} 
#endif
# 1719 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1DLayered(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1720
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1724
exit(___);}
#if 0
# 1720
{ 
# 1721
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1723
return make_float1(v.x); 
# 1724
} 
#endif
# 1726 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1DLayered(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1727
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1731
exit(___);}
#if 0
# 1727
{ 
# 1728
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1730
return make_float2(v.x, v.y); 
# 1731
} 
#endif
# 1733 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1DLayered(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1734
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1738
exit(___);}
#if 0
# 1734
{ 
# 1735
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1737
return make_float4(v.x, v.y, v.z, v.w); 
# 1738
} 
#endif
# 1746 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1DLayered(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1747
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1756
exit(___);}
#if 0
# 1747
{ 
# 1751
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1755
return w.x; 
# 1756
} 
#endif
# 1758 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1DLayered(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1759
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1764
exit(___);}
#if 0
# 1759
{ 
# 1760
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1763
return w.x; 
# 1764
} 
#endif
# 1766 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1DLayered(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1767
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1772
exit(___);}
#if 0
# 1767
{ 
# 1768
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1771
return w.x; 
# 1772
} 
#endif
# 1774 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1DLayered(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1775
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1780
exit(___);}
#if 0
# 1775
{ 
# 1776
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1777
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1779
return make_float1(w.x); 
# 1780
} 
#endif
# 1782 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1DLayered(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1783
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1788
exit(___);}
#if 0
# 1783
{ 
# 1784
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1785
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1787
return make_float1(w.x); 
# 1788
} 
#endif
# 1790 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1DLayered(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1791
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1796
exit(___);}
#if 0
# 1791
{ 
# 1792
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1793
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1795
return make_float2(w.x, w.y); 
# 1796
} 
#endif
# 1798 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1DLayered(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1799
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1804
exit(___);}
#if 0
# 1799
{ 
# 1800
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1801
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1803
return make_float2(w.x, w.y); 
# 1804
} 
#endif
# 1806 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1DLayered(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1807
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1812
exit(___);}
#if 0
# 1807
{ 
# 1808
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1809
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1811
return make_float4(w.x, w.y, w.z, w.w); 
# 1812
} 
#endif
# 1814 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1DLayered(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1815
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1820
exit(___);}
#if 0
# 1815
{ 
# 1816
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1817
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1819
return make_float4(w.x, w.y, w.z, w.w); 
# 1820
} 
#endif
# 1828 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1DLayered(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1829
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1834
exit(___);}
#if 0
# 1829
{ 
# 1830
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1831
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1833
return w.x; 
# 1834
} 
#endif
# 1836 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1DLayered(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1837
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1842
exit(___);}
#if 0
# 1837
{ 
# 1838
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1839
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1841
return w.x; 
# 1842
} 
#endif
# 1844 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1DLayered(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1845
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1850
exit(___);}
#if 0
# 1845
{ 
# 1846
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1847
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1849
return make_float1(w.x); 
# 1850
} 
#endif
# 1852 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1DLayered(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1853
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1858
exit(___);}
#if 0
# 1853
{ 
# 1854
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1857
return make_float1(w.x); 
# 1858
} 
#endif
# 1860 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1DLayered(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1861
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1866
exit(___);}
#if 0
# 1861
{ 
# 1862
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1865
return make_float2(w.x, w.y); 
# 1866
} 
#endif
# 1868 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1DLayered(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1869
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1874
exit(___);}
#if 0
# 1869
{ 
# 1870
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1873
return make_float2(w.x, w.y); 
# 1874
} 
#endif
# 1876 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1DLayered(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1877
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1882
exit(___);}
#if 0
# 1877
{ 
# 1878
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1879
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1881
return make_float4(w.x, w.y, w.z, w.w); 
# 1882
} 
#endif
# 1884 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1DLayered(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1885
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1890
exit(___);}
#if 0
# 1885
{ 
# 1886
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1887
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1889
return make_float4(w.x, w.y, w.z, w.w); 
# 1890
} 
#endif
# 1898 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex2DLayered(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1899
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1907
exit(___);}
#if 0
# 1899
{ 
# 1903
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1906
return (char)(v.x); 
# 1907
} 
#endif
# 1909 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex2DLayered(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1910
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1914
exit(___);}
#if 0
# 1910
{ 
# 1911
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1913
return (signed char)(v.x); 
# 1914
} 
#endif
# 1916 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex2DLayered(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1917
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1921
exit(___);}
#if 0
# 1917
{ 
# 1918
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1920
return (unsigned char)(v.x); 
# 1921
} 
#endif
# 1923 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex2DLayered(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1924
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1928
exit(___);}
#if 0
# 1924
{ 
# 1925
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1927
return make_char1(v.x); 
# 1928
} 
#endif
# 1930 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex2DLayered(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1931
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1935
exit(___);}
#if 0
# 1931
{ 
# 1932
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1934
return make_uchar1(v.x); 
# 1935
} 
#endif
# 1937 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex2DLayered(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1942
exit(___);}
#if 0
# 1938
{ 
# 1939
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1941
return make_char2(v.x, v.y); 
# 1942
} 
#endif
# 1944 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex2DLayered(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1945
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1949
exit(___);}
#if 0
# 1945
{ 
# 1946
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1948
return make_uchar2(v.x, v.y); 
# 1949
} 
#endif
# 1951 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2DLayered(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1952
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1956
exit(___);}
#if 0
# 1952
{ 
# 1953
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1955
return make_char4(v.x, v.y, v.z, v.w); 
# 1956
} 
#endif
# 1958 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2DLayered(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1959
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1963
exit(___);}
#if 0
# 1959
{ 
# 1960
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1962
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1963
} 
#endif
# 1971 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex2DLayered(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1972
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1976
exit(___);}
#if 0
# 1972
{ 
# 1973
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1975
return (short)(v.x); 
# 1976
} 
#endif
# 1978 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex2DLayered(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1979
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1983
exit(___);}
#if 0
# 1979
{ 
# 1980
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1982
return (unsigned short)(v.x); 
# 1983
} 
#endif
# 1985 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex2DLayered(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1986
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1990
exit(___);}
#if 0
# 1986
{ 
# 1987
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1989
return make_short1(v.x); 
# 1990
} 
#endif
# 1992 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex2DLayered(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1993
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1997
exit(___);}
#if 0
# 1993
{ 
# 1994
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1996
return make_ushort1(v.x); 
# 1997
} 
#endif
# 1999 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex2DLayered(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2004
exit(___);}
#if 0
# 2000
{ 
# 2001
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2003
return make_short2(v.x, v.y); 
# 2004
} 
#endif
# 2006 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex2DLayered(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2007
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2011
exit(___);}
#if 0
# 2007
{ 
# 2008
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2010
return make_ushort2(v.x, v.y); 
# 2011
} 
#endif
# 2013 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2DLayered(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2014
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2018
exit(___);}
#if 0
# 2014
{ 
# 2015
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2017
return make_short4(v.x, v.y, v.z, v.w); 
# 2018
} 
#endif
# 2020 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2DLayered(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2021
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2025
exit(___);}
#if 0
# 2021
{ 
# 2022
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2024
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2025
} 
#endif
# 2033 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex2DLayered(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2034
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2038
exit(___);}
#if 0
# 2034
{ 
# 2035
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2037
return (int)(v.x); 
# 2038
} 
#endif
# 2040 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex2DLayered(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2041
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2045
exit(___);}
#if 0
# 2041
{ 
# 2042
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2044
return (unsigned)(v.x); 
# 2045
} 
#endif
# 2047 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex2DLayered(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2048
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2052
exit(___);}
#if 0
# 2048
{ 
# 2049
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2051
return make_int1(v.x); 
# 2052
} 
#endif
# 2054 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex2DLayered(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2055
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2059
exit(___);}
#if 0
# 2055
{ 
# 2056
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2058
return make_uint1(v.x); 
# 2059
} 
#endif
# 2061 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex2DLayered(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2062
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2066
exit(___);}
#if 0
# 2062
{ 
# 2063
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2065
return make_int2(v.x, v.y); 
# 2066
} 
#endif
# 2068 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex2DLayered(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2069
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2073
exit(___);}
#if 0
# 2069
{ 
# 2070
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2072
return make_uint2(v.x, v.y); 
# 2073
} 
#endif
# 2075 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2DLayered(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2076
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2080
exit(___);}
#if 0
# 2076
{ 
# 2077
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2079
return make_int4(v.x, v.y, v.z, v.w); 
# 2080
} 
#endif
# 2082 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2DLayered(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2083
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2087
exit(___);}
#if 0
# 2083
{ 
# 2084
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2086
return make_uint4(v.x, v.y, v.z, v.w); 
# 2087
} 
#endif
# 2161 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2DLayered(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2162
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2166
exit(___);}
#if 0
# 2162
{ 
# 2163
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2165
return v.x; 
# 2166
} 
#endif
# 2168 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2DLayered(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2169
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2173
exit(___);}
#if 0
# 2169
{ 
# 2170
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2172
return make_float1(v.x); 
# 2173
} 
#endif
# 2175 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2DLayered(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2176
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2180
exit(___);}
#if 0
# 2176
{ 
# 2177
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2179
return make_float2(v.x, v.y); 
# 2180
} 
#endif
# 2182 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2DLayered(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2183
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2187
exit(___);}
#if 0
# 2183
{ 
# 2184
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2186
return make_float4(v.x, v.y, v.z, v.w); 
# 2187
} 
#endif
# 2195 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2DLayered(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2196
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2205
exit(___);}
#if 0
# 2196
{ 
# 2200
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2204
return w.x; 
# 2205
} 
#endif
# 2207 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2DLayered(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2213
exit(___);}
#if 0
# 2208
{ 
# 2209
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2212
return w.x; 
# 2213
} 
#endif
# 2215 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2DLayered(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2221
exit(___);}
#if 0
# 2216
{ 
# 2217
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2220
return w.x; 
# 2221
} 
#endif
# 2223 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2DLayered(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2229
exit(___);}
#if 0
# 2224
{ 
# 2225
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2226
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2228
return make_float1(w.x); 
# 2229
} 
#endif
# 2231 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2DLayered(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2232
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2237
exit(___);}
#if 0
# 2232
{ 
# 2233
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2234
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2236
return make_float1(w.x); 
# 2237
} 
#endif
# 2239 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2DLayered(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2245
exit(___);}
#if 0
# 2240
{ 
# 2241
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2242
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2244
return make_float2(w.x, w.y); 
# 2245
} 
#endif
# 2247 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2DLayered(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2248
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2253
exit(___);}
#if 0
# 2248
{ 
# 2249
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2250
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2252
return make_float2(w.x, w.y); 
# 2253
} 
#endif
# 2255 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2DLayered(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2256
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2261
exit(___);}
#if 0
# 2256
{ 
# 2257
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2258
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2260
return make_float4(w.x, w.y, w.z, w.w); 
# 2261
} 
#endif
# 2263 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2DLayered(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2264
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2269
exit(___);}
#if 0
# 2264
{ 
# 2265
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2266
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2268
return make_float4(w.x, w.y, w.z, w.w); 
# 2269
} 
#endif
# 2277 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2DLayered(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2283
exit(___);}
#if 0
# 2278
{ 
# 2279
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2280
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2282
return w.x; 
# 2283
} 
#endif
# 2285 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2DLayered(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2286
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2291
exit(___);}
#if 0
# 2286
{ 
# 2287
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2288
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2290
return w.x; 
# 2291
} 
#endif
# 2293 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2DLayered(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2294
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2299
exit(___);}
#if 0
# 2294
{ 
# 2295
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2296
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2298
return make_float1(w.x); 
# 2299
} 
#endif
# 2301 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2DLayered(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2302
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2307
exit(___);}
#if 0
# 2302
{ 
# 2303
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2306
return make_float1(w.x); 
# 2307
} 
#endif
# 2309 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2DLayered(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2310
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2315
exit(___);}
#if 0
# 2310
{ 
# 2311
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2314
return make_float2(w.x, w.y); 
# 2315
} 
#endif
# 2317 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2DLayered(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2318
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2323
exit(___);}
#if 0
# 2318
{ 
# 2319
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2322
return make_float2(w.x, w.y); 
# 2323
} 
#endif
# 2325 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2DLayered(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2326
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2331
exit(___);}
#if 0
# 2326
{ 
# 2327
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2328
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2330
return make_float4(w.x, w.y, w.z, w.w); 
# 2331
} 
#endif
# 2333 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2DLayered(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2334
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2339
exit(___);}
#if 0
# 2334
{ 
# 2335
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2336
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2338
return make_float4(w.x, w.y, w.z, w.w); 
# 2339
} 
#endif
# 2347 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex3D(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2348
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2356
exit(___);}
#if 0
# 2348
{ 
# 2352
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2355
return (char)(v.x); 
# 2356
} 
#endif
# 2358 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2359
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2363
exit(___);}
#if 0
# 2359
{ 
# 2360
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2362
return (signed char)(v.x); 
# 2363
} 
#endif
# 2365 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2366
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2370
exit(___);}
#if 0
# 2366
{ 
# 2367
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2369
return (unsigned char)(v.x); 
# 2370
} 
#endif
# 2372 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2373
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2377
exit(___);}
#if 0
# 2373
{ 
# 2374
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2376
return make_char1(v.x); 
# 2377
} 
#endif
# 2379 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2380
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2384
exit(___);}
#if 0
# 2380
{ 
# 2381
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2383
return make_uchar1(v.x); 
# 2384
} 
#endif
# 2386 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2387
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2391
exit(___);}
#if 0
# 2387
{ 
# 2388
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2390
return make_char2(v.x, v.y); 
# 2391
} 
#endif
# 2393 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2394
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2398
exit(___);}
#if 0
# 2394
{ 
# 2395
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2397
return make_uchar2(v.x, v.y); 
# 2398
} 
#endif
# 2400 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2401
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2405
exit(___);}
#if 0
# 2401
{ 
# 2402
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2404
return make_char4(v.x, v.y, v.z, v.w); 
# 2405
} 
#endif
# 2407 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2408
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2412
exit(___);}
#if 0
# 2408
{ 
# 2409
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2411
return make_uchar4(v.x, v.y, v.z, v.w); 
# 2412
} 
#endif
# 2420 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex3D(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2421
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2425
exit(___);}
#if 0
# 2421
{ 
# 2422
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2424
return (short)(v.x); 
# 2425
} 
#endif
# 2427 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2428
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2432
exit(___);}
#if 0
# 2428
{ 
# 2429
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2431
return (unsigned short)(v.x); 
# 2432
} 
#endif
# 2434 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2435
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2439
exit(___);}
#if 0
# 2435
{ 
# 2436
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2438
return make_short1(v.x); 
# 2439
} 
#endif
# 2441 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2442
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2446
exit(___);}
#if 0
# 2442
{ 
# 2443
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2445
return make_ushort1(v.x); 
# 2446
} 
#endif
# 2448 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2449
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2453
exit(___);}
#if 0
# 2449
{ 
# 2450
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2452
return make_short2(v.x, v.y); 
# 2453
} 
#endif
# 2455 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2456
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2460
exit(___);}
#if 0
# 2456
{ 
# 2457
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2459
return make_ushort2(v.x, v.y); 
# 2460
} 
#endif
# 2462 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2463
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2467
exit(___);}
#if 0
# 2463
{ 
# 2464
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2466
return make_short4(v.x, v.y, v.z, v.w); 
# 2467
} 
#endif
# 2469 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2470
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2474
exit(___);}
#if 0
# 2470
{ 
# 2471
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2473
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2474
} 
#endif
# 2482 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex3D(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2483
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2487
exit(___);}
#if 0
# 2483
{ 
# 2484
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2486
return (int)(v.x); 
# 2487
} 
#endif
# 2489 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2490
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2494
exit(___);}
#if 0
# 2490
{ 
# 2491
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2493
return (unsigned)(v.x); 
# 2494
} 
#endif
# 2496 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2497
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2501
exit(___);}
#if 0
# 2497
{ 
# 2498
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2500
return make_int1(v.x); 
# 2501
} 
#endif
# 2503 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2504
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2508
exit(___);}
#if 0
# 2504
{ 
# 2505
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2507
return make_uint1(v.x); 
# 2508
} 
#endif
# 2510 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2511
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2515
exit(___);}
#if 0
# 2511
{ 
# 2512
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2514
return make_int2(v.x, v.y); 
# 2515
} 
#endif
# 2517 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2518
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2522
exit(___);}
#if 0
# 2518
{ 
# 2519
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2521
return make_uint2(v.x, v.y); 
# 2522
} 
#endif
# 2524 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2525
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2529
exit(___);}
#if 0
# 2525
{ 
# 2526
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2528
return make_int4(v.x, v.y, v.z, v.w); 
# 2529
} 
#endif
# 2531 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2532
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2536
exit(___);}
#if 0
# 2532
{ 
# 2533
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2535
return make_uint4(v.x, v.y, v.z, v.w); 
# 2536
} 
#endif
# 2610 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2611
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2615
exit(___);}
#if 0
# 2611
{ 
# 2612
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2614
return v.x; 
# 2615
} 
#endif
# 2617 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2618
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2622
exit(___);}
#if 0
# 2618
{ 
# 2619
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2621
return make_float1(v.x); 
# 2622
} 
#endif
# 2624 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2625
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2629
exit(___);}
#if 0
# 2625
{ 
# 2626
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2628
return make_float2(v.x, v.y); 
# 2629
} 
#endif
# 2631 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2632
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2636
exit(___);}
#if 0
# 2632
{ 
# 2633
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2635
return make_float4(v.x, v.y, v.z, v.w); 
# 2636
} 
#endif
# 2644 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2645
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2654
exit(___);}
#if 0
# 2645
{ 
# 2649
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2653
return w.x; 
# 2654
} 
#endif
# 2656 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2662
exit(___);}
#if 0
# 2657
{ 
# 2658
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2661
return w.x; 
# 2662
} 
#endif
# 2664 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2670
exit(___);}
#if 0
# 2665
{ 
# 2666
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2669
return w.x; 
# 2670
} 
#endif
# 2672 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2678
exit(___);}
#if 0
# 2673
{ 
# 2674
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2675
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2677
return make_float1(w.x); 
# 2678
} 
#endif
# 2680 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2686
exit(___);}
#if 0
# 2681
{ 
# 2682
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2683
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2685
return make_float1(w.x); 
# 2686
} 
#endif
# 2688 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2689
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2694
exit(___);}
#if 0
# 2689
{ 
# 2690
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2691
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2693
return make_float2(w.x, w.y); 
# 2694
} 
#endif
# 2696 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2697
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2702
exit(___);}
#if 0
# 2697
{ 
# 2698
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2699
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2701
return make_float2(w.x, w.y); 
# 2702
} 
#endif
# 2704 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2705
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2710
exit(___);}
#if 0
# 2705
{ 
# 2706
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2707
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2709
return make_float4(w.x, w.y, w.z, w.w); 
# 2710
} 
#endif
# 2712 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2713
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2718
exit(___);}
#if 0
# 2713
{ 
# 2714
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2715
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2717
return make_float4(w.x, w.y, w.z, w.w); 
# 2718
} 
#endif
# 2726 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2727
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2732
exit(___);}
#if 0
# 2727
{ 
# 2728
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2729
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2731
return w.x; 
# 2732
} 
#endif
# 2734 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2735
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2740
exit(___);}
#if 0
# 2735
{ 
# 2736
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2737
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2739
return w.x; 
# 2740
} 
#endif
# 2742 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2743
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2748
exit(___);}
#if 0
# 2743
{ 
# 2744
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2745
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2747
return make_float1(w.x); 
# 2748
} 
#endif
# 2750 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2751
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2756
exit(___);}
#if 0
# 2751
{ 
# 2752
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2755
return make_float1(w.x); 
# 2756
} 
#endif
# 2758 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2764
exit(___);}
#if 0
# 2759
{ 
# 2760
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2763
return make_float2(w.x, w.y); 
# 2764
} 
#endif
# 2766 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2767
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2772
exit(___);}
#if 0
# 2767
{ 
# 2768
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2771
return make_float2(w.x, w.y); 
# 2772
} 
#endif
# 2774 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2775
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2780
exit(___);}
#if 0
# 2775
{ 
# 2776
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2777
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2779
return make_float4(w.x, w.y, w.z, w.w); 
# 2780
} 
#endif
# 2782 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2783
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2788
exit(___);}
#if 0
# 2783
{ 
# 2784
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2785
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2787
return make_float4(w.x, w.y, w.z, w.w); 
# 2788
} 
#endif
# 2796 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char texCubemap(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2797
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2805
exit(___);}
#if 0
# 2797
{ 
# 2801
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2804
return (char)(v.x); 
# 2805
} 
#endif
# 2807 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char texCubemap(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2808
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2812
exit(___);}
#if 0
# 2808
{ 
# 2809
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2811
return (signed char)(v.x); 
# 2812
} 
#endif
# 2814 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char texCubemap(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2815
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2819
exit(___);}
#if 0
# 2815
{ 
# 2816
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2818
return (unsigned char)(v.x); 
# 2819
} 
#endif
# 2821 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 texCubemap(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2822
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2826
exit(___);}
#if 0
# 2822
{ 
# 2823
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2825
return make_char1(v.x); 
# 2826
} 
#endif
# 2828 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 texCubemap(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2829
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2833
exit(___);}
#if 0
# 2829
{ 
# 2830
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2832
return make_uchar1(v.x); 
# 2833
} 
#endif
# 2835 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 texCubemap(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2836
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2840
exit(___);}
#if 0
# 2836
{ 
# 2837
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2839
return make_char2(v.x, v.y); 
# 2840
} 
#endif
# 2842 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 texCubemap(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2847
exit(___);}
#if 0
# 2843
{ 
# 2844
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2846
return make_uchar2(v.x, v.y); 
# 2847
} 
#endif
# 2849 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 texCubemap(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2854
exit(___);}
#if 0
# 2850
{ 
# 2851
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2853
return make_char4(v.x, v.y, v.z, v.w); 
# 2854
} 
#endif
# 2856 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 texCubemap(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2861
exit(___);}
#if 0
# 2857
{ 
# 2858
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2860
return make_uchar4(v.x, v.y, v.z, v.w); 
# 2861
} 
#endif
# 2869 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short texCubemap(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2870
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2874
exit(___);}
#if 0
# 2870
{ 
# 2871
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2873
return (short)(v.x); 
# 2874
} 
#endif
# 2876 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short texCubemap(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2877
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2881
exit(___);}
#if 0
# 2877
{ 
# 2878
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2880
return (unsigned short)(v.x); 
# 2881
} 
#endif
# 2883 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 texCubemap(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2884
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2888
exit(___);}
#if 0
# 2884
{ 
# 2885
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2887
return make_short1(v.x); 
# 2888
} 
#endif
# 2890 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 texCubemap(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2891
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2895
exit(___);}
#if 0
# 2891
{ 
# 2892
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2894
return make_ushort1(v.x); 
# 2895
} 
#endif
# 2897 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 texCubemap(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2902
exit(___);}
#if 0
# 2898
{ 
# 2899
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2901
return make_short2(v.x, v.y); 
# 2902
} 
#endif
# 2904 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 texCubemap(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2905
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2909
exit(___);}
#if 0
# 2905
{ 
# 2906
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2908
return make_ushort2(v.x, v.y); 
# 2909
} 
#endif
# 2911 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 texCubemap(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2912
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2916
exit(___);}
#if 0
# 2912
{ 
# 2913
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2915
return make_short4(v.x, v.y, v.z, v.w); 
# 2916
} 
#endif
# 2918 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 texCubemap(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2919
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2923
exit(___);}
#if 0
# 2919
{ 
# 2920
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2922
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2923
} 
#endif
# 2931 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int texCubemap(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2932
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2936
exit(___);}
#if 0
# 2932
{ 
# 2933
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2935
return (int)(v.x); 
# 2936
} 
#endif
# 2938 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned texCubemap(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2939
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2943
exit(___);}
#if 0
# 2939
{ 
# 2940
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2942
return (unsigned)(v.x); 
# 2943
} 
#endif
# 2945 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 texCubemap(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2950
exit(___);}
#if 0
# 2946
{ 
# 2947
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2949
return make_int1(v.x); 
# 2950
} 
#endif
# 2952 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 texCubemap(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2953
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2957
exit(___);}
#if 0
# 2953
{ 
# 2954
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2956
return make_uint1(v.x); 
# 2957
} 
#endif
# 2959 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 texCubemap(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2960
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2964
exit(___);}
#if 0
# 2960
{ 
# 2961
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2963
return make_int2(v.x, v.y); 
# 2964
} 
#endif
# 2966 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 texCubemap(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2967
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2971
exit(___);}
#if 0
# 2967
{ 
# 2968
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2970
return make_uint2(v.x, v.y); 
# 2971
} 
#endif
# 2973 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 texCubemap(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2974
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2978
exit(___);}
#if 0
# 2974
{ 
# 2975
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2977
return make_int4(v.x, v.y, v.z, v.w); 
# 2978
} 
#endif
# 2980 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 texCubemap(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2981
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2985
exit(___);}
#if 0
# 2981
{ 
# 2982
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2984
return make_uint4(v.x, v.y, v.z, v.w); 
# 2985
} 
#endif
# 3059 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemap(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3060
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3064
exit(___);}
#if 0
# 3060
{ 
# 3061
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3063
return v.x; 
# 3064
} 
#endif
# 3066 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemap(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3067
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3071
exit(___);}
#if 0
# 3067
{ 
# 3068
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3070
return make_float1(v.x); 
# 3071
} 
#endif
# 3073 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemap(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3074
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3078
exit(___);}
#if 0
# 3074
{ 
# 3075
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3077
return make_float2(v.x, v.y); 
# 3078
} 
#endif
# 3080 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemap(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3081
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3085
exit(___);}
#if 0
# 3081
{ 
# 3082
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3084
return make_float4(v.x, v.y, v.z, v.w); 
# 3085
} 
#endif
# 3093 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemap(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3094
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3103
exit(___);}
#if 0
# 3094
{ 
# 3098
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3100
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3102
return w.x; 
# 3103
} 
#endif
# 3105 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemap(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3106
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3111
exit(___);}
#if 0
# 3106
{ 
# 3107
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3108
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3110
return w.x; 
# 3111
} 
#endif
# 3113 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemap(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3114
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3119
exit(___);}
#if 0
# 3114
{ 
# 3115
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3116
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3118
return w.x; 
# 3119
} 
#endif
# 3121 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemap(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3122
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3127
exit(___);}
#if 0
# 3122
{ 
# 3123
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3124
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3126
return make_float1(w.x); 
# 3127
} 
#endif
# 3129 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemap(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3135
exit(___);}
#if 0
# 3130
{ 
# 3131
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3132
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3134
return make_float1(w.x); 
# 3135
} 
#endif
# 3137 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemap(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3138
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3143
exit(___);}
#if 0
# 3138
{ 
# 3139
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3140
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3142
return make_float2(w.x, w.y); 
# 3143
} 
#endif
# 3145 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemap(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3146
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3151
exit(___);}
#if 0
# 3146
{ 
# 3147
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3148
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3150
return make_float2(w.x, w.y); 
# 3151
} 
#endif
# 3153 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemap(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3154
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3159
exit(___);}
#if 0
# 3154
{ 
# 3155
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3156
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3158
return make_float4(w.x, w.y, w.z, w.w); 
# 3159
} 
#endif
# 3161 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemap(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3162
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3167
exit(___);}
#if 0
# 3162
{ 
# 3163
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3164
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3166
return make_float4(w.x, w.y, w.z, w.w); 
# 3167
} 
#endif
# 3175 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemap(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3176
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3181
exit(___);}
#if 0
# 3176
{ 
# 3177
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3178
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3180
return w.x; 
# 3181
} 
#endif
# 3183 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemap(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3184
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3189
exit(___);}
#if 0
# 3184
{ 
# 3185
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3186
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3188
return w.x; 
# 3189
} 
#endif
# 3191 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemap(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3197
exit(___);}
#if 0
# 3192
{ 
# 3193
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3194
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3196
return make_float1(w.x); 
# 3197
} 
#endif
# 3199 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemap(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3200
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3205
exit(___);}
#if 0
# 3200
{ 
# 3201
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3204
return make_float1(w.x); 
# 3205
} 
#endif
# 3207 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemap(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3213
exit(___);}
#if 0
# 3208
{ 
# 3209
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3212
return make_float2(w.x, w.y); 
# 3213
} 
#endif
# 3215 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemap(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3221
exit(___);}
#if 0
# 3216
{ 
# 3217
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3220
return make_float2(w.x, w.y); 
# 3221
} 
#endif
# 3223 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemap(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3229
exit(___);}
#if 0
# 3224
{ 
# 3225
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3226
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3228
return make_float4(w.x, w.y, w.z, w.w); 
# 3229
} 
#endif
# 3231 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemap(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3232
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3237
exit(___);}
#if 0
# 3232
{ 
# 3233
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3234
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3236
return make_float4(w.x, w.y, w.z, w.w); 
# 3237
} 
#endif
# 3245 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char texCubemapLayered(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3246
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3254
exit(___);}
#if 0
# 3246
{ 
# 3250
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3253
return (char)(v.x); 
# 3254
} 
#endif
# 3256 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char texCubemapLayered(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3257
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3261
exit(___);}
#if 0
# 3257
{ 
# 3258
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3260
return (signed char)(v.x); 
# 3261
} 
#endif
# 3263 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char texCubemapLayered(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3264
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3268
exit(___);}
#if 0
# 3264
{ 
# 3265
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3267
return (unsigned char)(v.x); 
# 3268
} 
#endif
# 3270 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 texCubemapLayered(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3271
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3275
exit(___);}
#if 0
# 3271
{ 
# 3272
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3274
return make_char1(v.x); 
# 3275
} 
#endif
# 3277 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 texCubemapLayered(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3282
exit(___);}
#if 0
# 3278
{ 
# 3279
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3281
return make_uchar1(v.x); 
# 3282
} 
#endif
# 3284 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 texCubemapLayered(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3285
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3289
exit(___);}
#if 0
# 3285
{ 
# 3286
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3288
return make_char2(v.x, v.y); 
# 3289
} 
#endif
# 3291 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 texCubemapLayered(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3292
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3296
exit(___);}
#if 0
# 3292
{ 
# 3293
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3295
return make_uchar2(v.x, v.y); 
# 3296
} 
#endif
# 3298 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 texCubemapLayered(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3299
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3303
exit(___);}
#if 0
# 3299
{ 
# 3300
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3302
return make_char4(v.x, v.y, v.z, v.w); 
# 3303
} 
#endif
# 3305 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 texCubemapLayered(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3306
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3310
exit(___);}
#if 0
# 3306
{ 
# 3307
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3309
return make_uchar4(v.x, v.y, v.z, v.w); 
# 3310
} 
#endif
# 3318 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short texCubemapLayered(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3319
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3323
exit(___);}
#if 0
# 3319
{ 
# 3320
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3322
return (short)(v.x); 
# 3323
} 
#endif
# 3325 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short texCubemapLayered(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3326
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3330
exit(___);}
#if 0
# 3326
{ 
# 3327
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3329
return (unsigned short)(v.x); 
# 3330
} 
#endif
# 3332 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 texCubemapLayered(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3333
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3337
exit(___);}
#if 0
# 3333
{ 
# 3334
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3336
return make_short1(v.x); 
# 3337
} 
#endif
# 3339 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 texCubemapLayered(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3340
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3344
exit(___);}
#if 0
# 3340
{ 
# 3341
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3343
return make_ushort1(v.x); 
# 3344
} 
#endif
# 3346 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 texCubemapLayered(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3347
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3351
exit(___);}
#if 0
# 3347
{ 
# 3348
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3350
return make_short2(v.x, v.y); 
# 3351
} 
#endif
# 3353 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 texCubemapLayered(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3358
exit(___);}
#if 0
# 3354
{ 
# 3355
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3357
return make_ushort2(v.x, v.y); 
# 3358
} 
#endif
# 3360 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 texCubemapLayered(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3361
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3365
exit(___);}
#if 0
# 3361
{ 
# 3362
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3364
return make_short4(v.x, v.y, v.z, v.w); 
# 3365
} 
#endif
# 3367 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 texCubemapLayered(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3368
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3372
exit(___);}
#if 0
# 3368
{ 
# 3369
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3371
return make_ushort4(v.x, v.y, v.z, v.w); 
# 3372
} 
#endif
# 3380 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int texCubemapLayered(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3381
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3385
exit(___);}
#if 0
# 3381
{ 
# 3382
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3384
return (int)(v.x); 
# 3385
} 
#endif
# 3387 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned texCubemapLayered(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3388
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3392
exit(___);}
#if 0
# 3388
{ 
# 3389
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3391
return (unsigned)(v.x); 
# 3392
} 
#endif
# 3394 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 texCubemapLayered(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3395
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3399
exit(___);}
#if 0
# 3395
{ 
# 3396
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3398
return make_int1(v.x); 
# 3399
} 
#endif
# 3401 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 texCubemapLayered(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3402
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3406
exit(___);}
#if 0
# 3402
{ 
# 3403
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3405
return make_uint1(v.x); 
# 3406
} 
#endif
# 3408 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 texCubemapLayered(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3409
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3413
exit(___);}
#if 0
# 3409
{ 
# 3410
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3412
return make_int2(v.x, v.y); 
# 3413
} 
#endif
# 3415 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 texCubemapLayered(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3416
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3420
exit(___);}
#if 0
# 3416
{ 
# 3417
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3419
return make_uint2(v.x, v.y); 
# 3420
} 
#endif
# 3422 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 texCubemapLayered(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3423
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3427
exit(___);}
#if 0
# 3423
{ 
# 3424
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3426
return make_int4(v.x, v.y, v.z, v.w); 
# 3427
} 
#endif
# 3429 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 texCubemapLayered(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3430
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3434
exit(___);}
#if 0
# 3430
{ 
# 3431
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3433
return make_uint4(v.x, v.y, v.z, v.w); 
# 3434
} 
#endif
# 3508 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemapLayered(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3509
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3513
exit(___);}
#if 0
# 3509
{ 
# 3510
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3512
return v.x; 
# 3513
} 
#endif
# 3515 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemapLayered(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3520
exit(___);}
#if 0
# 3516
{ 
# 3517
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3519
return make_float1(v.x); 
# 3520
} 
#endif
# 3522 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemapLayered(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3523
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3527
exit(___);}
#if 0
# 3523
{ 
# 3524
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3526
return make_float2(v.x, v.y); 
# 3527
} 
#endif
# 3529 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemapLayered(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3530
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3534
exit(___);}
#if 0
# 3530
{ 
# 3531
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3533
return make_float4(v.x, v.y, v.z, v.w); 
# 3534
} 
#endif
# 3542 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemapLayered(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3552
exit(___);}
#if 0
# 3543
{ 
# 3547
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3549
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3551
return w.x; 
# 3552
} 
#endif
# 3554 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemapLayered(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3555
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3560
exit(___);}
#if 0
# 3555
{ 
# 3556
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3557
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3559
return w.x; 
# 3560
} 
#endif
# 3562 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemapLayered(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3563
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3568
exit(___);}
#if 0
# 3563
{ 
# 3564
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3565
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3567
return w.x; 
# 3568
} 
#endif
# 3570 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemapLayered(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3576
exit(___);}
#if 0
# 3571
{ 
# 3572
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3573
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3575
return make_float1(w.x); 
# 3576
} 
#endif
# 3578 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemapLayered(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3579
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3584
exit(___);}
#if 0
# 3579
{ 
# 3580
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3581
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3583
return make_float1(w.x); 
# 3584
} 
#endif
# 3586 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemapLayered(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3587
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3592
exit(___);}
#if 0
# 3587
{ 
# 3588
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3589
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3591
return make_float2(w.x, w.y); 
# 3592
} 
#endif
# 3594 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemapLayered(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3600
exit(___);}
#if 0
# 3595
{ 
# 3596
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3597
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3599
return make_float2(w.x, w.y); 
# 3600
} 
#endif
# 3602 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemapLayered(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3603
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3608
exit(___);}
#if 0
# 3603
{ 
# 3604
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3605
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3607
return make_float4(w.x, w.y, w.z, w.w); 
# 3608
} 
#endif
# 3610 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemapLayered(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3611
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3616
exit(___);}
#if 0
# 3611
{ 
# 3612
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3613
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3615
return make_float4(w.x, w.y, w.z, w.w); 
# 3616
} 
#endif
# 3624 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemapLayered(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3625
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3630
exit(___);}
#if 0
# 3625
{ 
# 3626
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3627
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3629
return w.x; 
# 3630
} 
#endif
# 3632 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float texCubemapLayered(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3638
exit(___);}
#if 0
# 3633
{ 
# 3634
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3635
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3637
return w.x; 
# 3638
} 
#endif
# 3640 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemapLayered(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3646
exit(___);}
#if 0
# 3641
{ 
# 3642
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3643
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3645
return make_float1(w.x); 
# 3646
} 
#endif
# 3648 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 texCubemapLayered(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3649
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3654
exit(___);}
#if 0
# 3649
{ 
# 3650
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3653
return make_float1(w.x); 
# 3654
} 
#endif
# 3656 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemapLayered(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3662
exit(___);}
#if 0
# 3657
{ 
# 3658
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3661
return make_float2(w.x, w.y); 
# 3662
} 
#endif
# 3664 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 texCubemapLayered(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3670
exit(___);}
#if 0
# 3665
{ 
# 3666
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3669
return make_float2(w.x, w.y); 
# 3670
} 
#endif
# 3672 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemapLayered(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3678
exit(___);}
#if 0
# 3673
{ 
# 3674
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3675
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3677
return make_float4(w.x, w.y, w.z, w.w); 
# 3678
} 
#endif
# 3680 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 texCubemapLayered(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3686
exit(___);}
#if 0
# 3681
{ 
# 3682
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3683
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3685
return make_float4(w.x, w.y, w.z, w.w); 
# 3686
} 
#endif
# 3780 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3783
exit(___);}
#if 0
# 3781
{ 
# 3782
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3783
} 
#endif
# 3785 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3786
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3788
exit(___);}
#if 0
# 3786
{ 
# 3787
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3788
} 
#endif
# 3790 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3791
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3793
exit(___);}
#if 0
# 3791
{ 
# 3792
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
# 3793
} 
#endif
# 3795 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3796
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3798
exit(___);}
#if 0
# 3796
{ 
# 3797
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3798
} 
#endif
# 3800 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3801
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3803
exit(___);}
#if 0
# 3801
{ 
# 3802
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
# 3803
} 
#endif
# 3805 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3806
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3808
exit(___);}
#if 0
# 3806
{ 
# 3807
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  ; 
# 3808
} 
#endif
# 3810 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3811
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3813
exit(___);}
#if 0
# 3811
{ 
# 3812
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  ; 
# 3813
} 
#endif
# 3815 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3816
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3818
exit(___);}
#if 0
# 3816
{ 
# 3817
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  ; 
# 3818
} 
#endif
# 3820 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3821
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3823
exit(___);}
#if 0
# 3821
{ 
# 3822
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  ; 
# 3823
} 
#endif
# 3825 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3826
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3828
exit(___);}
#if 0
# 3826
{ 
# 3827
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3828
} 
#endif
# 3830 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3831
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3833
exit(___);}
#if 0
# 3831
{ 
# 3832
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3833
} 
#endif
# 3835 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3836
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3838
exit(___);}
#if 0
# 3836
{ 
# 3837
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
# 3838
} 
#endif
# 3840 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3841
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3843
exit(___);}
#if 0
# 3841
{ 
# 3842
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
# 3843
} 
#endif
# 3845 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3846
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3848
exit(___);}
#if 0
# 3846
{ 
# 3847
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
# 3848
} 
#endif
# 3850 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3851
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3853
exit(___);}
#if 0
# 3851
{ 
# 3852
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
# 3853
} 
#endif
# 3855 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3856
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3858
exit(___);}
#if 0
# 3856
{ 
# 3857
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  ; 
# 3858
} 
#endif
# 3860 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3861
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3863
exit(___);}
#if 0
# 3861
{ 
# 3862
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  ; 
# 3863
} 
#endif
# 3865 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3866
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3868
exit(___);}
#if 0
# 3866
{ 
# 3867
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  ; 
# 3868
} 
#endif
# 3870 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3871
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3873
exit(___);}
#if 0
# 3871
{ 
# 3872
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  ; 
# 3873
} 
#endif
# 3875 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3876
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3878
exit(___);}
#if 0
# 3876
{ 
# 3877
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3878
} 
#endif
# 3880 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3881
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3883
exit(___);}
#if 0
# 3881
{ 
# 3882
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3883
} 
#endif
# 3885 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3886
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3888
exit(___);}
#if 0
# 3886
{ 
# 3887
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3888
} 
#endif
# 3890 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3891
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3893
exit(___);}
#if 0
# 3891
{ 
# 3892
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3893
} 
#endif
# 3895 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3896
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3898
exit(___);}
#if 0
# 3896
{ 
# 3897
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3898
} 
#endif
# 3900 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3901
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3903
exit(___);}
#if 0
# 3901
{ 
# 3902
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3903
} 
#endif
# 3905 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3906
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3908
exit(___);}
#if 0
# 3906
{ 
# 3907
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3908
} 
#endif
# 3910 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3911
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3913
exit(___);}
#if 0
# 3911
{ 
# 3912
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3913
} 
#endif
# 3915 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3916
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3918
exit(___);}
#if 0
# 3916
{ 
# 3917
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3918
} 
#endif
# 3920 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3921
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3923
exit(___);}
#if 0
# 3921
{ 
# 3922
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3923
} 
#endif
# 3925 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3926
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3928
exit(___);}
#if 0
# 3926
{ 
# 3927
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3928
} 
#endif
# 3930 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3931
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3933
exit(___);}
#if 0
# 3931
{ 
# 3932
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3933
} 
#endif
# 3935 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3936
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3938
exit(___);}
#if 0
# 3936
{ 
# 3937
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3938
} 
#endif
# 3940 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3941
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3943
exit(___);}
#if 0
# 3941
{ 
# 3942
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3943
} 
#endif
# 3945 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3948
exit(___);}
#if 0
# 3946
{ 
# 3947
if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3948
} 
#endif
# 3950 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3951
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3953
exit(___);}
#if 0
# 3951
{ 
# 3952
if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3953
} 
#endif
# 3955 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 3956
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3958
exit(___);}
#if 0
# 3956
{ 
# 3957
if (comp == 3) { float4 v = __ftex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3958
} 
#endif
# 3967 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3968
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3970
exit(___);}
#if 0
# 3968
{ 
# 3969
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3970
} 
#endif
# 3972 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3973
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3975
exit(___);}
#if 0
# 3973
{ 
# 3974
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3975
} 
#endif
# 3977 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3980
exit(___);}
#if 0
# 3978
{ 
# 3979
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3980
} 
#endif
# 3982 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3983
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3985
exit(___);}
#if 0
# 3983
{ 
# 3984
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3985
} 
#endif
# 3987 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3988
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3990
exit(___);}
#if 0
# 3988
{ 
# 3989
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3990
} 
#endif
# 3992 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3993
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3995
exit(___);}
#if 0
# 3993
{ 
# 3994
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 3995
} 
#endif
# 3997 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 3998
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4000
exit(___);}
#if 0
# 3998
{ 
# 3999
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4000
} 
#endif
# 4002 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< char3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4003
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4005
exit(___);}
#if 0
# 4003
{ 
# 4004
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4005
} 
#endif
# 4007 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< uchar3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4008
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4010
exit(___);}
#if 0
# 4008
{ 
# 4009
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4010
} 
#endif
# 4012 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4013
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4015
exit(___);}
#if 0
# 4013
{ 
# 4014
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4015
} 
#endif
# 4017 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4018
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4020
exit(___);}
#if 0
# 4018
{ 
# 4019
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4020
} 
#endif
# 4022 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4023
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4025
exit(___);}
#if 0
# 4023
{ 
# 4024
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4025
} 
#endif
# 4027 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4028
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4030
exit(___);}
#if 0
# 4028
{ 
# 4029
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4030
} 
#endif
# 4032 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4033
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4035
exit(___);}
#if 0
# 4033
{ 
# 4034
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4035
} 
#endif
# 4037 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4038
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4040
exit(___);}
#if 0
# 4038
{ 
# 4039
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4040
} 
#endif
# 4042 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4043
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4045
exit(___);}
#if 0
# 4043
{ 
# 4044
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4045
} 
#endif
# 4047 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4048
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4050
exit(___);}
#if 0
# 4048
{ 
# 4049
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4050
} 
#endif
# 4052 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< short3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4053
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4055
exit(___);}
#if 0
# 4053
{ 
# 4054
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4055
} 
#endif
# 4057 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< ushort3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4058
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4060
exit(___);}
#if 0
# 4058
{ 
# 4059
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4060
} 
#endif
# 4062 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4063
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4065
exit(___);}
#if 0
# 4063
{ 
# 4064
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4065
} 
#endif
# 4067 "/home/bachelor/deicide218/cuda-4.2/include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 4068
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4070
exit(___);}
#if 0
# 4068
{ 
# 4069
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4070
} 
#endif
# 66 "/home/bachelor/deicide218/cuda-4.2/include/device_launch_parameters.h"
extern "C" { extern const uint3 threadIdx; } 
# 67
extern "C" { extern const uint3 blockIdx; } 
# 68
extern "C" { extern const dim3 blockDim; } 
# 69
extern "C" { extern const dim3 gridDim; } 
# 70
extern "C" { extern const int warpSize; } 
# 120 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 121
cudaSetupArgument(T 
# 122
arg, size_t 
# 123
offset) 
# 125
{ 
# 126
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
# 127
} 
# 159 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 160
event, unsigned 
# 161
flags) 
# 163
{ 
# 164
return cudaEventCreateWithFlags(event, flags); 
# 165
} 
# 222 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 223
ptr, size_t 
# 224
size, unsigned 
# 225
flags) 
# 227
{ 
# 228
return cudaHostAlloc(ptr, size, flags); 
# 229
} 
# 231
template< class T> inline cudaError_t 
# 232
cudaHostAlloc(T **
# 233
ptr, size_t 
# 234
size, unsigned 
# 235
flags) 
# 237
{ 
# 238
return cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 239
} 
# 241
template< class T> inline cudaError_t 
# 242
cudaHostGetDevicePointer(T **
# 243
pDevice, void *
# 244
pHost, unsigned 
# 245
flags) 
# 247
{ 
# 248
return cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 249
} 
# 251
template< class T> inline cudaError_t 
# 252
cudaMalloc(T **
# 253
devPtr, size_t 
# 254
size) 
# 256
{ 
# 257
return cudaMalloc((void **)((void *)devPtr), size); 
# 258
} 
# 260
template< class T> inline cudaError_t 
# 261
cudaMallocHost(T **
# 262
ptr, size_t 
# 263
size, unsigned 
# 264
flags = (0)) 
# 266
{ 
# 267
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 268
} 
# 270
template< class T> inline cudaError_t 
# 271
cudaMallocPitch(T **
# 272
devPtr, size_t *
# 273
pitch, size_t 
# 274
width, size_t 
# 275
height) 
# 277
{ 
# 278
return cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 279
} 
# 289 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbol(char *
# 290
symbol, const void *
# 291
src, size_t 
# 292
count, size_t 
# 293
offset = (0), cudaMemcpyKind 
# 294
kind = cudaMemcpyHostToDevice) 
# 296
{ 
# 297
return cudaMemcpyToSymbol((const char *)symbol, src, count, offset, kind); 
# 298
} 
# 300
template< class T> inline cudaError_t 
# 301
cudaMemcpyToSymbol(const T &
# 302
symbol, const void *
# 303
src, size_t 
# 304
count, size_t 
# 305
offset = (0), cudaMemcpyKind 
# 306
kind = cudaMemcpyHostToDevice) 
# 308
{ 
# 309
return cudaMemcpyToSymbol((const char *)(&symbol), src, count, offset, kind); 
# 310
} 
# 312
static inline cudaError_t cudaMemcpyToSymbolAsync(char *
# 313
symbol, const void *
# 314
src, size_t 
# 315
count, size_t 
# 316
offset = (0), cudaMemcpyKind 
# 317
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 318
stream = 0) 
# 320
{ 
# 321
return cudaMemcpyToSymbolAsync((const char *)symbol, src, count, offset, kind, stream); 
# 322
} 
# 324
template< class T> inline cudaError_t 
# 325
cudaMemcpyToSymbolAsync(const T &
# 326
symbol, const void *
# 327
src, size_t 
# 328
count, size_t 
# 329
offset = (0), cudaMemcpyKind 
# 330
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 331
stream = 0) 
# 333
{ 
# 334
return cudaMemcpyToSymbolAsync((const char *)(&symbol), src, count, offset, kind, stream); 
# 335
} 
# 343
static inline cudaError_t cudaMemcpyFromSymbol(void *
# 344
dst, char *
# 345
symbol, size_t 
# 346
count, size_t 
# 347
offset = (0), cudaMemcpyKind 
# 348
kind = cudaMemcpyDeviceToHost) 
# 350
{ 
# 351
return cudaMemcpyFromSymbol(dst, (const char *)symbol, count, offset, kind); 
# 352
} 
# 354
template< class T> inline cudaError_t 
# 355
cudaMemcpyFromSymbol(void *
# 356
dst, const T &
# 357
symbol, size_t 
# 358
count, size_t 
# 359
offset = (0), cudaMemcpyKind 
# 360
kind = cudaMemcpyDeviceToHost) 
# 362
{ 
# 363
return cudaMemcpyFromSymbol(dst, (const char *)(&symbol), count, offset, kind); 
# 364
} 
# 366
static inline cudaError_t cudaMemcpyFromSymbolAsync(void *
# 367
dst, char *
# 368
symbol, size_t 
# 369
count, size_t 
# 370
offset = (0), cudaMemcpyKind 
# 371
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 372
stream = 0) 
# 374
{ 
# 375
return cudaMemcpyFromSymbolAsync(dst, (const char *)symbol, count, offset, kind, stream); 
# 376
} 
# 378
template< class T> inline cudaError_t 
# 379
cudaMemcpyFromSymbolAsync(void *
# 380
dst, const T &
# 381
symbol, size_t 
# 382
count, size_t 
# 383
offset = (0), cudaMemcpyKind 
# 384
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 385
stream = 0) 
# 387
{ 
# 388
return cudaMemcpyFromSymbolAsync(dst, (const char *)(&symbol), count, offset, kind, stream); 
# 389
} 
# 391
static inline cudaError_t cudaGetSymbolAddress(void **
# 392
devPtr, char *
# 393
symbol) 
# 395
{ 
# 396
return cudaGetSymbolAddress(devPtr, (const char *)symbol); 
# 397
} 
# 424 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 425
cudaGetSymbolAddress(void **
# 426
devPtr, const T &
# 427
symbol) 
# 429
{ 
# 430
return cudaGetSymbolAddress(devPtr, (const char *)(&symbol)); 
# 431
} 
# 439
static inline cudaError_t cudaGetSymbolSize(size_t *
# 440
size, char *
# 441
symbol) 
# 443
{ 
# 444
return cudaGetSymbolSize(size, (const char *)symbol); 
# 445
} 
# 472 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 473
cudaGetSymbolSize(size_t *
# 474
size, const T &
# 475
symbol) 
# 477
{ 
# 478
return cudaGetSymbolSize(size, (const char *)(&symbol)); 
# 479
} 
# 521 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 522
cudaBindTexture(size_t *
# 523
offset, const texture< T, dim, readMode>  &
# 524
tex, const void *
# 525
devPtr, const cudaChannelFormatDesc &
# 526
desc, size_t 
# 527
size = (((2147483647) * 2U) + 1U)) 
# 529
{ 
# 530
return cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 531
} 
# 566 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 567
cudaBindTexture(size_t *
# 568
offset, const texture< T, dim, readMode>  &
# 569
tex, const void *
# 570
devPtr, size_t 
# 571
size = (((2147483647) * 2U) + 1U)) 
# 573
{ 
# 574
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 575
} 
# 622 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 623
cudaBindTexture2D(size_t *
# 624
offset, const texture< T, dim, readMode>  &
# 625
tex, const void *
# 626
devPtr, const cudaChannelFormatDesc &
# 627
desc, size_t 
# 628
width, size_t 
# 629
height, size_t 
# 630
pitch) 
# 632
{ 
# 633
return cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 634
} 
# 680 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 681
cudaBindTexture2D(size_t *
# 682
offset, const texture< T, dim, readMode>  &
# 683
tex, const void *
# 684
devPtr, size_t 
# 685
width, size_t 
# 686
height, size_t 
# 687
pitch) 
# 689
{ 
# 690
return cudaBindTexture2D(offset, &tex, devPtr, &(tex.texture< T, dim, readMode> ::channelDesc), width, height, pitch); 
# 691
} 
# 722 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 723
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 724
tex, const cudaArray *
# 725
array, const cudaChannelFormatDesc &
# 726
desc) 
# 728
{ 
# 729
return cudaBindTextureToArray(&tex, array, &desc); 
# 730
} 
# 760 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 761
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 762
tex, const cudaArray *
# 763
array) 
# 765
{ 
# 766
cudaChannelFormatDesc desc; 
# 767
cudaError_t err = cudaGetChannelDesc(&desc, array); 
# 769
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 770
} 
# 799 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 800
cudaUnbindTexture(const texture< T, dim, readMode>  &
# 801
tex) 
# 803
{ 
# 804
return cudaUnbindTexture(&tex); 
# 805
} 
# 839 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 840
cudaGetTextureAlignmentOffset(size_t *
# 841
offset, const texture< T, dim, readMode>  &
# 842
tex) 
# 844
{ 
# 845
return cudaGetTextureAlignmentOffset(offset, &tex); 
# 846
} 
# 900 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 901
cudaFuncSetCacheConfig(T *
# 902
func, cudaFuncCache 
# 903
cacheConfig) 
# 905
{ 
# 906
return cudaFuncSetCacheConfig((const char *)func, cacheConfig); 
# 907
} 
# 909
template< class T> inline cudaError_t 
# 910
cudaFuncSetSharedMemConfig(T *
# 911
func, cudaSharedMemConfig 
# 912
config) 
# 914
{ 
# 915
return cudaFuncSetSharedMemConfig((const char *)func, config); 
# 916
} 
# 953 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 954
cudaLaunch(T *
# 955
entry) 
# 957
{ 
# 958
return cudaLaunch((const char *)entry); 
# 959
} 
# 993 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 994
cudaFuncGetAttributes(cudaFuncAttributes *
# 995
attr, T *
# 996
entry) 
# 998
{ 
# 999
return cudaFuncGetAttributes(attr, (const char *)entry); 
# 1000
} 
# 1022 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t 
# 1023
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1024
surf, const cudaArray *
# 1025
array, const cudaChannelFormatDesc &
# 1026
desc) 
# 1028
{ 
# 1029
return cudaBindSurfaceToArray(&surf, array, &desc); 
# 1030
} 
# 1051 "/home/bachelor/deicide218/cuda-4.2/include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t 
# 1052
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1053
surf, const cudaArray *
# 1054
array) 
# 1056
{ 
# 1057
cudaChannelFormatDesc desc; 
# 1058
cudaError_t err = cudaGetChannelDesc(&desc, array); 
# 1060
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 1061
} 
# 45 "/usr/include/stdio.h" 3
struct _IO_FILE; 
# 49
extern "C" { typedef _IO_FILE FILE; }
# 65 "/usr/include/stdio.h" 3
extern "C" { typedef _IO_FILE __FILE; }
# 95 "/usr/include/wchar.h" 3
extern "C" { typedef 
# 84
struct { 
# 85
int __count; 
# 87
union { 
# 89
unsigned __wch; 
# 93
char __wchb[4]; 
# 94
} __value; 
# 95
} __mbstate_t; }
# 26 "/usr/include/_G_config.h" 3
extern "C" { typedef 
# 23
struct { 
# 24
__off_t __pos; 
# 25
__mbstate_t __state; 
# 26
} _G_fpos_t; }
# 31
extern "C" { typedef 
# 28
struct { 
# 29
__off64_t __pos; 
# 30
__mbstate_t __state; 
# 31
} _G_fpos64_t; }
# 53 "/usr/include/_G_config.h" 3
extern "C" { typedef short _G_int16_t __attribute((__mode__(__HI__))); }
# 54
extern "C" { typedef int _G_int32_t __attribute((__mode__(__SI__))); }
# 55
extern "C" { typedef unsigned short _G_uint16_t __attribute((__mode__(__HI__))); }
# 56
extern "C" { typedef unsigned _G_uint32_t __attribute((__mode__(__SI__))); }
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stdarg.h" 3
extern "C" { typedef __builtin_va_list __gnuc_va_list; }
# 170 "/usr/include/libio.h" 3
struct _IO_jump_t; struct _IO_FILE; 
# 180 "/usr/include/libio.h" 3
extern "C" { typedef void _IO_lock_t; }
# 186
extern "C" { struct _IO_marker { 
# 187
_IO_marker *_next; 
# 188
_IO_FILE *_sbuf; 
# 192
int _pos; 
# 203 "/usr/include/libio.h" 3
}; }
# 206
enum __codecvt_result { 
# 208
__codecvt_ok, 
# 209
__codecvt_partial, 
# 210
__codecvt_error, 
# 211
__codecvt_noconv
# 212
}; 
# 271 "/usr/include/libio.h" 3
extern "C" { struct _IO_FILE { 
# 272
int _flags; 
# 277
char *_IO_read_ptr; 
# 278
char *_IO_read_end; 
# 279
char *_IO_read_base; 
# 280
char *_IO_write_base; 
# 281
char *_IO_write_ptr; 
# 282
char *_IO_write_end; 
# 283
char *_IO_buf_base; 
# 284
char *_IO_buf_end; 
# 286
char *_IO_save_base; 
# 287
char *_IO_backup_base; 
# 288
char *_IO_save_end; 
# 290
_IO_marker *_markers; 
# 292
_IO_FILE *_chain; 
# 294
int _fileno; 
# 298
int _flags2; 
# 300
__off_t _old_offset; 
# 304
unsigned short _cur_column; 
# 305
signed char _vtable_offset; 
# 306
char _shortbuf[1]; 
# 310
_IO_lock_t *_lock; 
# 319 "/usr/include/libio.h" 3
__off64_t _offset; 
# 328 "/usr/include/libio.h" 3
void *__pad1; 
# 329
void *__pad2; 
# 330
void *__pad3; 
# 331
void *__pad4; 
# 332
size_t __pad5; 
# 334
int _mode; 
# 336
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 338
}; }
# 344
struct _IO_FILE_plus; 
# 346
extern "C" { extern _IO_FILE_plus _IO_2_1_stdin_; } 
# 347
extern "C" { extern _IO_FILE_plus _IO_2_1_stdout_; } 
# 348
extern "C" { extern _IO_FILE_plus _IO_2_1_stderr_; } 
# 364 "/usr/include/libio.h" 3
extern "C" { typedef __ssize_t __io_read_fn(void * , char * , size_t ); }
# 372
extern "C" { typedef __ssize_t __io_write_fn(void * , const char * , size_t ); }
# 381
extern "C" { typedef int __io_seek_fn(void * , __off64_t * , int ); }
# 384
extern "C" { typedef int __io_close_fn(void * ); }
# 389
extern "C" { typedef __io_read_fn cookie_read_function_t; }
# 390
extern "C" { typedef __io_write_fn cookie_write_function_t; }
# 391
extern "C" { typedef __io_seek_fn cookie_seek_function_t; }
# 392
extern "C" { typedef __io_close_fn cookie_close_function_t; }
# 401
extern "C" { typedef 
# 396
struct { 
# 397
__io_read_fn *read; 
# 398
__io_write_fn *write; 
# 399
__io_seek_fn *seek; 
# 400
__io_close_fn *close; 
# 401
} _IO_cookie_io_functions_t; }
# 402
extern "C" { typedef _IO_cookie_io_functions_t cookie_io_functions_t; }
# 404
struct _IO_cookie_file; 
# 407
extern "C" void _IO_cookie_init(_IO_cookie_file * , int , void * , _IO_cookie_io_functions_t ); 
# 416
extern "C" int __underflow(_IO_FILE *); 
# 417
extern "C" int __uflow(_IO_FILE *); 
# 418
extern "C" int __overflow(_IO_FILE *, int); 
# 460 "/usr/include/libio.h" 3
extern "C" int _IO_getc(_IO_FILE * ); 
# 461
extern "C" int _IO_putc(int , _IO_FILE * ); 
# 462
extern "C" int _IO_feof(_IO_FILE * ) throw(); 
# 463
extern "C" int _IO_ferror(_IO_FILE * ) throw(); 
# 465
extern "C" int _IO_peekc_locked(_IO_FILE * ); 
# 471
extern "C" void _IO_flockfile(_IO_FILE *) throw(); 
# 472
extern "C" void _IO_funlockfile(_IO_FILE *) throw(); 
# 473
extern "C" int _IO_ftrylockfile(_IO_FILE *) throw(); 
# 490 "/usr/include/libio.h" 3
extern "C" int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__); 
# 492
extern "C" int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list); 
# 494
extern "C" __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t); 
# 495
extern "C" size_t _IO_sgetn(_IO_FILE *, void *, size_t); 
# 497
extern "C" __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int); 
# 498
extern "C" __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int); 
# 500
extern "C" void _IO_free_backup_area(_IO_FILE *) throw(); 
# 80 "/usr/include/stdio.h" 3
extern "C" { typedef __gnuc_va_list va_list; }
# 111 "/usr/include/stdio.h" 3
extern "C" { typedef _G_fpos_t fpos_t; }
# 117
extern "C" { typedef _G_fpos64_t fpos64_t; }
# 165 "/usr/include/stdio.h" 3
extern "C" { extern _IO_FILE *stdin; } 
# 166
extern "C" { extern _IO_FILE *stdout; } 
# 167
extern "C" { extern _IO_FILE *stderr; } 
# 175
extern "C" int remove(const char * ) throw(); 
# 177
extern "C" int rename(const char * , const char * ) throw(); 
# 182
extern "C" int renameat(int , const char * , int , const char * ) throw(); 
# 192
extern "C" FILE *tmpfile(); 
# 202 "/usr/include/stdio.h" 3
extern "C" FILE *tmpfile64(); 
# 206
extern "C" char *tmpnam(char * ) throw(); 
# 212
extern "C" char *tmpnam_r(char * ) throw(); 
# 224 "/usr/include/stdio.h" 3
extern "C" char *tempnam(const char * , const char * ) throw()
# 225
 __attribute((__malloc__)); 
# 234
extern "C" int fclose(FILE * ); 
# 239
extern "C" int fflush(FILE * ); 
# 249 "/usr/include/stdio.h" 3
extern "C" int fflush_unlocked(FILE * ); 
# 259 "/usr/include/stdio.h" 3
extern "C" int fcloseall(); 
# 269
extern "C" FILE *fopen(const char *__restrict__ , const char *__restrict__ ); 
# 275
extern "C" FILE *freopen(const char *__restrict__ , const char *__restrict__ , FILE *__restrict__ ); 
# 294 "/usr/include/stdio.h" 3
extern "C" FILE *fopen64(const char *__restrict__ , const char *__restrict__ ); 
# 296
extern "C" FILE *freopen64(const char *__restrict__ , const char *__restrict__ , FILE *__restrict__ ); 
# 303
extern "C" FILE *fdopen(int , const char * ) throw(); 
# 309
extern "C" FILE *fopencookie(void *__restrict__ , const char *__restrict__ , _IO_cookie_io_functions_t ) throw(); 
# 316
extern "C" FILE *fmemopen(void * , size_t , const char * ) throw(); 
# 322
extern "C" FILE *open_memstream(char ** , size_t * ) throw(); 
# 329
extern "C" void setbuf(FILE *__restrict__ , char *__restrict__ ) throw(); 
# 333
extern "C" int setvbuf(FILE *__restrict__ , char *__restrict__ , int , size_t ) throw(); 
# 340
extern "C" void setbuffer(FILE *__restrict__ , char *__restrict__ , size_t ) throw(); 
# 344
extern "C" void setlinebuf(FILE * ) throw(); 
# 353
extern "C" int fprintf(FILE *__restrict__ , const char *__restrict__ , ...); 
# 359
extern "C" int printf(const char *__restrict__ , ...); 
# 361
extern "C" int sprintf(char *__restrict__ , const char *__restrict__ , ...) throw(); 
# 368
extern "C" int vfprintf(FILE *__restrict__ , const char *__restrict__ , __gnuc_va_list ); 
# 374
extern "C" { extern __attribute((gnu_inline)) inline int vprintf(const char *__restrict__ , __gnuc_va_list ); } 
# 376
extern "C" int vsprintf(char *__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw(); 
# 383
extern "C" int snprintf(char *__restrict__ , size_t , const char *__restrict__ , ...) throw()
# 385
 __attribute((__format__(__printf__, 3, 4))); 
# 387
extern "C" int vsnprintf(char *__restrict__ , size_t , const char *__restrict__ , __gnuc_va_list ) throw()
# 389
 __attribute((__format__(__printf__, 3, 0))); 
# 396
extern "C" int vasprintf(char **__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw()
# 398
 __attribute((__format__(__printf__, 2, 0))); 
# 399
extern "C" int __asprintf(char **__restrict__ , const char *__restrict__ , ...) throw()
# 401
 __attribute((__format__(__printf__, 2, 3))); 
# 402
extern "C" int asprintf(char **__restrict__ , const char *__restrict__ , ...) throw()
# 404
 __attribute((__format__(__printf__, 2, 3))); 
# 414 "/usr/include/stdio.h" 3
extern "C" int vdprintf(int , const char *__restrict__ , __gnuc_va_list )
# 416
 __attribute((__format__(__printf__, 2, 0))); 
# 417
extern "C" int dprintf(int , const char *__restrict__ , ...)
# 418
 __attribute((__format__(__printf__, 2, 3))); 
# 427
extern "C" int fscanf(FILE *__restrict__ , const char *__restrict__ , ...); 
# 433
extern "C" int scanf(const char *__restrict__ , ...); 
# 435
extern "C" int sscanf(const char *__restrict__ , const char *__restrict__ , ...) throw(); 
# 473 "/usr/include/stdio.h" 3
extern "C" int vfscanf(FILE *__restrict__ , const char *__restrict__ , __gnuc_va_list )
# 475
 __attribute((__format__(__scanf__, 2, 0))); 
# 481
extern "C" int vscanf(const char *__restrict__ , __gnuc_va_list )
# 482
 __attribute((__format__(__scanf__, 1, 0))); 
# 485
extern "C" int vsscanf(const char *__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw()
# 487
 __attribute((__format__(__scanf__, 2, 0))); 
# 533 "/usr/include/stdio.h" 3
extern "C" int fgetc(FILE * ); 
# 534
extern "C" int getc(FILE * ); 
# 540
extern "C" { extern __attribute((gnu_inline)) inline int getchar(); } 
# 552 "/usr/include/stdio.h" 3
extern "C" { extern __attribute((gnu_inline)) inline int getc_unlocked(FILE * ); } 
# 553
extern "C" { extern __attribute((gnu_inline)) inline int getchar_unlocked(); } 
# 563 "/usr/include/stdio.h" 3
extern "C" { extern __attribute((gnu_inline)) inline int fgetc_unlocked(FILE * ); } 
# 575
extern "C" int fputc(int , FILE * ); 
# 576
extern "C" int putc(int , FILE * ); 
# 582
extern "C" { extern __attribute((gnu_inline)) inline int putchar(int ); } 
# 596 "/usr/include/stdio.h" 3
extern "C" { extern __attribute((gnu_inline)) inline int fputc_unlocked(int , FILE * ); } 
# 604
extern "C" { extern __attribute((gnu_inline)) inline int putc_unlocked(int , FILE * ); } 
# 605
extern "C" { extern __attribute((gnu_inline)) inline int putchar_unlocked(int ); } 
# 612
extern "C" int getw(FILE * ); 
# 615
extern "C" int putw(int , FILE * ); 
# 624
extern "C" char *fgets(char *__restrict__ , int , FILE *__restrict__ ); 
# 632
extern "C" char *gets(char * ); 
# 642 "/usr/include/stdio.h" 3
extern "C" char *fgets_unlocked(char *__restrict__ , int , FILE *__restrict__ ); 
# 658 "/usr/include/stdio.h" 3
extern "C" __ssize_t __getdelim(char **__restrict__ , size_t *__restrict__ , int , FILE *__restrict__ ); 
# 661
extern "C" __ssize_t getdelim(char **__restrict__ , size_t *__restrict__ , int , FILE *__restrict__ ); 
# 671
extern "C" { extern __attribute((gnu_inline)) inline __ssize_t getline(char **__restrict__ , size_t *__restrict__ , FILE *__restrict__ ); } 
# 682
extern "C" int fputs(const char *__restrict__ , FILE *__restrict__ ); 
# 688
extern "C" int puts(const char * ); 
# 695
extern "C" int ungetc(int , FILE * ); 
# 702
extern "C" size_t fread(void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 708
extern "C" size_t fwrite(const void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 719 "/usr/include/stdio.h" 3
extern "C" int fputs_unlocked(const char *__restrict__ , FILE *__restrict__ ); 
# 730 "/usr/include/stdio.h" 3
extern "C" size_t fread_unlocked(void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 732
extern "C" size_t fwrite_unlocked(const void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 742
extern "C" int fseek(FILE * , long , int ); 
# 747
extern "C" long ftell(FILE * ); 
# 752
extern "C" void rewind(FILE * ); 
# 766 "/usr/include/stdio.h" 3
extern "C" int fseeko(FILE * , __off_t , int ); 
# 771
extern "C" __off_t ftello(FILE * ); 
# 791 "/usr/include/stdio.h" 3
extern "C" int fgetpos(FILE *__restrict__ , fpos_t *__restrict__ ); 
# 796
extern "C" int fsetpos(FILE * , const fpos_t * ); 
# 811 "/usr/include/stdio.h" 3
extern "C" int fseeko64(FILE * , __off64_t , int ); 
# 812
extern "C" __off64_t ftello64(FILE * ); 
# 813
extern "C" int fgetpos64(FILE *__restrict__ , fpos64_t *__restrict__ ); 
# 814
extern "C" int fsetpos64(FILE * , const fpos64_t * ); 
# 819
extern "C" void clearerr(FILE * ) throw(); 
# 821
extern "C" int feof(FILE * ) throw(); 
# 823
extern "C" int ferror(FILE * ) throw(); 
# 828
extern "C" void clearerr_unlocked(FILE * ) throw(); 
# 829
extern "C" { extern __attribute((gnu_inline)) inline int feof_unlocked(FILE * ) throw(); } 
# 830
extern "C" { extern __attribute((gnu_inline)) inline int ferror_unlocked(FILE * ) throw(); } 
# 839
extern "C" void perror(const char * ); 
# 27 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern "C" { extern int sys_nerr; } 
# 28
extern "C" { extern const char *const sys_errlist[]; } 
# 31
extern "C" { extern int _sys_nerr; } 
# 32
extern "C" { extern const char *const _sys_errlist[]; } 
# 851 "/usr/include/stdio.h" 3
extern "C" int fileno(FILE * ) throw(); 
# 856
extern "C" int fileno_unlocked(FILE * ) throw(); 
# 866 "/usr/include/stdio.h" 3
extern "C" FILE *popen(const char * , const char * ); 
# 872
extern "C" int pclose(FILE * ); 
# 878
extern "C" char *ctermid(char * ) throw(); 
# 884
extern "C" char *cuserid(char * ); 
# 889
struct obstack; 
# 892
extern "C" int obstack_printf(obstack *__restrict__ , const char *__restrict__ , ...) throw()
# 894
 __attribute((__format__(__printf__, 2, 3))); 
# 895
extern "C" int obstack_vprintf(obstack *__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw()
# 898
 __attribute((__format__(__printf__, 2, 0))); 
# 906
extern "C" void flockfile(FILE * ) throw(); 
# 910
extern "C" int ftrylockfile(FILE * ) throw(); 
# 913
extern "C" void funlockfile(FILE * ) throw(); 
# 37 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3
extern "C" { 
# 36
__attribute((__gnu_inline__)) inline int 
# 37
vprintf(const char *__restrict__ __fmt, __gnuc_va_list __arg) 
# 38
{ 
# 39
return vfprintf(stdout, __fmt, __arg); 
# 40
} } 
# 45
extern "C" { 
# 44
__attribute((__gnu_inline__)) inline int 
# 45
getchar() 
# 46
{ 
# 47
return _IO_getc(stdin); 
# 48
} } 
# 54
extern "C" { 
# 53
__attribute((__gnu_inline__)) inline int 
# 54
fgetc_unlocked(FILE *__fp) 
# 55
{ 
# 56
return (__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++))); 
# 57
} } 
# 64
extern "C" { 
# 63
__attribute((__gnu_inline__)) inline int 
# 64
getc_unlocked(FILE *__fp) 
# 65
{ 
# 66
return (__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++))); 
# 67
} } 
# 71
extern "C" { 
# 70
__attribute((__gnu_inline__)) inline int 
# 71
getchar_unlocked() 
# 72
{ 
# 73
return (__builtin_expect((stdin->_IO_read_ptr) >= (stdin->_IO_read_end), 0)) ? __uflow(stdin) : (*((unsigned char *)((stdin->_IO_read_ptr)++))); 
# 74
} } 
# 80
extern "C" { 
# 79
__attribute((__gnu_inline__)) inline int 
# 80
putchar(int __c) 
# 81
{ 
# 82
return _IO_putc(__c, stdout); 
# 83
} } 
# 89
extern "C" { 
# 88
__attribute((__gnu_inline__)) inline int 
# 89
fputc_unlocked(int __c, FILE *__stream) 
# 90
{ 
# 91
return (__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c)); 
# 92
} } 
# 99
extern "C" { 
# 98
__attribute((__gnu_inline__)) inline int 
# 99
putc_unlocked(int __c, FILE *__stream) 
# 100
{ 
# 101
return (__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c)); 
# 102
} } 
# 106
extern "C" { 
# 105
__attribute((__gnu_inline__)) inline int 
# 106
putchar_unlocked(int __c) 
# 107
{ 
# 108
return (__builtin_expect((stdout->_IO_write_ptr) >= (stdout->_IO_write_end), 0)) ? __overflow(stdout, (unsigned char)__c) : ((unsigned char)((*((stdout->_IO_write_ptr)++)) = __c)); 
# 109
} } 
# 116
extern "C" { 
# 115
__attribute((__gnu_inline__)) inline __ssize_t 
# 116
getline(char **__lineptr, size_t *__n, FILE *__stream) 
# 117
{ 
# 118
return __getdelim(__lineptr, __n, '\n', __stream); 
# 119
} } 
# 126
extern "C" { 
# 125
__attribute((__gnu_inline__)) inline int 
# 126
feof_unlocked(FILE *__stream) throw() 
# 127
{ 
# 128
return ((__stream->_flags) & 16) != 0; 
# 129
} } 
# 133
extern "C" { 
# 132
__attribute((__gnu_inline__)) inline int 
# 133
ferror_unlocked(FILE *__stream) throw() 
# 134
{ 
# 135
return ((__stream->_flags) & 32) != 0; 
# 136
} } 
# 60 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
enum CUTBoolean { 
# 62
CUTFalse, 
# 63
CUTTrue
# 64
}; 
# 72
extern "C" void cutFree(void * ); 
# 90 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" void cutCheckBankAccess(unsigned , unsigned , unsigned , unsigned , unsigned , unsigned , const char * , const int , const char * , const int ); 
# 103
extern "C" char *cutFindFilePath(const char * , const char * ); 
# 118 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFilef(const char * , float ** , unsigned * , bool  = false); 
# 134 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFiled(const char * , double ** , unsigned * , bool  = false); 
# 150 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFilei(const char * , int ** , unsigned * , bool  = false); 
# 165 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFileui(const char * , unsigned ** , unsigned * , bool  = false); 
# 181 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFileb(const char * , char ** , unsigned * , bool  = false); 
# 197 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFileub(const char * , unsigned char ** , unsigned * , bool  = false); 
# 211 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFilef(const char * , const float * , unsigned , const float , bool  = false); 
# 225 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFiled(const char * , const float * , unsigned , const double , bool  = false); 
# 237 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFilei(const char * , const int * , unsigned , bool  = false); 
# 249 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFileui(const char * , const unsigned * , unsigned , bool  = false); 
# 261 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFileb(const char * , const char * , unsigned , bool  = false); 
# 273 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFileub(const char * , const unsigned char * , unsigned , bool  = false); 
# 289 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMub(const char * , unsigned char ** , unsigned * , unsigned * ); 
# 302 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPPMub(const char * , unsigned char ** , unsigned * , unsigned * ); 
# 316 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPPM4ub(const char * , unsigned char ** , unsigned * , unsigned * ); 
# 332 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMi(const char * , unsigned ** , unsigned * , unsigned * ); 
# 348 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMs(const char * , unsigned short ** , unsigned * , unsigned * ); 
# 363 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMf(const char * , float ** , unsigned * , unsigned * ); 
# 375 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMub(const char * , unsigned char * , unsigned , unsigned ); 
# 387 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePPMub(const char * , unsigned char * , unsigned , unsigned ); 
# 400 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePPM4ub(const char * , unsigned char * , unsigned , unsigned ); 
# 412 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMi(const char * , unsigned * , unsigned , unsigned ); 
# 424 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMs(const char * , unsigned short * , unsigned , unsigned ); 
# 436 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMf(const char * , float * , unsigned , unsigned ); 
# 457 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCheckCmdLineFlag(const int , const char ** , const char * ); 
# 471 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumenti(const int , const char ** , const char * , int * ); 
# 485 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentf(const int , const char ** , const char * , float * ); 
# 499 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentstr(const int , const char ** , const char * , char ** ); 
# 514 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentListstr(const int , const char ** , const char * , char ** , unsigned * ); 
# 528 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCheckCondition(int , const char * , const int ); 
# 540 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparef(const float * , const float * , const unsigned ); 
# 553 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparei(const int * , const int * , const unsigned ); 
# 567 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareuit(const unsigned * , const unsigned * , const unsigned , const float , const float ); 
# 580 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareub(const unsigned char * , const unsigned char * , const unsigned ); 
# 595 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareubt(const unsigned char * , const unsigned char * , const unsigned , const float , const float ); 
# 609 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareube(const unsigned char * , const unsigned char * , const unsigned , const float ); 
# 623 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparefe(const float * , const float * , const unsigned , const float ); 
# 638 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparefet(const float * , const float * , const unsigned , const float , const float ); 
# 653 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareL2fe(const float * , const float * , const unsigned , const float ); 
# 668 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparePPM(const char * , const char * , const float , const float , bool  = false); 
# 681 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCreateTimer(unsigned * ); 
# 690
extern "C" CUTBoolean cutDeleteTimer(unsigned ); 
# 698
extern "C" CUTBoolean cutStartTimer(const unsigned ); 
# 706
extern "C" CUTBoolean cutStopTimer(const unsigned ); 
# 714
extern "C" CUTBoolean cutResetTimer(const unsigned ); 
# 723
extern "C" float cutGetTimerValue(const unsigned ); 
# 734 "/home/bachelor/deicide218/NVIDIA_GPU_Computing_SDK-4.2.9/C/common/inc/cutil.h"
extern "C" float cutGetAverageTimerValue(const unsigned ); 
# 42 "/usr/include/c++/4.4/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template < typename _Alloc >
    class allocator;
# 47
template< class _CharT> struct char_traits; 
# 50
template < typename _CharT, typename _Traits = char_traits < _CharT >,
           typename _Alloc = allocator < _CharT > >
    class basic_string;
# 54
template<> struct char_traits< char> ; 
# 56
typedef basic_string< char, char_traits< char> , allocator< char> >  string; 
# 59
template<> struct char_traits< wchar_t> ; 
# 61
typedef basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  wstring; 
# 75 "/usr/include/c++/4.4/bits/stringfwd.h" 3
}
# 352 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 3
typedef unsigned wint_t; 
# 106 "/usr/include/wchar.h" 3
typedef __mbstate_t mbstate_t; 
# 134 "/usr/include/wchar.h" 3
struct tm; 
# 144
extern "C" wchar_t *wcscpy(wchar_t *__restrict__ , const wchar_t *__restrict__ ) throw(); 
# 147
extern "C" wchar_t *wcsncpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 152
extern "C" wchar_t *wcscat(wchar_t *__restrict__ , const wchar_t *__restrict__ ) throw(); 
# 155
extern "C" wchar_t *wcsncat(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 160
extern "C" int wcscmp(const wchar_t * , const wchar_t * ) throw()
# 161
 __attribute((__pure__)); 
# 163
extern "C" int wcsncmp(const wchar_t * , const wchar_t * , size_t ) throw()
# 164
 __attribute((__pure__)); 
# 169
extern "C" int wcscasecmp(const wchar_t * , const wchar_t * ) throw(); 
# 172
extern "C" int wcsncasecmp(const wchar_t * , const wchar_t * , size_t ) throw(); 
# 179
extern "C" int wcscasecmp_l(const wchar_t * , const wchar_t * , __locale_t ) throw(); 
# 182
extern "C" int wcsncasecmp_l(const wchar_t * , const wchar_t * , size_t , __locale_t ) throw(); 
# 189
extern "C" int wcscoll(const wchar_t * , const wchar_t * ) throw(); 
# 193
extern "C" size_t wcsxfrm(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 203
extern "C" int wcscoll_l(const wchar_t * , const wchar_t * , __locale_t ) throw(); 
# 209
extern "C" size_t wcsxfrm_l(wchar_t * , const wchar_t * , size_t , __locale_t ) throw(); 
# 213
extern "C" wchar_t *wcsdup(const wchar_t * ) throw() __attribute((__malloc__)); 
# 219
wchar_t *wcschr(wchar_t * , wchar_t ) throw() __asm__("wcschr")
# 220
 __attribute((__pure__)); 
# 221
const wchar_t *wcschr(const wchar_t * , wchar_t ) throw() __asm__("wcschr")
# 222
 __attribute((__pure__)); 
# 229
wchar_t *wcsrchr(wchar_t * , wchar_t ) throw() __asm__("wcsrchr")
# 230
 __attribute((__pure__)); 
# 231
const wchar_t *wcsrchr(const wchar_t * , wchar_t ) throw() __asm__("wcsrchr")
# 232
 __attribute((__pure__)); 
# 242
extern "C" wchar_t *wcschrnul(const wchar_t * , wchar_t ) throw()
# 243
 __attribute((__pure__)); 
# 249
extern "C" size_t wcscspn(const wchar_t * , const wchar_t * ) throw()
# 250
 __attribute((__pure__)); 
# 253
extern "C" size_t wcsspn(const wchar_t * , const wchar_t * ) throw()
# 254
 __attribute((__pure__)); 
# 257
wchar_t *wcspbrk(wchar_t * , const wchar_t * ) throw() __asm__("wcspbrk")
# 258
 __attribute((__pure__)); 
# 259
const wchar_t *wcspbrk(const wchar_t * , const wchar_t * ) throw() __asm__("wcspbrk")
# 261
 __attribute((__pure__)); 
# 268
wchar_t *wcsstr(wchar_t * , const wchar_t * ) throw() __asm__("wcsstr")
# 269
 __attribute((__pure__)); 
# 270
const wchar_t *wcsstr(const wchar_t * , const wchar_t * ) throw() __asm__("wcsstr")
# 272
 __attribute((__pure__)); 
# 279
extern "C" wchar_t *wcstok(wchar_t *__restrict__ , const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 284
extern "C" size_t wcslen(const wchar_t * ) throw() __attribute((__pure__)); 
# 290
wchar_t *wcswcs(wchar_t * , const wchar_t * ) throw() __asm__("wcswcs")
# 291
 __attribute((__pure__)); 
# 292
const wchar_t *wcswcs(const wchar_t * , const wchar_t * ) throw() __asm__("wcswcs")
# 294
 __attribute((__pure__)); 
# 303 "/usr/include/wchar.h" 3
extern "C" size_t wcsnlen(const wchar_t * , size_t ) throw()
# 304
 __attribute((__pure__)); 
# 311
wchar_t *wmemchr(wchar_t * , wchar_t , size_t ) throw() __asm__("wmemchr")
# 312
 __attribute((__pure__)); 
# 313
const wchar_t *wmemchr(const wchar_t * , wchar_t , size_t ) throw() __asm__("wmemchr")
# 315
 __attribute((__pure__)); 
# 322
extern "C" int wmemcmp(const wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw()
# 324
 __attribute((__pure__)); 
# 327
extern "C" wchar_t *wmemcpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 332
extern "C" wchar_t *wmemmove(wchar_t * , const wchar_t * , size_t ) throw(); 
# 336
extern "C" wchar_t *wmemset(wchar_t * , wchar_t , size_t ) throw(); 
# 342
extern "C" wchar_t *wmempcpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 351
extern "C" { extern __attribute((gnu_inline)) inline wint_t btowc(int ) throw(); } 
# 355
extern "C" { extern __attribute((gnu_inline)) inline int wctob(wint_t ) throw(); } 
# 359
extern "C" int mbsinit(const mbstate_t * ) throw() __attribute((__pure__)); 
# 363
extern "C" size_t mbrtowc(wchar_t *__restrict__ , const char *__restrict__ , size_t , mbstate_t * ) throw(); 
# 368
extern "C" size_t wcrtomb(char *__restrict__ , wchar_t , mbstate_t *__restrict__ ) throw(); 
# 372
extern "C" size_t __mbrlen(const char *__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 374
extern "C" { extern __attribute((gnu_inline)) inline size_t mbrlen(const char *__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); } 
# 384
extern "C" wint_t __btowc_alias(int ) __asm__("btowc"); 
# 386
extern "C" { 
# 385
__attribute((__gnu_inline__)) inline wint_t 
# 386
btowc(int __c) throw() 
# 387
{ return (((0) && (__c >= ('\000'))) && (__c <= ('\177'))) ? ((wint_t)__c) : __btowc_alias(__c); 
# 388
} } 
# 390
extern "C" int __wctob_alias(wint_t ) __asm__("wctob"); 
# 392
extern "C" { 
# 391
__attribute((__gnu_inline__)) inline int 
# 392
wctob(wint_t __wc) throw() 
# 393
{ return (((0) && (__wc >= (L'\x0'))) && (__wc <= (L'\x7f'))) ? ((int)__wc) : __wctob_alias(__wc); 
# 394
} } 
# 397
extern "C" { 
# 396
__attribute((__gnu_inline__)) inline size_t 
# 397
mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) throw() 
# 399
{ return (__ps != (__null)) ? mbrtowc(__null, __s, __n, __ps) : __mbrlen(__s, __n, __null); 
# 400
} } 
# 406
extern "C" size_t mbsrtowcs(wchar_t *__restrict__ , const char **__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 412
extern "C" size_t wcsrtombs(char *__restrict__ , const wchar_t **__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 421
extern "C" size_t mbsnrtowcs(wchar_t *__restrict__ , const char **__restrict__ , size_t , size_t , mbstate_t *__restrict__ ) throw(); 
# 427
extern "C" size_t wcsnrtombs(char *__restrict__ , const wchar_t **__restrict__ , size_t , size_t , mbstate_t *__restrict__ ) throw(); 
# 437
extern "C" int wcwidth(wchar_t ) throw(); 
# 441
extern "C" int wcswidth(const wchar_t * , size_t ) throw(); 
# 448
extern "C" double wcstod(const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 455
extern "C" float wcstof(const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 457
extern "C" long double wcstold(const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 466
extern "C" long wcstol(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 471
extern "C" unsigned long wcstoul(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 481
extern "C" long long wcstoll(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 488
extern "C" unsigned long long wcstoull(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 498
extern "C" long long wcstoq(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 505
extern "C" unsigned long long wcstouq(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 528 "/usr/include/wchar.h" 3
extern "C" long wcstol_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 532
extern "C" unsigned long wcstoul_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 537
extern "C" long long wcstoll_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 542
extern "C" unsigned long long wcstoull_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 547
extern "C" double wcstod_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , __locale_t ) throw(); 
# 551
extern "C" float wcstof_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , __locale_t ) throw(); 
# 555
extern "C" long double wcstold_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , __locale_t ) throw(); 
# 562
extern "C" wchar_t *wcpcpy(wchar_t *__restrict__ , const wchar_t *__restrict__ ) throw(); 
# 567
extern "C" wchar_t *wcpncpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 578 "/usr/include/wchar.h" 3
extern "C" __FILE *open_wmemstream(wchar_t ** , size_t * ) throw(); 
# 585
extern "C" int fwide(__FILE * , int ) throw(); 
# 592
extern "C" int fwprintf(__FILE *__restrict__ , const wchar_t *__restrict__ , ...); 
# 599
extern "C" int wprintf(const wchar_t *__restrict__ , ...); 
# 602
extern "C" int swprintf(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , ...) throw(); 
# 610
extern "C" int vfwprintf(__FILE *__restrict__ , const wchar_t *__restrict__ , __gnuc_va_list ); 
# 618
extern "C" int vwprintf(const wchar_t *__restrict__ , __gnuc_va_list ); 
# 623
extern "C" int vswprintf(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , __gnuc_va_list ) throw(); 
# 633
extern "C" int fwscanf(__FILE *__restrict__ , const wchar_t *__restrict__ , ...); 
# 640
extern "C" int wscanf(const wchar_t *__restrict__ , ...); 
# 643
extern "C" int swscanf(const wchar_t *__restrict__ , const wchar_t *__restrict__ , ...) throw(); 
# 687 "/usr/include/wchar.h" 3
extern "C" int vfwscanf(__FILE *__restrict__ , const wchar_t *__restrict__ , __gnuc_va_list ); 
# 695
extern "C" int vwscanf(const wchar_t *__restrict__ , __gnuc_va_list ); 
# 699
extern "C" int vswscanf(const wchar_t *__restrict__ , const wchar_t *__restrict__ , __gnuc_va_list ) throw(); 
# 743 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc(__FILE * ); 
# 744
extern "C" wint_t getwc(__FILE * ); 
# 750
extern "C" wint_t getwchar(); 
# 757
extern "C" wint_t fputwc(wchar_t , __FILE * ); 
# 758
extern "C" wint_t putwc(wchar_t , __FILE * ); 
# 764
extern "C" wint_t putwchar(wchar_t ); 
# 772
extern "C" wchar_t *fgetws(wchar_t *__restrict__ , int , __FILE *__restrict__ ); 
# 779
extern "C" int fputws(const wchar_t *__restrict__ , __FILE *__restrict__ ); 
# 787
extern "C" wint_t ungetwc(wint_t , __FILE * ); 
# 799 "/usr/include/wchar.h" 3
extern "C" wint_t getwc_unlocked(__FILE * ); 
# 800
extern "C" wint_t getwchar_unlocked(); 
# 808
extern "C" wint_t fgetwc_unlocked(__FILE * ); 
# 816
extern "C" wint_t fputwc_unlocked(wchar_t , __FILE * ); 
# 825 "/usr/include/wchar.h" 3
extern "C" wint_t putwc_unlocked(wchar_t , __FILE * ); 
# 826
extern "C" wint_t putwchar_unlocked(wchar_t ); 
# 835 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws_unlocked(wchar_t *__restrict__ , int , __FILE *__restrict__ ); 
# 844
extern "C" int fputws_unlocked(const wchar_t *__restrict__ , __FILE *__restrict__ ); 
# 853
extern "C" size_t wcsftime(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , const tm *__restrict__ ) throw(); 
# 863
extern "C" size_t wcsftime_l(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , const tm *__restrict__ , __locale_t ) throw(); 
# 65 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 67
using ::mbstate_t;
# 69
}
# 139 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 141
using ::wint_t;
# 143
using ::btowc;
# 144
using ::fgetwc;
# 145
using ::fgetws;
# 146
using ::fputwc;
# 147
using ::fputws;
# 148
using ::fwide;
# 149
using ::fwprintf;
# 150
using ::fwscanf;
# 151
using ::getwc;
# 152
using ::getwchar;
# 153
using ::mbrlen;
# 154
using ::mbrtowc;
# 155
using ::mbsinit;
# 156
using ::mbsrtowcs;
# 157
using ::putwc;
# 158
using ::putwchar;
# 159
using ::swprintf;
# 160
using ::swscanf;
# 161
using ::ungetwc;
# 162
using ::vfwprintf;
# 164
using ::vfwscanf;
# 166
using ::vswprintf;
# 168
using ::vswscanf;
# 170
using ::vwprintf;
# 172
using ::vwscanf;
# 174
using ::wcrtomb;
# 175
using ::wcscat;
# 176
using ::wcscmp;
# 177
using ::wcscoll;
# 178
using ::wcscpy;
# 179
using ::wcscspn;
# 180
using ::wcsftime;
# 181
using ::wcslen;
# 182
using ::wcsncat;
# 183
using ::wcsncmp;
# 184
using ::wcsncpy;
# 185
using ::wcsrtombs;
# 186
using ::wcsspn;
# 187
using ::wcstod;
# 189
using ::wcstof;
# 191
using ::wcstok;
# 192
using ::wcstol;
# 193
using ::wcstoul;
# 194
using ::wcsxfrm;
# 195
using ::wctob;
# 196
using ::wmemcmp;
# 197
using ::wmemcpy;
# 198
using ::wmemmove;
# 199
using ::wmemset;
# 200
using ::wprintf;
# 201
using ::wscanf;
# 202
using ::wcschr;
# 203
using ::wcspbrk;
# 204
using ::wcsrchr;
# 205
using ::wcsstr;
# 206
using ::wmemchr;
# 230 "/usr/include/c++/4.4/cwchar" 3
}
# 238
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 245
using ::wcstold;
# 254 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoll;
# 255
using ::wcstoull;
# 258
}
# 260
namespace std __attribute((__visibility__("default"))) { 
# 262
using __gnu_cxx::wcstold;
# 263
using __gnu_cxx::wcstoll;
# 264
using __gnu_cxx::wcstoull;
# 266
}
# 70 "/usr/include/c++/4.4/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    class fpos
    {
    private :
      streamoff _M_off;
      _StateT _M_state;

    public :




      fpos ( )
      : _M_off ( 0 ), _M_state ( ) { }

      fpos ( streamoff __off )
      : _M_off ( __off ), _M_state ( ) { }


      operator streamoff ( ) const { return _M_off; }


      void
      state ( _StateT __st )
      { _M_state = __st; }


      _StateT
      state ( ) const
      { return _M_state; }





      fpos &
      operator += ( streamoff __off )
      {
 _M_off += __off;
 return * this;
      }





      fpos &
      operator -= ( streamoff __off )
      {
 _M_off -= __off;
 return * this;
      }







      fpos
      operator + ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos += __off;
 return __pos;
      }







      fpos
      operator - ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator - ( const fpos & __other ) const
      { return _M_off - __other . _M_off; }
    };
# 214 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator == ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) == streamoff ( __rhs ); }
# 219
template < typename _StateT >
    inline bool
    operator != ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) != streamoff ( __rhs ); }
# 228
typedef fpos< __mbstate_t>  streampos; 
# 230
typedef fpos< __mbstate_t>  wstreampos; 
# 239 "/usr/include/c++/4.4/bits/postypes.h" 3
}
# 44 "/usr/include/c++/4.4/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ios;
# 49
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_streambuf;
# 52
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_istream;
# 55
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ostream;
# 58
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_iostream;
# 61
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 62
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 65
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 66
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 69
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 70
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 73
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 74
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 77
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_filebuf;
# 80
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ifstream;
# 83
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ofstream;
# 86
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_fstream;
# 89
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class istreambuf_iterator;
# 92
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class ostreambuf_iterator;
# 97
class ios_base; 
# 127 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ios< char, char_traits< char> >  ios; 
# 128
typedef basic_streambuf< char, char_traits< char> >  streambuf; 
# 129
typedef basic_istream< char, char_traits< char> >  istream; 
# 130
typedef basic_ostream< char, char_traits< char> >  ostream; 
# 131
typedef basic_iostream< char, char_traits< char> >  iostream; 
# 132
typedef basic_stringbuf< char, char_traits< char> , allocator< char> >  stringbuf; 
# 133
typedef basic_istringstream< char, char_traits< char> , allocator< char> >  istringstream; 
# 134
typedef basic_ostringstream< char, char_traits< char> , allocator< char> >  ostringstream; 
# 135
typedef basic_stringstream< char, char_traits< char> , allocator< char> >  stringstream; 
# 136
typedef basic_filebuf< char, char_traits< char> >  filebuf; 
# 137
typedef basic_ifstream< char, char_traits< char> >  ifstream; 
# 138
typedef basic_ofstream< char, char_traits< char> >  ofstream; 
# 139
typedef basic_fstream< char, char_traits< char> >  fstream; 
# 142
typedef basic_ios< wchar_t, char_traits< wchar_t> >  wios; 
# 143
typedef basic_streambuf< wchar_t, char_traits< wchar_t> >  wstreambuf; 
# 144
typedef basic_istream< wchar_t, char_traits< wchar_t> >  wistream; 
# 145
typedef basic_ostream< wchar_t, char_traits< wchar_t> >  wostream; 
# 146
typedef basic_iostream< wchar_t, char_traits< wchar_t> >  wiostream; 
# 147
typedef basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  wstringbuf; 
# 148
typedef basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  wistringstream; 
# 149
typedef basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  wostringstream; 
# 150
typedef basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  wstringstream; 
# 151
typedef basic_filebuf< wchar_t, char_traits< wchar_t> >  wfilebuf; 
# 152
typedef basic_ifstream< wchar_t, char_traits< wchar_t> >  wifstream; 
# 153
typedef basic_ofstream< wchar_t, char_traits< wchar_t> >  wofstream; 
# 154
typedef basic_fstream< wchar_t, char_traits< wchar_t> >  wfstream; 
# 158
}
# 41 "/usr/include/c++/4.4/exception" 3
namespace std { 
# 59 "/usr/include/c++/4.4/exception" 3
class exception { 
# 62
public: exception() throw() { } 
# 63
virtual ~exception() throw(); 
# 67
virtual const char *what() const throw(); 
# 68
}; 
# 72
class bad_exception : public exception { 
# 75
public: bad_exception() throw() { } 
# 79
virtual ~bad_exception() throw(); 
# 82
virtual const char *what() const throw(); 
# 83
}; 
# 86
typedef void (*terminate_handler)(void); 
# 89
typedef void (*unexpected_handler)(void); 
# 92
terminate_handler set_terminate(terminate_handler) throw(); 
# 96
void terminate() __attribute((__noreturn__)); 
# 99
unexpected_handler set_unexpected(unexpected_handler) throw(); 
# 103
void unexpected() __attribute((__noreturn__)); 
# 115 "/usr/include/c++/4.4/exception" 3
bool uncaught_exception() throw(); 
# 118
}
# 120
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 138 "/usr/include/c++/4.4/exception" 3
void __verbose_terminate_handler(); 
# 140
}
# 39 "/usr/include/c++/4.4/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
void __throw_bad_exception() __attribute((__noreturn__)); 
# 47
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 51
void __throw_bad_cast() __attribute((__noreturn__)); 
# 54
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 58
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 61
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 64
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 67
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 70
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 73
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 76
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 79
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 82
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 86
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 89
void __throw_system_error(int) __attribute((__noreturn__)); 
# 91
}
# 37 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> 
# 53
struct __numeric_traits_integer { 
# 56
static const _Value __min = ((((_Value)(-1)) < 0) ? (((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0))) : ((_Value)0)); 
# 57
static const _Value __max = ((((_Value)(-1)) < 0) ? ((((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((_Value)0))); 
# 61
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 62
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 63
}; 
# 65
template< class _Value> const _Value 
# 66
__numeric_traits_integer< _Value> ::__min; 
# 68
template< class _Value> const _Value 
# 69
__numeric_traits_integer< _Value> ::__max; 
# 71
template< class _Value> const bool 
# 72
__numeric_traits_integer< _Value> ::__is_signed; 
# 74
template< class _Value> const int 
# 75
__numeric_traits_integer< _Value> ::__digits; 
# 97 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template< class _Value> 
# 98
struct __numeric_traits_floating { 
# 101
static const int __max_digits10 = (2 + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 3010) / 10000)); 
# 104
static const bool __is_signed = true; 
# 105
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18)); 
# 106
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 107
}; 
# 109
template< class _Value> const int 
# 110
__numeric_traits_floating< _Value> ::__max_digits10; 
# 112
template< class _Value> const bool 
# 113
__numeric_traits_floating< _Value> ::__is_signed; 
# 115
template< class _Value> const int 
# 116
__numeric_traits_floating< _Value> ::__digits10; 
# 118
template< class _Value> const int 
# 119
__numeric_traits_floating< _Value> ::__max_exponent10; 
# 121
template< class _Value> 
# 122
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 126
}; 
# 128
}
# 66 "/usr/include/c++/4.4/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74
template < typename _Tp >
    inline void
    swap ( _Tp & __a, _Tp & __b )
    {



      _Tp __tmp = ( __a );
      __a = ( __b );
      __b = ( __tmp );
    }
# 88
template < typename _Tp, size_t _Nm >
    inline void
    swap ( _Tp ( & __a ) [ _Nm ], _Tp ( & __b ) [ _Nm ] )
    {
      for ( size_t __n = 0; __n < _Nm; ++ __n )
 swap ( __a [ __n ], __b [ __n ] );
    }
# 96
}
# 63 "/usr/include/c++/4.4/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
template < class _T1, class _T2 >
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair ( )
      : first ( ), second ( ) { }


      pair ( const _T1 & __a, const _T2 & __b )
      : first ( __a ), second ( __b ) { }

      template < class _U1, class _U2 >
        pair ( const pair < _U1, _U2 > & __p )
 : first ( __p . first ),
   second ( __p . second ) { }

    };
# 144 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator == ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first == __y . first && __x . second == __y . second; }
# 150
template < class _T1, class _T2 >
    inline bool
    operator < ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first < __y . first
      || ( ! ( __y . first < __x . first ) && __x . second < __y . second ); }
# 157
template < class _T1, class _T2 >
    inline bool
    operator != ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x == __y ); }
# 163
template < class _T1, class _T2 >
    inline bool
    operator > ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __y < __x; }
# 169
template < class _T1, class _T2 >
    inline bool
    operator <= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __y < __x ); }
# 175
template < class _T1, class _T2 >
    inline bool
    operator >= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x < __y ); }
# 213 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline pair < _T1, _T2 >
    make_pair ( _T1 __x, _T2 __y )
    { return pair < _T1, _T2 > ( __x, __y ); }
# 259 "/usr/include/c++/4.4/bits/stl_pair.h" 3
}
# 68 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 79 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 81
struct output_iterator_tag { }; 
# 83
struct forward_iterator_tag : public input_iterator_tag { }; 
# 86
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 89
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 102 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 103
_Pointer = _Tp *, class _Reference = _Tp &> 
# 104
struct iterator { 
# 107
typedef _Category iterator_category; 
# 109
typedef _Tp value_type; 
# 111
typedef _Distance difference_type; 
# 113
typedef _Pointer pointer; 
# 115
typedef _Reference reference; 
# 116
}; 
# 124
template< class _Iterator> 
# 125
struct iterator_traits { 
# 127
typedef typename _Iterator::iterator_category iterator_category; 
# 128
typedef typename _Iterator::value_type value_type; 
# 129
typedef typename _Iterator::difference_type difference_type; 
# 130
typedef typename _Iterator::pointer pointer; 
# 131
typedef typename _Iterator::reference reference; 
# 132
}; 
# 134
template< class _Tp> 
# 135
struct iterator_traits< _Tp *>  { 
# 137
typedef random_access_iterator_tag iterator_category; 
# 138
typedef _Tp value_type; 
# 139
typedef ptrdiff_t difference_type; 
# 140
typedef _Tp *pointer; 
# 141
typedef _Tp &reference; 
# 142
}; 
# 144
template< class _Tp> 
# 145
struct iterator_traits< const _Tp *>  { 
# 147
typedef random_access_iterator_tag iterator_category; 
# 148
typedef _Tp value_type; 
# 149
typedef ptrdiff_t difference_type; 
# 150
typedef const _Tp *pointer; 
# 151
typedef const _Tp &reference; 
# 152
}; 
# 158
template < typename _Iter >
    inline typename iterator_traits < _Iter > :: iterator_category
    __iterator_category ( const _Iter & )
    { return typename iterator_traits < _Iter > :: iterator_category ( ); }
# 165
}
# 66 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    __distance ( _InputIterator __first, _InputIterator __last,
               input_iterator_tag )
    {



      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      while ( __first != __last )
 {
   ++ __first;
   ++ __n;
 }
      return __n;
    }
# 85
template < typename _RandomAccessIterator >
    inline typename iterator_traits < _RandomAccessIterator > :: difference_type
    __distance ( _RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag )
    {



      return __last - __first;
    }
# 108 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    distance ( _InputIterator __first, _InputIterator __last )
    {

      return std :: __distance ( __first, __last,
        std :: __iterator_category ( __first ) );
    }
# 117
template < typename _InputIterator, typename _Distance >
    inline void
    __advance ( _InputIterator & __i, _Distance __n, input_iterator_tag )
    {


      while ( __n -- )
 ++ __i;
    }
# 127
template < typename _BidirectionalIterator, typename _Distance >
    inline void
    __advance ( _BidirectionalIterator & __i, _Distance __n,
       bidirectional_iterator_tag )
    {



      if ( __n > 0 )
        while ( __n -- )
   ++ __i;
      else
        while ( __n ++ )
   -- __i;
    }
# 143
template < typename _RandomAccessIterator, typename _Distance >
    inline void
    __advance ( _RandomAccessIterator & __i, _Distance __n,
              random_access_iterator_tag )
    {



      __i += __n;
    }
# 166 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    advance ( _InputIterator & __i, _Distance __n )
    {

      typename iterator_traits < _InputIterator > :: difference_type __d = __n;
      std :: __advance ( __i, __d, std :: __iterator_category ( __i ) );
    }
# 195 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    class reverse_iterator
    : public iterator < typename iterator_traits < _Iterator > :: iterator_category,
        typename iterator_traits < _Iterator > :: value_type,
        typename iterator_traits < _Iterator > :: difference_type,
        typename iterator_traits < _Iterator > :: pointer,
                      typename iterator_traits < _Iterator > :: reference >
    {
    protected :
      _Iterator current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
              difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

    public :






      reverse_iterator ( ) : current ( ) { }




      explicit
      reverse_iterator ( iterator_type __x ) : current ( __x ) { }




      reverse_iterator ( const reverse_iterator & __x )
      : current ( __x . current ) { }





      template < typename _Iter >
        reverse_iterator ( const reverse_iterator < _Iter > & __x )
 : current ( __x . base ( ) ) { }




      iterator_type
      base ( ) const
      { return current; }






      reference
      operator * ( ) const
      {
 _Iterator __tmp = current;
 return * -- __tmp;
      }






      pointer
      operator -> ( ) const
      { return & ( operator * ( ) ); }






      reverse_iterator &
      operator ++ ( )
      {
 -- current;
 return * this;
      }






      reverse_iterator
      operator ++ ( int )
      {
 reverse_iterator __tmp = * this;
 -- current;
 return __tmp;
      }






      reverse_iterator &
      operator -- ( )
      {
 ++ current;
 return * this;
      }






      reverse_iterator
      operator -- ( int )
      {
 reverse_iterator __tmp = * this;
 ++ current;
 return __tmp;
      }






      reverse_iterator
      operator + ( difference_type __n ) const
      { return reverse_iterator ( current - __n ); }






      reverse_iterator &
      operator += ( difference_type __n )
      {
 current -= __n;
 return * this;
      }






      reverse_iterator
      operator - ( difference_type __n ) const
      { return reverse_iterator ( current + __n ); }






      reverse_iterator &
      operator -= ( difference_type __n )
      {
 current += __n;
 return * this;
      }






      reference
      operator [ ] ( difference_type __n ) const
      { return * ( * this + __n ); }
    };
# 276 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator == ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 282
template < typename _Iterator >
    inline bool
    operator < ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 288
template < typename _Iterator >
    inline bool
    operator != ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x == __y ); }
# 294
template < typename _Iterator >
    inline bool
    operator > ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y < __x; }
# 300
template < typename _Iterator >
    inline bool
    operator <= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __y < __x ); }
# 306
template < typename _Iterator >
    inline bool
    operator >= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x < __y ); }
# 312
template < typename _Iterator >
    inline typename reverse_iterator < _Iterator > :: difference_type
    operator - ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) - __x . base ( ); }
# 318
template < typename _Iterator >
    inline reverse_iterator < _Iterator >
    operator + ( typename reverse_iterator < _Iterator > :: difference_type __n,
       const reverse_iterator < _Iterator > & __x )
    { return reverse_iterator < _Iterator > ( __x . base ( ) - __n ); }
# 326
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator == ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 332
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator < ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 338
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator != ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x == __y ); }
# 344
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator > ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y < __x; }
# 350
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator <= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __y < __x ); }
# 356
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator >= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x < __y ); }
# 362
template < typename _IteratorL, typename _IteratorR >







    inline typename reverse_iterator < _IteratorL > :: difference_type
    operator - ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )

    { return __y . base ( ) - __x . base ( ); }
# 388 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class back_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit
      back_insert_iterator ( _Container & __x ) : container ( & __x ) { }

      back_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_back ( __value );
 return * this;
      }

      back_insert_iterator &
      operator * ( )
      { return * this; }


      back_insert_iterator &
      operator ++ ( )
      { return * this; }


      back_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 457 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    inline back_insert_iterator < _Container >
    back_inserter ( _Container & __x )
    { return back_insert_iterator < _Container > ( __x ); }
# 472 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class front_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit front_insert_iterator ( _Container & __x ) : container ( & __x ) { }

      front_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_front ( __value );
 return * this;
      }

      front_insert_iterator &
      operator * ( )
      { return * this; }


      front_insert_iterator &
      operator ++ ( )
      { return * this; }


      front_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 540 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    inline front_insert_iterator < _Container >
    front_inserter ( _Container & __x )
    { return front_insert_iterator < _Container > ( __x ); }
# 559 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;
      typename _Container :: iterator iter;

    public :

      typedef _Container container_type;





      insert_iterator ( _Container & __x, typename _Container :: iterator __i )
      : container ( & __x ), iter ( __i ) { }

      insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 iter = container -> insert ( iter, __value );
 ++ iter;
 return * this;
      }

      insert_iterator &
      operator * ( )
      { return * this; }


      insert_iterator &
      operator ++ ( )
      { return * this; }


      insert_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 646 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container, typename _Iterator >
    inline insert_iterator < _Container >
    inserter ( _Container & __x, _Iterator __i )
    {
      return insert_iterator < _Container > ( __x,
      typename _Container :: iterator ( __i ) );
    }
# 654
}
# 656
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 665 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
using std::iterator_traits;
# 666
using std::iterator;
# 667
template < typename _Iterator, typename _Container >
    class __normal_iterator
    {
    protected :
      _Iterator _M_current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: iterator_category
                                                             iterator_category;
      typedef typename iterator_traits < _Iterator > :: value_type value_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
                                                             difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

      __normal_iterator ( ) : _M_current ( _Iterator ( ) ) { }

      explicit
      __normal_iterator ( const _Iterator & __i ) : _M_current ( __i ) { }


      template < typename _Iter >
        __normal_iterator ( const __normal_iterator < _Iter,
     typename __enable_if <
              ( std :: __are_same < _Iter, typename _Container :: pointer > :: __value ),
        _Container > :: __type > & __i )
        : _M_current ( __i . base ( ) ) { }


      reference
      operator * ( ) const
      { return * _M_current; }

      pointer
      operator -> ( ) const
      { return _M_current; }

      __normal_iterator &
      operator ++ ( )
      {
 ++ _M_current;
 return * this;
      }

      __normal_iterator
      operator ++ ( int )
      { return __normal_iterator ( _M_current ++ ); }


      __normal_iterator &
      operator -- ( )
      {
 -- _M_current;
 return * this;
      }

      __normal_iterator
      operator -- ( int )
      { return __normal_iterator ( _M_current -- ); }


      reference
      operator [ ] ( const difference_type & __n ) const
      { return _M_current [ __n ]; }

      __normal_iterator &
      operator += ( const difference_type & __n )
      { _M_current += __n; return * this; }

      __normal_iterator
      operator + ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current + __n ); }

      __normal_iterator &
      operator -= ( const difference_type & __n )
      { _M_current -= __n; return * this; }

      __normal_iterator
      operator - ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current - __n ); }

      const _Iterator &
      base ( ) const
      { return _M_current; }
    };
# 763 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 769
template < typename _Iterator, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 775
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 781
template < typename _Iterator, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 788
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 794
template < typename _Iterator, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 800
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 806
template < typename _Iterator, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 812
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 818
template < typename _Iterator, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 824
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 830
template < typename _Iterator, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 840
template < typename _IteratorL, typename _IteratorR, typename _Container >







    inline typename __normal_iterator < _IteratorL, _Container > :: difference_type
    operator - ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )

    { return __lhs . base ( ) - __rhs . base ( ); }
# 854
template < typename _Iterator, typename _Container >
    inline typename __normal_iterator < _Iterator, _Container > :: difference_type
    operator - ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) - __rhs . base ( ); }
# 860
template < typename _Iterator, typename _Container >
    inline __normal_iterator < _Iterator, _Container >
    operator + ( typename __normal_iterator < _Iterator, _Container > :: difference_type
       __n, const __normal_iterator < _Iterator, _Container > & __i )
    { return __normal_iterator < _Iterator, _Container > ( __i . base ( ) + __n ); }
# 866
}
# 47 "/usr/include/c++/4.4/debug/debug.h" 3
namespace std { 
# 49
namespace __debug { }
# 50
}
# 55
namespace __gnu_debug { 
# 57
using namespace std::__debug;
# 58
}
# 74 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 79
template< bool _BoolType> 
# 80
struct __iter_swap { 
# 82
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          typedef typename iterator_traits < _ForwardIterator1 > :: value_type
            _ValueType1;
          _ValueType1 __tmp = ( * __a );
          * __a = ( * __b );
          * __b = ( __tmp );
 }
# 92
}; 
# 95
template<> struct __iter_swap< true>  { 
# 97
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          swap ( * __a, * __b );
        }
# 103
}; 
# 115 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline void
    iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
    {
      typedef typename iterator_traits < _ForwardIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: value_type
 _ValueType2;











      typedef typename iterator_traits < _ForwardIterator1 > :: reference
 _ReferenceType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: reference
 _ReferenceType2;
      std :: __iter_swap < __are_same < _ValueType1, _ValueType2 > :: __value
 && __are_same < _ValueType1 &, _ReferenceType1 > :: __value
 && __are_same < _ValueType2 &, _ReferenceType2 > :: __value > ::
 iter_swap ( __a, __b );
    }
# 156 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator2
    swap_ranges ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2 )
    {





      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 std :: iter_swap ( __first1, __first2 );
      return __first2;
    }
# 184 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b )
    {



      if ( __b < __a )
 return __b;
      return __a;
    }
# 207 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b )
    {



      if ( __a < __b )
 return __b;
      return __a;
    }
# 230 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __b, __a ) )
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __a, __b ) )
 return __b;
      return __a;
    }
# 264
template < typename _Iterator,
    bool _IsNormal = __is_normal_iterator < _Iterator > :: __value >
    struct __niter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 273
template < typename _Iterator >
    struct __niter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 282
template < typename _Iterator,
    bool _IsMove = __is_move_iterator < _Iterator > :: __value >
    struct __miter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 291
template < typename _Iterator >
    struct __miter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 305
template< bool __T3, bool __T4, class > 
# 306
struct __copy_move { 
# 308
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   for (; __first != __last; ++ __result, ++ __first )
     * __result = * __first;
   return __result;
 }
# 316
}; 
# 334 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 336
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   typedef typename iterator_traits < _II > :: difference_type _Distance;
   for ( _Distance __n = __last - __first; __n > 0; -- __n )
     {
       * __result = * __first;
       ++ __first;
       ++ __result;
     }
   return __result;
 }
# 349
}; 
# 371 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _IsMove> 
# 372
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 374
template < typename _Tp >
        static _Tp *
        __copy_m ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   __builtin_memmove ( __result, __first,
       sizeof ( _Tp ) * ( __last - __first ) );
   return __result + ( __last - __first );
 }
# 382
}; 
# 384
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a ( _II __first, _II __last, _OI __result )
    {
      typedef typename iterator_traits < _II > :: value_type _ValueTypeI;
      typedef typename iterator_traits < _OI > :: value_type _ValueTypeO;
      typedef typename iterator_traits < _II > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueTypeI )
                      && __is_pointer < _II > :: __value
                      && __is_pointer < _OI > :: __value
        && __are_same < _ValueTypeI, _ValueTypeO > :: __value );

      return std :: __copy_move < _IsMove, __simple,
                       _Category > :: __copy_m ( __first, __last, __result );
    }
# 402
template< class _CharT> struct char_traits; 
# 405
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 408
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 411
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( _CharT *, _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 417
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( const _CharT *, const _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 423
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT, char_traits < _CharT > >,
     istreambuf_iterator < _CharT, char_traits < _CharT > >, _CharT * );
# 429
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a2 ( _II __first, _II __last, _OI __result )
    {
      return _OI ( std :: __copy_move_a < _IsMove >
   ( std :: __niter_base < _II > :: __b ( __first ),
    std :: __niter_base < _II > :: __b ( __last ),
    std :: __niter_base < _OI > :: __b ( __result ) ) );
    }
# 456 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
    inline _OI
    copy ( _II __first, _II __last, _OI __result )
    {




      ;

      return ( std :: __copy_move_a2 < __is_move_iterator < _II > :: __value >
       ( std :: __miter_base < _II > :: __b ( __first ),
        std :: __miter_base < _II > :: __b ( __last ), __result ) );
    }
# 509 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool __T5, bool __T6, class > 
# 510
struct __copy_move_backward { 
# 512
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   while ( __first != __last )
     * -- __result = * -- __last;
   return __result;
 }
# 520
}; 
# 538 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 540
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   typename iterator_traits < _BI1 > :: difference_type __n;
   for ( __n = __last - __first; __n > 0; -- __n )
     * -- __result = * -- __last;
   return __result;
 }
# 549
}; 
# 567 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template< bool _IsMove> 
# 568
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 570
template < typename _Tp >
        static _Tp *
        __copy_move_b ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   const ptrdiff_t _Num = __last - __first;
   __builtin_memmove ( __result - _Num, __first, sizeof ( _Tp ) * _Num );
   return __result - _Num;
 }
# 578
}; 
# 580
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      typedef typename iterator_traits < _BI1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _BI2 > :: value_type _ValueType2;
      typedef typename iterator_traits < _BI1 > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueType1 )
                      && __is_pointer < _BI1 > :: __value
                      && __is_pointer < _BI2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __copy_move_backward < _IsMove, __simple,
                                _Category > :: __copy_move_b ( __first,
         __last,
         __result );
    }
# 598
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a2 ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      return _BI2 ( std :: __copy_move_backward_a < _IsMove >
    ( std :: __niter_base < _BI1 > :: __b ( __first ),
     std :: __niter_base < _BI1 > :: __b ( __last ),
     std :: __niter_base < _BI2 > :: __b ( __result ) ) );
    }
# 626 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
    inline _BI2
    copy_backward ( _BI1 __first, _BI1 __last, _BI2 __result )
    {






      ;

      return ( std :: __copy_move_backward_a2 < __is_move_iterator < _BI1 > :: __value >
       ( std :: __miter_base < _BI1 > :: __b ( __first ),
        std :: __miter_base < _BI1 > :: __b ( __last ), __result ) );
    }
# 684 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
       const _Tp & __value )
    {
      for (; __first != __last; ++ __first )
 * __first = __value;
    }
# 694
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++ __first )
 * __first = __tmp;
    }
# 706
template < typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, void > :: __type
    __fill_a ( _Tp * __first, _Tp * __last, const _Tp & __c )
    {
      const _Tp __tmp = __c;
      __builtin_memset ( __first, static_cast < unsigned char > ( __tmp ),
         __last - __first );
    }
# 728 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    fill ( _ForwardIterator __first, _ForwardIterator __last, const _Tp & __value )
    {



      ;

      std :: __fill_a ( std :: __niter_base < _ForwardIterator > :: __b ( __first ),
      std :: __niter_base < _ForwardIterator > :: __b ( __last ), __value );
    }
# 741
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      for (; __n > 0; -- __n, ++ __first )
 * __first = __value;
      return __first;
    }
# 751
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __n > 0; -- __n, ++ __first )
 * __first = __tmp;
      return __first;
    }
# 762
template < typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, _Tp * > :: __type
    __fill_n_a ( _Tp * __first, _Size __n, const _Tp & __c )
    {
      std :: __fill_a ( __first, __first + __n, __c );
      return __first + __n;
    }
# 783 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OI, typename _Size, typename _Tp >
    inline _OI
    fill_n ( _OI __first, _Size __n, const _Tp & __value )
    {



      return _OI ( std :: __fill_n_a ( std :: __niter_base < _OI > :: __b ( __first ),
     __n, __value ) );
    }
# 794
template< bool _BoolType> 
# 795
struct __equal { 
# 797
template < typename _II1, typename _II2 >
        static bool
        equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
        {
   for (; __first1 != __last1; ++ __first1, ++ __first2 )
     if ( ! ( * __first1 == * __first2 ) )
       return false;
   return true;
 }
# 806
}; 
# 809
template<> struct __equal< true>  { 
# 811
template < typename _Tp >
        static bool
        equal ( const _Tp * __first1, const _Tp * __last1, const _Tp * __first2 )
        {
   return ! __builtin_memcmp ( __first1, __first2, sizeof ( _Tp )
       * ( __last1 - __first1 ) );
 }
# 818
}; 
# 820
template < typename _II1, typename _II2 >
    inline bool
    __equal_aux ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple = ( __is_integer < _ValueType1 > :: __value
                      && __is_pointer < _II1 > :: __value
                      && __is_pointer < _II2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __equal < __simple > :: equal ( __first1, __last1, __first2 );
    }
# 835
template< class , class > 
# 836
struct __lc_rai { 
# 838
template < typename _II1, typename _II2 >
        static _II1
        __newlast1 ( _II1, _II1 __last1, _II2, _II2 )
        { return __last1; }
# 843
template < typename _II >
        static bool
        __cnd2 ( _II __first, _II __last )
        { return __first != __last; }
# 847
}; 
# 850
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 852
template < typename _RAI1, typename _RAI2 >
        static _RAI1
        __newlast1 ( _RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2 )
        {
   const typename iterator_traits < _RAI1 > :: difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits < _RAI2 > :: difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }
# 864
template < typename _RAI >
        static bool
        __cnd2 ( _RAI, _RAI )
        { return true; }
# 868
}; 
# 870
template< bool _BoolType> 
# 871
struct __lexicographical_compare { 
# 873
template < typename _II1, typename _II2 >
        static bool __lc ( _II1, _II1, _II2, _II2 );
# 875
}; 
# 877
template < bool _BoolType >
    template < typename _II1, typename _II2 >
      bool
      __lexicographical_compare < _BoolType > ::
      __lc ( _II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2 )
      {
 typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
 typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
 typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;

 __last1 = __rai_type :: __newlast1 ( __first1, __last1,
      __first2, __last2 );
 for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
      ++ __first1, ++ __first2 )
   {
     if ( * __first1 < * __first2 )
       return true;
     if ( * __first2 < * __first1 )
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }
# 901
template<> struct __lexicographical_compare< true>  { 
# 903
template < typename _Tp, typename _Up >
        static bool
        __lc ( const _Tp * __first1, const _Tp * __last1,
      const _Up * __first2, const _Up * __last2 )
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp ( __first1, __first2,
      std :: min ( __len1, __len2 ) );
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
# 914
}; 
# 916
template < typename _II1, typename _II2 >
    inline bool
    __lexicographical_compare_aux ( _II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple =
 ( __is_byte < _ValueType1 > :: __value && __is_byte < _ValueType2 > :: __value
  && ! __gnu_cxx :: __numeric_traits < _ValueType1 > :: __is_signed
  && ! __gnu_cxx :: __numeric_traits < _ValueType2 > :: __is_signed
  && __is_pointer < _II1 > :: __value
  && __is_pointer < _II2 > :: __value );

      return std :: __lexicographical_compare < __simple > :: __lc ( __first1, __last1,
           __first2, __last2 );
    }
# 934
}
# 936
namespace std __attribute((__visibility__("default"))) { 
# 950 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {






      ;

      return std :: __equal_aux ( std :: __niter_base < _II1 > :: __b ( __first1 ),
         std :: __niter_base < _II1 > :: __b ( __last1 ),
         std :: __niter_base < _II2 > :: __b ( __first2 ) );
    }
# 982 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _IIter1, typename _IIter2, typename _BinaryPredicate >
    inline bool
    equal ( _IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 if ( ! bool ( __binary_pred ( * __first1, * __first2 ) ) )
   return false;
      return true;
    }
# 1013 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2 )
    {

      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;




      ;
      ;

      return std :: __lexicographical_compare_aux
 ( std :: __niter_base < _II1 > :: __b ( __first1 ),
  std :: __niter_base < _II1 > :: __b ( __last1 ),
  std :: __niter_base < _II2 > :: __b ( __first2 ),
  std :: __niter_base < _II2 > :: __b ( __last2 ) );
    }
# 1048 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2, typename _Compare >
    bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp )
    {
      typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
      typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
      typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;




      ;
      ;

      __last1 = __rai_type :: __newlast1 ( __first1, __last1, __first2, __last2 );
      for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
    ++ __first1, ++ __first2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     return true;
   if ( __comp ( * __first2, * __first1 ) )
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1088 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2 )
    {






      ;

      while ( __first1 != __last1 && * __first1 == * __first2 )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1125 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      while ( __first1 != __last1 && bool ( __binary_pred ( * __first1, * __first2 ) ) )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1144
}
# 52 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/4.4/bits/char_traits.h" 3
template< class _CharT> 
# 65
struct _Char_types { 
# 67
typedef unsigned long int_type; 
# 68
typedef std::streampos pos_type; 
# 69
typedef std::streamoff off_type; 
# 70
typedef mbstate_t state_type; 
# 71
}; 
# 89 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types < _CharT > :: int_type int_type;
      typedef typename _Char_types < _CharT > :: pos_type pos_type;
      typedef typename _Char_types < _CharT > :: off_type off_type;
      typedef typename _Char_types < _CharT > :: state_type state_type;

      static void
      assign ( char_type & __c1, const char_type & __c2 )
      { __c1 = __c2; }

      static bool
      eq ( const char_type & __c1, const char_type & __c2 )
      { return __c1 == __c2; }

      static bool
      lt ( const char_type & __c1, const char_type & __c2 )
      { return __c1 < __c2; }

      static int
      compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n );

      static std :: size_t
      length ( const char_type * __s );

      static const char_type *
      find ( const char_type * __s, std :: size_t __n, const char_type & __a );

      static char_type *
      move ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      copy ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      assign ( char_type * __s, std :: size_t __n, char_type __a );

      static char_type
      to_char_type ( const int_type & __c )
      { return static_cast < char_type > ( __c ); }

      static int_type
      to_int_type ( const char_type & __c )
      { return static_cast < int_type > ( __c ); }

      static bool
      eq_int_type ( const int_type & __c1, const int_type & __c2 )
      { return __c1 == __c2; }

      static int_type
      eof ( )
      { return static_cast < int_type > ( ( - 1 ) ); }

      static int_type
      not_eof ( const int_type & __c )
      { return ! eq_int_type ( __c, eof ( ) ) ? __c : to_int_type ( char_type ( ) ); }
    };
# 149
template < typename _CharT >
    int
    char_traits < _CharT > ::
    compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
 if ( lt ( __s1 [ __i ], __s2 [ __i ] ) )
   return - 1;
 else if ( lt ( __s2 [ __i ], __s1 [ __i ] ) )
   return 1;
      return 0;
    }
# 162
template < typename _CharT >
    std :: size_t
    char_traits < _CharT > ::
    length ( const char_type * __p )
    {
      std :: size_t __i = 0;
      while ( ! eq ( __p [ __i ], char_type ( ) ) )
        ++ __i;
      return __i;
    }
# 173
template < typename _CharT >
    const typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    find ( const char_type * __s, std :: size_t __n, const char_type & __a )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
        if ( eq ( __s [ __i ], __a ) )
          return __s + __i;
      return 0;
    }
# 184
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    move ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      return static_cast < _CharT * > ( __builtin_memmove ( __s1, __s2,
          __n * sizeof ( char_type ) ) );
    }
# 193
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    copy ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {

      std :: copy ( __s2, __s2 + __n, __s1 );
      return __s1;
    }
# 203
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    assign ( char_type * __s, std :: size_t __n, char_type __a )
    {

      std :: fill_n ( __s, __n, __a );
      return __s;
    }
# 213
}
# 215
namespace std __attribute((__visibility__("default"))) { 
# 230 "/usr/include/c++/4.4/bits/char_traits.h" 3
template< class _CharT> 
# 231
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 232
}; 
# 237
template<> struct char_traits< char>  { 
# 239
typedef char char_type; 
# 240
typedef int int_type; 
# 241
typedef streampos pos_type; 
# 242
typedef streamoff off_type; 
# 243
typedef mbstate_t state_type; 
# 246
static void assign(char_type &__c1, const char_type &__c2) 
# 247
{ __c1 = __c2; } 
# 250
static bool eq(const char_type &__c1, const char_type &__c2) 
# 251
{ return __c1 == __c2; } 
# 254
static bool lt(const char_type &__c1, const char_type &__c2) 
# 255
{ return __c1 < __c2; } 
# 258
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 259
{ return __builtin_memcmp(__s1, __s2, __n); } 
# 262
static size_t length(const char_type *__s) 
# 263
{ return __builtin_strlen(__s); } 
# 266
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 267
{ return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); } 
# 270
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 271
{ return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); } 
# 274
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 275
{ return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); } 
# 278
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 279
{ return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); } 
# 282
static char_type to_char_type(const int_type &__c) 
# 283
{ return static_cast< char_type>(__c); } 
# 288
static int_type to_int_type(const char_type &__c) 
# 289
{ return static_cast< int_type>((static_cast< unsigned char>(__c))); } 
# 292
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 293
{ return __c1 == __c2; } 
# 296
static int_type eof() 
# 297
{ return static_cast< int_type>((-1)); } 
# 300
static int_type not_eof(const int_type &__c) 
# 301
{ return (__c == eof()) ? 0 : __c; } 
# 302
}; 
# 308
template<> struct char_traits< wchar_t>  { 
# 310
typedef wchar_t char_type; 
# 311
typedef wint_t int_type; 
# 312
typedef streamoff off_type; 
# 313
typedef wstreampos pos_type; 
# 314
typedef mbstate_t state_type; 
# 317
static void assign(char_type &__c1, const char_type &__c2) 
# 318
{ __c1 = __c2; } 
# 321
static bool eq(const char_type &__c1, const char_type &__c2) 
# 322
{ return __c1 == __c2; } 
# 325
static bool lt(const char_type &__c1, const char_type &__c2) 
# 326
{ return __c1 < __c2; } 
# 329
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 330
{ return wmemcmp(__s1, __s2, __n); } 
# 333
static size_t length(const char_type *__s) 
# 334
{ return wcslen(__s); } 
# 337
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 338
{ return wmemchr(__s, __a, __n); } 
# 341
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 342
{ return wmemmove(__s1, __s2, __n); } 
# 345
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 346
{ return wmemcpy(__s1, __s2, __n); } 
# 349
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 350
{ return wmemset(__s, __a, __n); } 
# 353
static char_type to_char_type(const int_type &__c) 
# 354
{ return (char_type)__c; } 
# 357
static int_type to_int_type(const char_type &__c) 
# 358
{ return (int_type)__c; } 
# 361
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 362
{ return __c1 == __c2; } 
# 365
static int_type eof() 
# 366
{ return static_cast< int_type>(4294967295U); } 
# 369
static int_type not_eof(const int_type &__c) 
# 370
{ return eq_int_type(__c, eof()) ? (0) : __c; } 
# 371
}; 
# 374
}
# 28 "/usr/include/x86_64-linux-gnu/bits/locale.h" 3
enum { 
# 29
__LC_CTYPE, 
# 30
__LC_NUMERIC, 
# 31
__LC_TIME, 
# 32
__LC_COLLATE, 
# 33
__LC_MONETARY, 
# 34
__LC_MESSAGES, 
# 35
__LC_ALL, 
# 36
__LC_PAPER, 
# 37
__LC_NAME, 
# 38
__LC_ADDRESS, 
# 39
__LC_TELEPHONE, 
# 40
__LC_MEASUREMENT, 
# 41
__LC_IDENTIFICATION
# 42
}; 
# 54 "/usr/include/locale.h" 3
extern "C" { struct lconv { 
# 58
char *decimal_point; 
# 59
char *thousands_sep; 
# 65
char *grouping; 
# 71
char *int_curr_symbol; 
# 72
char *currency_symbol; 
# 73
char *mon_decimal_point; 
# 74
char *mon_thousands_sep; 
# 75
char *mon_grouping; 
# 76
char *positive_sign; 
# 77
char *negative_sign; 
# 78
char int_frac_digits; 
# 79
char frac_digits; 
# 81
char p_cs_precedes; 
# 83
char p_sep_by_space; 
# 85
char n_cs_precedes; 
# 87
char n_sep_by_space; 
# 94
char p_sign_posn; 
# 95
char n_sign_posn; 
# 98
char int_p_cs_precedes; 
# 100
char int_p_sep_by_space; 
# 102
char int_n_cs_precedes; 
# 104
char int_n_sep_by_space; 
# 111
char int_p_sign_posn; 
# 112
char int_n_sign_posn; 
# 121 "/usr/include/locale.h" 3
}; }
# 125
extern "C" char *setlocale(int , const char * ) throw(); 
# 128
extern "C" lconv *localeconv() throw(); 
# 152 "/usr/include/locale.h" 3
extern "C" __locale_t newlocale(int , const char * , __locale_t ) throw(); 
# 187 "/usr/include/locale.h" 3
extern "C" __locale_t duplocale(__locale_t ) throw(); 
# 191
extern "C" void freelocale(__locale_t ) throw(); 
# 198
extern "C" __locale_t uselocale(__locale_t ) throw(); 
# 53 "/usr/include/c++/4.4/clocale" 3
namespace std __attribute((__visibility__("default"))) { 
# 55
using ::lconv;
# 56
using ::setlocale;
# 57
using ::localeconv;
# 59
}
# 50 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 54
}
# 57
namespace std __attribute((__visibility__("default"))) { 
# 59
typedef __locale_t __c_locale; 
# 66
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 67
__out, const int 
# 68
__size __attribute((__unused__)), const char *
# 69
__fmt, ...) 
# 70
{ 
# 72
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 85 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++locale.h" 3
__builtin_va_list __args; 
# 86
__builtin_va_start(__args,__fmt); 
# 89
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 94
__builtin_va_end(__args); 
# 97
__gnu_cxx::__uselocale(__old); 
# 105
return __ret; 
# 106
} 
# 108
}
# 49 "/usr/include/ctype.h" 3
enum { 
# 50
_ISupper = 256, 
# 51
_ISlower = 512, 
# 52
_ISalpha = 1024, 
# 53
_ISdigit = 2048, 
# 54
_ISxdigit = 4096, 
# 55
_ISspace = 8192, 
# 56
_ISprint = 16384, 
# 57
_ISgraph = 32768, 
# 58
_ISblank = 1, 
# 59
_IScntrl, 
# 60
_ISpunct = 4, 
# 61
_ISalnum = 8
# 62
}; 
# 81 "/usr/include/ctype.h" 3
extern "C" const unsigned short **__ctype_b_loc() throw()
# 82
 __attribute((const)); 
# 83
extern "C" const __int32_t **__ctype_tolower_loc() throw()
# 84
 __attribute((const)); 
# 85
extern "C" const __int32_t **__ctype_toupper_loc() throw()
# 86
 __attribute((const)); 
# 102 "/usr/include/ctype.h" 3
extern "C" int isalnum(int) throw(); 
# 103
extern "C" int isalpha(int) throw(); 
# 104
extern "C" int iscntrl(int) throw(); 
# 105
extern "C" int isdigit(int) throw(); 
# 106
extern "C" int islower(int) throw(); 
# 107
extern "C" int isgraph(int) throw(); 
# 108
extern "C" int isprint(int) throw(); 
# 109
extern "C" int ispunct(int) throw(); 
# 110
extern "C" int isspace(int) throw(); 
# 111
extern "C" int isupper(int) throw(); 
# 112
extern "C" int isxdigit(int) throw(); 
# 116
extern "C" int tolower(int ) throw(); 
# 119
extern "C" int toupper(int ) throw(); 
# 128
extern "C" int isblank(int) throw(); 
# 135
extern "C" int isctype(int , int ) throw(); 
# 142
extern "C" int isascii(int ) throw(); 
# 146
extern "C" int toascii(int ) throw(); 
# 150
extern "C" int _toupper(int) throw(); 
# 151
extern "C" int _tolower(int) throw(); 
# 247 "/usr/include/ctype.h" 3
extern "C" int isalnum_l(int, __locale_t) throw(); 
# 248
extern "C" int isalpha_l(int, __locale_t) throw(); 
# 249
extern "C" int iscntrl_l(int, __locale_t) throw(); 
# 250
extern "C" int isdigit_l(int, __locale_t) throw(); 
# 251
extern "C" int islower_l(int, __locale_t) throw(); 
# 252
extern "C" int isgraph_l(int, __locale_t) throw(); 
# 253
extern "C" int isprint_l(int, __locale_t) throw(); 
# 254
extern "C" int ispunct_l(int, __locale_t) throw(); 
# 255
extern "C" int isspace_l(int, __locale_t) throw(); 
# 256
extern "C" int isupper_l(int, __locale_t) throw(); 
# 257
extern "C" int isxdigit_l(int, __locale_t) throw(); 
# 259
extern "C" int isblank_l(int, __locale_t) throw(); 
# 263
extern "C" int __tolower_l(int , __locale_t ) throw(); 
# 264
extern "C" int tolower_l(int , __locale_t ) throw(); 
# 267
extern "C" int __toupper_l(int , __locale_t ) throw(); 
# 268
extern "C" int toupper_l(int , __locale_t ) throw(); 
# 64 "/usr/include/c++/4.4/cctype" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
using ::isalnum;
# 67
using ::isalpha;
# 68
using ::iscntrl;
# 69
using ::isdigit;
# 70
using ::isgraph;
# 71
using ::islower;
# 72
using ::isprint;
# 73
using ::ispunct;
# 74
using ::isspace;
# 75
using ::isupper;
# 76
using ::isxdigit;
# 77
using ::tolower;
# 78
using ::toupper;
# 80
}
# 46 "/usr/include/c++/4.4/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
class locale; 
# 51
template < typename _Facet >
    bool
    has_facet ( const locale & ) throw ( );
# 55
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & );
# 60
template < typename _CharT >
    bool
    isspace ( _CharT, const locale & );
# 64
template < typename _CharT >
    bool
    isprint ( _CharT, const locale & );
# 68
template < typename _CharT >
    bool
    iscntrl ( _CharT, const locale & );
# 72
template < typename _CharT >
    bool
    isupper ( _CharT, const locale & );
# 76
template < typename _CharT >
    bool
    islower ( _CharT, const locale & );
# 80
template < typename _CharT >
    bool
    isalpha ( _CharT, const locale & );
# 84
template < typename _CharT >
    bool
    isdigit ( _CharT, const locale & );
# 88
template < typename _CharT >
    bool
    ispunct ( _CharT, const locale & );
# 92
template < typename _CharT >
    bool
    isxdigit ( _CharT, const locale & );
# 96
template < typename _CharT >
    bool
    isalnum ( _CharT, const locale & );
# 100
template < typename _CharT >
    bool
    isgraph ( _CharT, const locale & );
# 104
template < typename _CharT >
    _CharT
    toupper ( _CharT, const locale & );
# 108
template < typename _CharT >
    _CharT
    tolower ( _CharT, const locale & );
# 113
struct ctype_base; 
# 114
template < typename _CharT >
    class ctype;
# 116
template<> class ctype< char> ; 
# 118
template<> class ctype< wchar_t> ; 
# 120
template < typename _CharT >
    class ctype_byname;
# 124
class codecvt_base; 
# 125
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt;
# 127
template<> class codecvt< char, char, __mbstate_t> ; 
# 129
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 131
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt_byname;
# 136
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class num_get;
# 138
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class num_put;
# 141
template < typename _CharT > class numpunct;
# 142
template < typename _CharT > class numpunct_byname;
# 145
template < typename _CharT >
    class collate;
# 147
template < typename _CharT > class
    collate_byname;
# 151
class time_base; 
# 152
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get; 
# 154
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname; 
# 156
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put; 
# 158
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname; 
# 162
class money_base; 
# 164
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get; 
# 166
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put; 
# 169
template< class _CharT, bool _Intl = false> class moneypunct; 
# 171
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 175
class messages_base; 
# 176
template< class _CharT> class messages; 
# 178
template< class _CharT> class messages_byname; 
# 181
}
# 74 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
struct sched_param { 
# 76
int __sched_priority; 
# 77
}; 
# 83
extern "C" int clone(int (* )(void * ), void * , int , void * , ...) throw(); 
# 87
extern "C" int unshare(int ) throw(); 
# 90
extern "C" int sched_getcpu() throw(); 
# 101
struct __sched_param { 
# 103
int __sched_priority; 
# 104
}; 
# 116 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
typedef unsigned long __cpu_mask; 
# 126
typedef 
# 124
struct { 
# 125
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 126
} cpu_set_t; 
# 201 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
extern "C" int __sched_cpucount(size_t , const cpu_set_t * ) throw(); 
# 203
extern "C" cpu_set_t *__sched_cpualloc(size_t ) throw(); 
# 204
extern "C" void __sched_cpufree(cpu_set_t * ) throw(); 
# 51 "/usr/include/sched.h" 3
extern "C" int sched_setparam(__pid_t , const sched_param * ) throw(); 
# 55
extern "C" int sched_getparam(__pid_t , sched_param * ) throw(); 
# 58
extern "C" int sched_setscheduler(__pid_t , int , const sched_param * ) throw(); 
# 62
extern "C" int sched_getscheduler(__pid_t ) throw(); 
# 65
extern "C" int sched_yield() throw(); 
# 68
extern "C" int sched_get_priority_max(int ) throw(); 
# 71
extern "C" int sched_get_priority_min(int ) throw(); 
# 74
extern "C" int sched_rr_get_interval(__pid_t , timespec * ) throw(); 
# 118 "/usr/include/sched.h" 3
extern "C" int sched_setaffinity(__pid_t , size_t , const cpu_set_t * ) throw(); 
# 122
extern "C" int sched_getaffinity(__pid_t , size_t , cpu_set_t * ) throw(); 
# 32 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 35 "/usr/include/pthread.h" 3
enum { 
# 36
PTHREAD_CREATE_JOINABLE, 
# 38
PTHREAD_CREATE_DETACHED
# 40
}; 
# 45
enum { 
# 46
PTHREAD_MUTEX_TIMED_NP, 
# 47
PTHREAD_MUTEX_RECURSIVE_NP, 
# 48
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 49
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 52
PTHREAD_MUTEX_NORMAL = 0, 
# 53
PTHREAD_MUTEX_RECURSIVE, 
# 54
PTHREAD_MUTEX_ERRORCHECK, 
# 55
PTHREAD_MUTEX_DEFAULT = 0, 
# 59
PTHREAD_MUTEX_FAST_NP = 0
# 61
}; 
# 67
enum { 
# 68
PTHREAD_MUTEX_STALLED, 
# 69
PTHREAD_MUTEX_STALLED_NP = 0, 
# 70
PTHREAD_MUTEX_ROBUST, 
# 71
PTHREAD_MUTEX_ROBUST_NP = 1
# 72
}; 
# 79
enum { 
# 80
PTHREAD_PRIO_NONE, 
# 81
PTHREAD_PRIO_INHERIT, 
# 82
PTHREAD_PRIO_PROTECT
# 83
}; 
# 116 "/usr/include/pthread.h" 3
enum { 
# 117
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 118
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 119
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 120
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 121
}; 
# 148 "/usr/include/pthread.h" 3
enum { 
# 149
PTHREAD_INHERIT_SCHED, 
# 151
PTHREAD_EXPLICIT_SCHED
# 153
}; 
# 158
enum { 
# 159
PTHREAD_SCOPE_SYSTEM, 
# 161
PTHREAD_SCOPE_PROCESS
# 163
}; 
# 168
enum { 
# 169
PTHREAD_PROCESS_PRIVATE, 
# 171
PTHREAD_PROCESS_SHARED
# 173
}; 
# 182 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 184
void (*__routine)(void *); 
# 185
void *__arg; 
# 186
int __canceltype; 
# 187
_pthread_cleanup_buffer *__prev; 
# 188
}; 
# 192
enum { 
# 193
PTHREAD_CANCEL_ENABLE, 
# 195
PTHREAD_CANCEL_DISABLE
# 197
}; 
# 199
enum { 
# 200
PTHREAD_CANCEL_DEFERRED, 
# 202
PTHREAD_CANCEL_ASYNCHRONOUS
# 204
}; 
# 225 "/usr/include/pthread.h" 3
extern "C" int pthread_create(pthread_t *__restrict__ , const pthread_attr_t *__restrict__ , void *(* )(void *), void *__restrict__ ) throw()
# 228
 __attribute((__nonnull__(1, 3))); 
# 234
extern "C" void pthread_exit(void * ) __attribute((__noreturn__)); 
# 242
extern "C" int pthread_join(pthread_t , void ** ); 
# 247
extern "C" int pthread_tryjoin_np(pthread_t , void ** ) throw(); 
# 255
extern "C" int pthread_timedjoin_np(pthread_t , void ** , const timespec * ); 
# 263
extern "C" int pthread_detach(pthread_t ) throw(); 
# 267
extern "C" pthread_t pthread_self() throw() __attribute((const)); 
# 270
extern "C" { extern __attribute((gnu_inline)) inline int pthread_equal(pthread_t , pthread_t ) throw(); } 
# 278
extern "C" int pthread_attr_init(pthread_attr_t * ) throw() __attribute((__nonnull__(1))); 
# 281
extern "C" int pthread_attr_destroy(pthread_attr_t * ) throw()
# 282
 __attribute((__nonnull__(1))); 
# 285
extern "C" int pthread_attr_getdetachstate(const pthread_attr_t * , int * ) throw()
# 287
 __attribute((__nonnull__(1, 2))); 
# 290
extern "C" int pthread_attr_setdetachstate(pthread_attr_t * , int ) throw()
# 292
 __attribute((__nonnull__(1))); 
# 296
extern "C" int pthread_attr_getguardsize(const pthread_attr_t * , size_t * ) throw()
# 298
 __attribute((__nonnull__(1, 2))); 
# 301
extern "C" int pthread_attr_setguardsize(pthread_attr_t * , size_t ) throw()
# 303
 __attribute((__nonnull__(1))); 
# 307
extern "C" int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ , sched_param *__restrict__ ) throw()
# 310
 __attribute((__nonnull__(1, 2))); 
# 313
extern "C" int pthread_attr_setschedparam(pthread_attr_t *__restrict__ , const sched_param *__restrict__ ) throw()
# 315
 __attribute((__nonnull__(1, 2))); 
# 318
extern "C" int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ , int *__restrict__ ) throw()
# 320
 __attribute((__nonnull__(1, 2))); 
# 323
extern "C" int pthread_attr_setschedpolicy(pthread_attr_t * , int ) throw()
# 324
 __attribute((__nonnull__(1))); 
# 327
extern "C" int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ , int *__restrict__ ) throw()
# 329
 __attribute((__nonnull__(1, 2))); 
# 332
extern "C" int pthread_attr_setinheritsched(pthread_attr_t * , int ) throw()
# 334
 __attribute((__nonnull__(1))); 
# 338
extern "C" int pthread_attr_getscope(const pthread_attr_t *__restrict__ , int *__restrict__ ) throw()
# 340
 __attribute((__nonnull__(1, 2))); 
# 343
extern "C" int pthread_attr_setscope(pthread_attr_t * , int ) throw()
# 344
 __attribute((__nonnull__(1))); 
# 347
extern "C" int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ , void **__restrict__ ) throw()
# 349
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 355
extern "C" int pthread_attr_setstackaddr(pthread_attr_t * , void * ) throw()
# 357
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 360
extern "C" int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ , size_t *__restrict__ ) throw()
# 362
 __attribute((__nonnull__(1, 2))); 
# 367
extern "C" int pthread_attr_setstacksize(pthread_attr_t * , size_t ) throw()
# 369
 __attribute((__nonnull__(1))); 
# 373
extern "C" int pthread_attr_getstack(const pthread_attr_t *__restrict__ , void **__restrict__ , size_t *__restrict__ ) throw()
# 376
 __attribute((__nonnull__(1, 2, 3))); 
# 381
extern "C" int pthread_attr_setstack(pthread_attr_t * , void * , size_t ) throw()
# 382
 __attribute((__nonnull__(1))); 
# 388
extern "C" int pthread_attr_setaffinity_np(pthread_attr_t * , size_t , const cpu_set_t * ) throw()
# 391
 __attribute((__nonnull__(1, 3))); 
# 395
extern "C" int pthread_attr_getaffinity_np(const pthread_attr_t * , size_t , cpu_set_t * ) throw()
# 398
 __attribute((__nonnull__(1, 3))); 
# 404
extern "C" int pthread_getattr_np(pthread_t , pthread_attr_t * ) throw()
# 405
 __attribute((__nonnull__(2))); 
# 413
extern "C" int pthread_setschedparam(pthread_t , int , const sched_param * ) throw()
# 415
 __attribute((__nonnull__(3))); 
# 418
extern "C" int pthread_getschedparam(pthread_t , int *__restrict__ , sched_param *__restrict__ ) throw()
# 421
 __attribute((__nonnull__(2, 3))); 
# 424
extern "C" int pthread_setschedprio(pthread_t , int ) throw(); 
# 430
extern "C" int pthread_getname_np(pthread_t , char * , size_t ) throw()
# 432
 __attribute((__nonnull__(2))); 
# 435
extern "C" int pthread_setname_np(pthread_t , const char * ) throw()
# 436
 __attribute((__nonnull__(2))); 
# 442
extern "C" int pthread_getconcurrency() throw(); 
# 445
extern "C" int pthread_setconcurrency(int ) throw(); 
# 453
extern "C" int pthread_yield() throw(); 
# 458
extern "C" int pthread_setaffinity_np(pthread_t , size_t , const cpu_set_t * ) throw()
# 460
 __attribute((__nonnull__(3))); 
# 463
extern "C" int pthread_getaffinity_np(pthread_t , size_t , cpu_set_t * ) throw()
# 465
 __attribute((__nonnull__(3))); 
# 478 "/usr/include/pthread.h" 3
extern "C" int pthread_once(pthread_once_t * , void (* )(void))
# 479
 __attribute((__nonnull__(1, 2))); 
# 490 "/usr/include/pthread.h" 3
extern "C" int pthread_setcancelstate(int , int * ); 
# 494
extern "C" int pthread_setcanceltype(int , int * ); 
# 497
extern "C" int pthread_cancel(pthread_t ); 
# 502
extern "C" void pthread_testcancel(); 
# 515
extern "C" { typedef 
# 508
struct { 
# 510
struct { 
# 511
__jmp_buf __cancel_jmp_buf; 
# 512
int __mask_was_saved; 
# 513
} __cancel_jmp_buf[1]; 
# 514
void *__pad[4]; 
# 515
} __pthread_unwind_buf_t __attribute((__aligned__)); }
# 524 "/usr/include/pthread.h" 3
extern "C" { struct __pthread_cleanup_frame { 
# 526
void (*__cancel_routine)(void *); 
# 527
void *__cancel_arg; 
# 528
int __do_it; 
# 529
int __cancel_type; 
# 530
}; }
# 535
extern "C" { class __pthread_cleanup_class { 
# 537
void (*__cancel_routine)(void *); 
# 538
void *__cancel_arg; 
# 539
int __do_it; 
# 540
int __cancel_type; 
# 543
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 544
{ } 
# 545
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 546
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 547
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 548
} 
# 549
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 550
}; }
# 726 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 727
extern "C" int __sigsetjmp(__jmp_buf_tag * , int ) throw(); 
# 733
extern "C" int pthread_mutex_init(pthread_mutex_t * , const pthread_mutexattr_t * ) throw()
# 735
 __attribute((__nonnull__(1))); 
# 738
extern "C" int pthread_mutex_destroy(pthread_mutex_t * ) throw()
# 739
 __attribute((__nonnull__(1))); 
# 742
extern "C" int pthread_mutex_trylock(pthread_mutex_t * ) throw()
# 743
 __attribute((__nonnull__(1))); 
# 746
extern "C" int pthread_mutex_lock(pthread_mutex_t * ) throw()
# 747
 __attribute((__nonnull__(1))); 
# 751
extern "C" int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ , const timespec *__restrict__ ) throw()
# 753
 __attribute((__nonnull__(1, 2))); 
# 757
extern "C" int pthread_mutex_unlock(pthread_mutex_t * ) throw()
# 758
 __attribute((__nonnull__(1))); 
# 762
extern "C" int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ , int *__restrict__ ) throw()
# 765
 __attribute((__nonnull__(1, 2))); 
# 769
extern "C" int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ , int , int *__restrict__ ) throw()
# 772
 __attribute((__nonnull__(1, 3))); 
# 777
extern "C" int pthread_mutex_consistent(pthread_mutex_t * ) throw()
# 778
 __attribute((__nonnull__(1))); 
# 780
extern "C" int pthread_mutex_consistent_np(pthread_mutex_t * ) throw()
# 781
 __attribute((__nonnull__(1))); 
# 790 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_init(pthread_mutexattr_t * ) throw()
# 791
 __attribute((__nonnull__(1))); 
# 794
extern "C" int pthread_mutexattr_destroy(pthread_mutexattr_t * ) throw()
# 795
 __attribute((__nonnull__(1))); 
# 798
extern "C" int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 801
 __attribute((__nonnull__(1, 2))); 
# 804
extern "C" int pthread_mutexattr_setpshared(pthread_mutexattr_t * , int ) throw()
# 806
 __attribute((__nonnull__(1))); 
# 810
extern "C" int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 812
 __attribute((__nonnull__(1, 2))); 
# 817
extern "C" int pthread_mutexattr_settype(pthread_mutexattr_t * , int ) throw()
# 818
 __attribute((__nonnull__(1))); 
# 822
extern "C" int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 825
 __attribute((__nonnull__(1, 2))); 
# 829
extern "C" int pthread_mutexattr_setprotocol(pthread_mutexattr_t * , int ) throw()
# 831
 __attribute((__nonnull__(1))); 
# 834
extern "C" int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 837
 __attribute((__nonnull__(1, 2))); 
# 840
extern "C" int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * , int ) throw()
# 842
 __attribute((__nonnull__(1))); 
# 846
extern "C" int pthread_mutexattr_getrobust(const pthread_mutexattr_t * , int * ) throw()
# 848
 __attribute((__nonnull__(1, 2))); 
# 850
extern "C" int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * , int * ) throw()
# 852
 __attribute((__nonnull__(1, 2))); 
# 856
extern "C" int pthread_mutexattr_setrobust(pthread_mutexattr_t * , int ) throw()
# 858
 __attribute((__nonnull__(1))); 
# 860
extern "C" int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * , int ) throw()
# 862
 __attribute((__nonnull__(1))); 
# 872 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_init(pthread_rwlock_t *__restrict__ , const pthread_rwlockattr_t *__restrict__ ) throw()
# 874
 __attribute((__nonnull__(1))); 
# 877
extern "C" int pthread_rwlock_destroy(pthread_rwlock_t * ) throw()
# 878
 __attribute((__nonnull__(1))); 
# 881
extern "C" int pthread_rwlock_rdlock(pthread_rwlock_t * ) throw()
# 882
 __attribute((__nonnull__(1))); 
# 885
extern "C" int pthread_rwlock_tryrdlock(pthread_rwlock_t * ) throw()
# 886
 __attribute((__nonnull__(1))); 
# 890
extern "C" int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ , const timespec *__restrict__ ) throw()
# 892
 __attribute((__nonnull__(1, 2))); 
# 896
extern "C" int pthread_rwlock_wrlock(pthread_rwlock_t * ) throw()
# 897
 __attribute((__nonnull__(1))); 
# 900
extern "C" int pthread_rwlock_trywrlock(pthread_rwlock_t * ) throw()
# 901
 __attribute((__nonnull__(1))); 
# 905
extern "C" int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ , const timespec *__restrict__ ) throw()
# 907
 __attribute((__nonnull__(1, 2))); 
# 911
extern "C" int pthread_rwlock_unlock(pthread_rwlock_t * ) throw()
# 912
 __attribute((__nonnull__(1))); 
# 918
extern "C" int pthread_rwlockattr_init(pthread_rwlockattr_t * ) throw()
# 919
 __attribute((__nonnull__(1))); 
# 922
extern "C" int pthread_rwlockattr_destroy(pthread_rwlockattr_t * ) throw()
# 923
 __attribute((__nonnull__(1))); 
# 926
extern "C" int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ , int *__restrict__ ) throw()
# 929
 __attribute((__nonnull__(1, 2))); 
# 932
extern "C" int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * , int ) throw()
# 934
 __attribute((__nonnull__(1))); 
# 937
extern "C" int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ , int *__restrict__ ) throw()
# 940
 __attribute((__nonnull__(1, 2))); 
# 943
extern "C" int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * , int ) throw()
# 944
 __attribute((__nonnull__(1))); 
# 952
extern "C" int pthread_cond_init(pthread_cond_t *__restrict__ , const pthread_condattr_t *__restrict__ ) throw()
# 954
 __attribute((__nonnull__(1))); 
# 957
extern "C" int pthread_cond_destroy(pthread_cond_t * ) throw()
# 958
 __attribute((__nonnull__(1))); 
# 961
extern "C" int pthread_cond_signal(pthread_cond_t * ) throw()
# 962
 __attribute((__nonnull__(1))); 
# 965
extern "C" int pthread_cond_broadcast(pthread_cond_t * ) throw()
# 966
 __attribute((__nonnull__(1))); 
# 973
extern "C" int pthread_cond_wait(pthread_cond_t *__restrict__ , pthread_mutex_t *__restrict__ )
# 975
 __attribute((__nonnull__(1, 2))); 
# 984 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait(pthread_cond_t *__restrict__ , pthread_mutex_t *__restrict__ , const timespec *__restrict__ )
# 987
 __attribute((__nonnull__(1, 2, 3))); 
# 992
extern "C" int pthread_condattr_init(pthread_condattr_t * ) throw()
# 993
 __attribute((__nonnull__(1))); 
# 996
extern "C" int pthread_condattr_destroy(pthread_condattr_t * ) throw()
# 997
 __attribute((__nonnull__(1))); 
# 1000
extern "C" int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ , int *__restrict__ ) throw()
# 1003
 __attribute((__nonnull__(1, 2))); 
# 1006
extern "C" int pthread_condattr_setpshared(pthread_condattr_t * , int ) throw()
# 1007
 __attribute((__nonnull__(1))); 
# 1011
extern "C" int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ , __clockid_t *__restrict__ ) throw()
# 1014
 __attribute((__nonnull__(1, 2))); 
# 1017
extern "C" int pthread_condattr_setclock(pthread_condattr_t * , __clockid_t ) throw()
# 1019
 __attribute((__nonnull__(1))); 
# 1028 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_init(pthread_spinlock_t * , int ) throw()
# 1029
 __attribute((__nonnull__(1))); 
# 1032
extern "C" int pthread_spin_destroy(pthread_spinlock_t * ) throw()
# 1033
 __attribute((__nonnull__(1))); 
# 1036
extern "C" int pthread_spin_lock(pthread_spinlock_t * ) throw()
# 1037
 __attribute((__nonnull__(1))); 
# 1040
extern "C" int pthread_spin_trylock(pthread_spinlock_t * ) throw()
# 1041
 __attribute((__nonnull__(1))); 
# 1044
extern "C" int pthread_spin_unlock(pthread_spinlock_t * ) throw()
# 1045
 __attribute((__nonnull__(1))); 
# 1052
extern "C" int pthread_barrier_init(pthread_barrier_t *__restrict__ , const pthread_barrierattr_t *__restrict__ , unsigned ) throw()
# 1055
 __attribute((__nonnull__(1))); 
# 1058
extern "C" int pthread_barrier_destroy(pthread_barrier_t * ) throw()
# 1059
 __attribute((__nonnull__(1))); 
# 1062
extern "C" int pthread_barrier_wait(pthread_barrier_t * ) throw()
# 1063
 __attribute((__nonnull__(1))); 
# 1067
extern "C" int pthread_barrierattr_init(pthread_barrierattr_t * ) throw()
# 1068
 __attribute((__nonnull__(1))); 
# 1071
extern "C" int pthread_barrierattr_destroy(pthread_barrierattr_t * ) throw()
# 1072
 __attribute((__nonnull__(1))); 
# 1075
extern "C" int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ , int *__restrict__ ) throw()
# 1078
 __attribute((__nonnull__(1, 2))); 
# 1081
extern "C" int pthread_barrierattr_setpshared(pthread_barrierattr_t * , int ) throw()
# 1083
 __attribute((__nonnull__(1))); 
# 1095 "/usr/include/pthread.h" 3
extern "C" int pthread_key_create(pthread_key_t * , void (* )(void *)) throw()
# 1097
 __attribute((__nonnull__(1))); 
# 1100
extern "C" int pthread_key_delete(pthread_key_t ) throw(); 
# 1103
extern "C" void *pthread_getspecific(pthread_key_t ) throw(); 
# 1106
extern "C" int pthread_setspecific(pthread_key_t , const void * ) throw(); 
# 1112
extern "C" int pthread_getcpuclockid(pthread_t , __clockid_t * ) throw()
# 1114
 __attribute((__nonnull__(2))); 
# 1129 "/usr/include/pthread.h" 3
extern "C" int pthread_atfork(void (* )(void), void (* )(void), void (* )(void)) throw(); 
# 1137
extern "C" { 
# 1136
__attribute((__gnu_inline__)) inline int 
# 1137
pthread_equal(pthread_t __thread1, pthread_t __thread2) throw() 
# 1138
{ 
# 1139
return __thread1 == __thread2; 
# 1140
} } 
# 268 "/usr/include/unistd.h" 3
extern "C" { typedef __intptr_t intptr_t; }
# 275
extern "C" { typedef __socklen_t socklen_t; }
# 288 "/usr/include/unistd.h" 3
extern "C" int access(const char * , int ) throw() __attribute((__nonnull__(1))); 
# 293
extern "C" int euidaccess(const char * , int ) throw()
# 294
 __attribute((__nonnull__(1))); 
# 297
extern "C" int eaccess(const char * , int ) throw()
# 298
 __attribute((__nonnull__(1))); 
# 305
extern "C" int faccessat(int , const char * , int , int ) throw()
# 306
 __attribute((__nonnull__(2))); 
# 331 "/usr/include/unistd.h" 3
extern "C" __off_t lseek(int , __off_t , int ) throw(); 
# 342 "/usr/include/unistd.h" 3
extern "C" __off64_t lseek64(int , __off64_t , int ) throw(); 
# 350
extern "C" int close(int ); 
# 357
extern "C" ssize_t read(int , void * , size_t ); 
# 363
extern "C" ssize_t write(int , const void * , size_t ); 
# 373 "/usr/include/unistd.h" 3
extern "C" ssize_t pread(int , void * , size_t , __off_t ); 
# 381
extern "C" ssize_t pwrite(int , const void * , size_t , __off_t ); 
# 401 "/usr/include/unistd.h" 3
extern "C" ssize_t pread64(int , void * , size_t , __off64_t ); 
# 405
extern "C" ssize_t pwrite64(int , const void * , size_t , __off64_t ); 
# 414
extern "C" int pipe(int  [2]) throw(); 
# 419
extern "C" int pipe2(int  [2], int ) throw(); 
# 429 "/usr/include/unistd.h" 3
extern "C" unsigned alarm(unsigned ) throw(); 
# 441 "/usr/include/unistd.h" 3
extern "C" unsigned sleep(unsigned ); 
# 449
extern "C" __useconds_t ualarm(__useconds_t , __useconds_t ) throw(); 
# 457
extern "C" int usleep(__useconds_t ); 
# 466 "/usr/include/unistd.h" 3
extern "C" int pause(); 
# 470
extern "C" int chown(const char * , __uid_t , __gid_t ) throw()
# 471
 __attribute((__nonnull__(1))); 
# 475
extern "C" int fchown(int , __uid_t , __gid_t ) throw(); 
# 480
extern "C" int lchown(const char * , __uid_t , __gid_t ) throw()
# 481
 __attribute((__nonnull__(1))); 
# 488
extern "C" int fchownat(int , const char * , __uid_t , __gid_t , int ) throw()
# 490
 __attribute((__nonnull__(2))); 
# 494
extern "C" int chdir(const char * ) throw() __attribute((__nonnull__(1))); 
# 498
extern "C" int fchdir(int ) throw(); 
# 508 "/usr/include/unistd.h" 3
extern "C" char *getcwd(char * , size_t ) throw(); 
# 514
extern "C" char *get_current_dir_name() throw(); 
# 522
extern "C" char *getwd(char * ) throw()
# 523
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 528
extern "C" int dup(int ) throw(); 
# 531
extern "C" int dup2(int , int ) throw(); 
# 536
extern "C" int dup3(int , int , int ) throw(); 
# 540
extern "C" { extern char **__environ; } 
# 542
extern "C" { extern char **environ; } 
# 548
extern "C" int execve(const char * , char *const  [], char *const  []) throw()
# 549
 __attribute((__nonnull__(1, 2))); 
# 554
extern "C" int fexecve(int , char *const  [], char *const  []) throw()
# 555
 __attribute((__nonnull__(2))); 
# 560
extern "C" int execv(const char * , char *const  []) throw()
# 561
 __attribute((__nonnull__(1, 2))); 
# 565
extern "C" int execle(const char * , const char * , ...) throw()
# 566
 __attribute((__nonnull__(1, 2))); 
# 570
extern "C" int execl(const char * , const char * , ...) throw()
# 571
 __attribute((__nonnull__(1, 2))); 
# 575
extern "C" int execvp(const char * , char *const  []) throw()
# 576
 __attribute((__nonnull__(1, 2))); 
# 581
extern "C" int execlp(const char * , const char * , ...) throw()
# 582
 __attribute((__nonnull__(1, 2))); 
# 587
extern "C" int execvpe(const char * , char *const  [], char *const  []) throw()
# 589
 __attribute((__nonnull__(1, 2))); 
# 595
extern "C" int nice(int ) throw(); 
# 600
extern "C" void _exit(int ) __attribute((__noreturn__)); 
# 27 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3
enum { 
# 28
_PC_LINK_MAX, 
# 30
_PC_MAX_CANON, 
# 32
_PC_MAX_INPUT, 
# 34
_PC_NAME_MAX, 
# 36
_PC_PATH_MAX, 
# 38
_PC_PIPE_BUF, 
# 40
_PC_CHOWN_RESTRICTED, 
# 42
_PC_NO_TRUNC, 
# 44
_PC_VDISABLE, 
# 46
_PC_SYNC_IO, 
# 48
_PC_ASYNC_IO, 
# 50
_PC_PRIO_IO, 
# 52
_PC_SOCK_MAXBUF, 
# 54
_PC_FILESIZEBITS, 
# 56
_PC_REC_INCR_XFER_SIZE, 
# 58
_PC_REC_MAX_XFER_SIZE, 
# 60
_PC_REC_MIN_XFER_SIZE, 
# 62
_PC_REC_XFER_ALIGN, 
# 64
_PC_ALLOC_SIZE_MIN, 
# 66
_PC_SYMLINK_MAX, 
# 68
_PC_2_SYMLINKS
# 70
}; 
# 74
enum { 
# 75
_SC_ARG_MAX, 
# 77
_SC_CHILD_MAX, 
# 79
_SC_CLK_TCK, 
# 81
_SC_NGROUPS_MAX, 
# 83
_SC_OPEN_MAX, 
# 85
_SC_STREAM_MAX, 
# 87
_SC_TZNAME_MAX, 
# 89
_SC_JOB_CONTROL, 
# 91
_SC_SAVED_IDS, 
# 93
_SC_REALTIME_SIGNALS, 
# 95
_SC_PRIORITY_SCHEDULING, 
# 97
_SC_TIMERS, 
# 99
_SC_ASYNCHRONOUS_IO, 
# 101
_SC_PRIORITIZED_IO, 
# 103
_SC_SYNCHRONIZED_IO, 
# 105
_SC_FSYNC, 
# 107
_SC_MAPPED_FILES, 
# 109
_SC_MEMLOCK, 
# 111
_SC_MEMLOCK_RANGE, 
# 113
_SC_MEMORY_PROTECTION, 
# 115
_SC_MESSAGE_PASSING, 
# 117
_SC_SEMAPHORES, 
# 119
_SC_SHARED_MEMORY_OBJECTS, 
# 121
_SC_AIO_LISTIO_MAX, 
# 123
_SC_AIO_MAX, 
# 125
_SC_AIO_PRIO_DELTA_MAX, 
# 127
_SC_DELAYTIMER_MAX, 
# 129
_SC_MQ_OPEN_MAX, 
# 131
_SC_MQ_PRIO_MAX, 
# 133
_SC_VERSION, 
# 135
_SC_PAGESIZE, 
# 138
_SC_RTSIG_MAX, 
# 140
_SC_SEM_NSEMS_MAX, 
# 142
_SC_SEM_VALUE_MAX, 
# 144
_SC_SIGQUEUE_MAX, 
# 146
_SC_TIMER_MAX, 
# 151
_SC_BC_BASE_MAX, 
# 153
_SC_BC_DIM_MAX, 
# 155
_SC_BC_SCALE_MAX, 
# 157
_SC_BC_STRING_MAX, 
# 159
_SC_COLL_WEIGHTS_MAX, 
# 161
_SC_EQUIV_CLASS_MAX, 
# 163
_SC_EXPR_NEST_MAX, 
# 165
_SC_LINE_MAX, 
# 167
_SC_RE_DUP_MAX, 
# 169
_SC_CHARCLASS_NAME_MAX, 
# 172
_SC_2_VERSION, 
# 174
_SC_2_C_BIND, 
# 176
_SC_2_C_DEV, 
# 178
_SC_2_FORT_DEV, 
# 180
_SC_2_FORT_RUN, 
# 182
_SC_2_SW_DEV, 
# 184
_SC_2_LOCALEDEF, 
# 187
_SC_PII, 
# 189
_SC_PII_XTI, 
# 191
_SC_PII_SOCKET, 
# 193
_SC_PII_INTERNET, 
# 195
_SC_PII_OSI, 
# 197
_SC_POLL, 
# 199
_SC_SELECT, 
# 201
_SC_UIO_MAXIOV, 
# 203
_SC_IOV_MAX = 60, 
# 205
_SC_PII_INTERNET_STREAM, 
# 207
_SC_PII_INTERNET_DGRAM, 
# 209
_SC_PII_OSI_COTS, 
# 211
_SC_PII_OSI_CLTS, 
# 213
_SC_PII_OSI_M, 
# 215
_SC_T_IOV_MAX, 
# 219
_SC_THREADS, 
# 221
_SC_THREAD_SAFE_FUNCTIONS, 
# 223
_SC_GETGR_R_SIZE_MAX, 
# 225
_SC_GETPW_R_SIZE_MAX, 
# 227
_SC_LOGIN_NAME_MAX, 
# 229
_SC_TTY_NAME_MAX, 
# 231
_SC_THREAD_DESTRUCTOR_ITERATIONS, 
# 233
_SC_THREAD_KEYS_MAX, 
# 235
_SC_THREAD_STACK_MIN, 
# 237
_SC_THREAD_THREADS_MAX, 
# 239
_SC_THREAD_ATTR_STACKADDR, 
# 241
_SC_THREAD_ATTR_STACKSIZE, 
# 243
_SC_THREAD_PRIORITY_SCHEDULING, 
# 245
_SC_THREAD_PRIO_INHERIT, 
# 247
_SC_THREAD_PRIO_PROTECT, 
# 249
_SC_THREAD_PROCESS_SHARED, 
# 252
_SC_NPROCESSORS_CONF, 
# 254
_SC_NPROCESSORS_ONLN, 
# 256
_SC_PHYS_PAGES, 
# 258
_SC_AVPHYS_PAGES, 
# 260
_SC_ATEXIT_MAX, 
# 262
_SC_PASS_MAX, 
# 265
_SC_XOPEN_VERSION, 
# 267
_SC_XOPEN_XCU_VERSION, 
# 269
_SC_XOPEN_UNIX, 
# 271
_SC_XOPEN_CRYPT, 
# 273
_SC_XOPEN_ENH_I18N, 
# 275
_SC_XOPEN_SHM, 
# 278
_SC_2_CHAR_TERM, 
# 280
_SC_2_C_VERSION, 
# 282
_SC_2_UPE, 
# 285
_SC_XOPEN_XPG2, 
# 287
_SC_XOPEN_XPG3, 
# 289
_SC_XOPEN_XPG4, 
# 292
_SC_CHAR_BIT, 
# 294
_SC_CHAR_MAX, 
# 296
_SC_CHAR_MIN, 
# 298
_SC_INT_MAX, 
# 300
_SC_INT_MIN, 
# 302
_SC_LONG_BIT, 
# 304
_SC_WORD_BIT, 
# 306
_SC_MB_LEN_MAX, 
# 308
_SC_NZERO, 
# 310
_SC_SSIZE_MAX, 
# 312
_SC_SCHAR_MAX, 
# 314
_SC_SCHAR_MIN, 
# 316
_SC_SHRT_MAX, 
# 318
_SC_SHRT_MIN, 
# 320
_SC_UCHAR_MAX, 
# 322
_SC_UINT_MAX, 
# 324
_SC_ULONG_MAX, 
# 326
_SC_USHRT_MAX, 
# 329
_SC_NL_ARGMAX, 
# 331
_SC_NL_LANGMAX, 
# 333
_SC_NL_MSGMAX, 
# 335
_SC_NL_NMAX, 
# 337
_SC_NL_SETMAX, 
# 339
_SC_NL_TEXTMAX, 
# 342
_SC_XBS5_ILP32_OFF32, 
# 344
_SC_XBS5_ILP32_OFFBIG, 
# 346
_SC_XBS5_LP64_OFF64, 
# 348
_SC_XBS5_LPBIG_OFFBIG, 
# 351
_SC_XOPEN_LEGACY, 
# 353
_SC_XOPEN_REALTIME, 
# 355
_SC_XOPEN_REALTIME_THREADS, 
# 358
_SC_ADVISORY_INFO, 
# 360
_SC_BARRIERS, 
# 362
_SC_BASE, 
# 364
_SC_C_LANG_SUPPORT, 
# 366
_SC_C_LANG_SUPPORT_R, 
# 368
_SC_CLOCK_SELECTION, 
# 370
_SC_CPUTIME, 
# 372
_SC_THREAD_CPUTIME, 
# 374
_SC_DEVICE_IO, 
# 376
_SC_DEVICE_SPECIFIC, 
# 378
_SC_DEVICE_SPECIFIC_R, 
# 380
_SC_FD_MGMT, 
# 382
_SC_FIFO, 
# 384
_SC_PIPE, 
# 386
_SC_FILE_ATTRIBUTES, 
# 388
_SC_FILE_LOCKING, 
# 390
_SC_FILE_SYSTEM, 
# 392
_SC_MONOTONIC_CLOCK, 
# 394
_SC_MULTI_PROCESS, 
# 396
_SC_SINGLE_PROCESS, 
# 398
_SC_NETWORKING, 
# 400
_SC_READER_WRITER_LOCKS, 
# 402
_SC_SPIN_LOCKS, 
# 404
_SC_REGEXP, 
# 406
_SC_REGEX_VERSION, 
# 408
_SC_SHELL, 
# 410
_SC_SIGNALS, 
# 412
_SC_SPAWN, 
# 414
_SC_SPORADIC_SERVER, 
# 416
_SC_THREAD_SPORADIC_SERVER, 
# 418
_SC_SYSTEM_DATABASE, 
# 420
_SC_SYSTEM_DATABASE_R, 
# 422
_SC_TIMEOUTS, 
# 424
_SC_TYPED_MEMORY_OBJECTS, 
# 426
_SC_USER_GROUPS, 
# 428
_SC_USER_GROUPS_R, 
# 430
_SC_2_PBS, 
# 432
_SC_2_PBS_ACCOUNTING, 
# 434
_SC_2_PBS_LOCATE, 
# 436
_SC_2_PBS_MESSAGE, 
# 438
_SC_2_PBS_TRACK, 
# 440
_SC_SYMLOOP_MAX, 
# 442
_SC_STREAMS, 
# 444
_SC_2_PBS_CHECKPOINT, 
# 447
_SC_V6_ILP32_OFF32, 
# 449
_SC_V6_ILP32_OFFBIG, 
# 451
_SC_V6_LP64_OFF64, 
# 453
_SC_V6_LPBIG_OFFBIG, 
# 456
_SC_HOST_NAME_MAX, 
# 458
_SC_TRACE, 
# 460
_SC_TRACE_EVENT_FILTER, 
# 462
_SC_TRACE_INHERIT, 
# 464
_SC_TRACE_LOG, 
# 467
_SC_LEVEL1_ICACHE_SIZE, 
# 469
_SC_LEVEL1_ICACHE_ASSOC, 
# 471
_SC_LEVEL1_ICACHE_LINESIZE, 
# 473
_SC_LEVEL1_DCACHE_SIZE, 
# 475
_SC_LEVEL1_DCACHE_ASSOC, 
# 477
_SC_LEVEL1_DCACHE_LINESIZE, 
# 479
_SC_LEVEL2_CACHE_SIZE, 
# 481
_SC_LEVEL2_CACHE_ASSOC, 
# 483
_SC_LEVEL2_CACHE_LINESIZE, 
# 485
_SC_LEVEL3_CACHE_SIZE, 
# 487
_SC_LEVEL3_CACHE_ASSOC, 
# 489
_SC_LEVEL3_CACHE_LINESIZE, 
# 491
_SC_LEVEL4_CACHE_SIZE, 
# 493
_SC_LEVEL4_CACHE_ASSOC, 
# 495
_SC_LEVEL4_CACHE_LINESIZE, 
# 499
_SC_IPV6 = 235, 
# 501
_SC_RAW_SOCKETS, 
# 504
_SC_V7_ILP32_OFF32, 
# 506
_SC_V7_ILP32_OFFBIG, 
# 508
_SC_V7_LP64_OFF64, 
# 510
_SC_V7_LPBIG_OFFBIG, 
# 513
_SC_SS_REPL_MAX, 
# 516
_SC_TRACE_EVENT_NAME_MAX, 
# 518
_SC_TRACE_NAME_MAX, 
# 520
_SC_TRACE_SYS_MAX, 
# 522
_SC_TRACE_USER_EVENT_MAX, 
# 525
_SC_XOPEN_STREAMS, 
# 528
_SC_THREAD_ROBUST_PRIO_INHERIT, 
# 530
_SC_THREAD_ROBUST_PRIO_PROTECT
# 532
}; 
# 536
enum { 
# 537
_CS_PATH, 
# 540
_CS_V6_WIDTH_RESTRICTED_ENVS, 
# 544
_CS_GNU_LIBC_VERSION, 
# 546
_CS_GNU_LIBPTHREAD_VERSION, 
# 549
_CS_V5_WIDTH_RESTRICTED_ENVS, 
# 553
_CS_V7_WIDTH_RESTRICTED_ENVS, 
# 557
_CS_LFS_CFLAGS = 1000, 
# 559
_CS_LFS_LDFLAGS, 
# 561
_CS_LFS_LIBS, 
# 563
_CS_LFS_LINTFLAGS, 
# 565
_CS_LFS64_CFLAGS, 
# 567
_CS_LFS64_LDFLAGS, 
# 569
_CS_LFS64_LIBS, 
# 571
_CS_LFS64_LINTFLAGS, 
# 574
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
# 576
_CS_XBS5_ILP32_OFF32_LDFLAGS, 
# 578
_CS_XBS5_ILP32_OFF32_LIBS, 
# 580
_CS_XBS5_ILP32_OFF32_LINTFLAGS, 
# 582
_CS_XBS5_ILP32_OFFBIG_CFLAGS, 
# 584
_CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
# 586
_CS_XBS5_ILP32_OFFBIG_LIBS, 
# 588
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
# 590
_CS_XBS5_LP64_OFF64_CFLAGS, 
# 592
_CS_XBS5_LP64_OFF64_LDFLAGS, 
# 594
_CS_XBS5_LP64_OFF64_LIBS, 
# 596
_CS_XBS5_LP64_OFF64_LINTFLAGS, 
# 598
_CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
# 600
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
# 602
_CS_XBS5_LPBIG_OFFBIG_LIBS, 
# 604
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
# 607
_CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
# 609
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
# 611
_CS_POSIX_V6_ILP32_OFF32_LIBS, 
# 613
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
# 615
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
# 617
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
# 619
_CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
# 621
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
# 623
_CS_POSIX_V6_LP64_OFF64_CFLAGS, 
# 625
_CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
# 627
_CS_POSIX_V6_LP64_OFF64_LIBS, 
# 629
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
# 631
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
# 633
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
# 635
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
# 637
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS, 
# 640
_CS_POSIX_V7_ILP32_OFF32_CFLAGS, 
# 642
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS, 
# 644
_CS_POSIX_V7_ILP32_OFF32_LIBS, 
# 646
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS, 
# 648
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS, 
# 650
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS, 
# 652
_CS_POSIX_V7_ILP32_OFFBIG_LIBS, 
# 654
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS, 
# 656
_CS_POSIX_V7_LP64_OFF64_CFLAGS, 
# 658
_CS_POSIX_V7_LP64_OFF64_LDFLAGS, 
# 660
_CS_POSIX_V7_LP64_OFF64_LIBS, 
# 662
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS, 
# 664
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS, 
# 666
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS, 
# 668
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS, 
# 670
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS, 
# 673
_CS_V6_ENV, 
# 675
_CS_V7_ENV
# 677
}; 
# 609 "/usr/include/unistd.h" 3
extern "C" long pathconf(const char * , int ) throw()
# 610
 __attribute((__nonnull__(1))); 
# 613
extern "C" long fpathconf(int , int ) throw(); 
# 616
extern "C" long sysconf(int ) throw(); 
# 620
extern "C" size_t confstr(int , char * , size_t ) throw(); 
# 625
extern "C" __pid_t getpid() throw(); 
# 628
extern "C" __pid_t getppid() throw(); 
# 633
extern "C" __pid_t getpgrp() throw(); 
# 643 "/usr/include/unistd.h" 3
extern "C" __pid_t __getpgid(__pid_t ) throw(); 
# 645
extern "C" __pid_t getpgid(__pid_t ) throw(); 
# 652
extern "C" int setpgid(__pid_t , __pid_t ) throw(); 
# 669 "/usr/include/unistd.h" 3
extern "C" int setpgrp() throw(); 
# 686 "/usr/include/unistd.h" 3
extern "C" __pid_t setsid() throw(); 
# 690
extern "C" __pid_t getsid(__pid_t ) throw(); 
# 694
extern "C" __uid_t getuid() throw(); 
# 697
extern "C" __uid_t geteuid() throw(); 
# 700
extern "C" __gid_t getgid() throw(); 
# 703
extern "C" __gid_t getegid() throw(); 
# 708
extern "C" int getgroups(int , __gid_t  []) throw(); 
# 712
extern "C" int group_member(__gid_t ) throw(); 
# 719
extern "C" int setuid(__uid_t ) throw(); 
# 724
extern "C" int setreuid(__uid_t , __uid_t ) throw(); 
# 729
extern "C" int seteuid(__uid_t ) throw(); 
# 736
extern "C" int setgid(__gid_t ) throw(); 
# 741
extern "C" int setregid(__gid_t , __gid_t ) throw(); 
# 746
extern "C" int setegid(__gid_t ) throw(); 
# 752
extern "C" int getresuid(__uid_t * , __uid_t * , __uid_t * ) throw(); 
# 757
extern "C" int getresgid(__gid_t * , __gid_t * , __gid_t * ) throw(); 
# 762
extern "C" int setresuid(__uid_t , __uid_t , __uid_t ) throw(); 
# 767
extern "C" int setresgid(__gid_t , __gid_t , __gid_t ) throw(); 
# 775
extern "C" __pid_t fork() throw(); 
# 783
extern "C" __pid_t vfork() throw(); 
# 789
extern "C" char *ttyname(int ) throw(); 
# 793
extern "C" int ttyname_r(int , char * , size_t ) throw()
# 794
 __attribute((__nonnull__(2))); 
# 798
extern "C" int isatty(int ) throw(); 
# 804
extern "C" int ttyslot() throw(); 
# 809
extern "C" int link(const char * , const char * ) throw()
# 810
 __attribute((__nonnull__(1, 2))); 
# 815
extern "C" int linkat(int , const char * , int , const char * , int ) throw()
# 817
 __attribute((__nonnull__(2, 4))); 
# 822
extern "C" int symlink(const char * , const char * ) throw()
# 823
 __attribute((__nonnull__(1, 2))); 
# 828
extern "C" ssize_t readlink(const char *__restrict__ , char *__restrict__ , size_t ) throw()
# 830
 __attribute((__nonnull__(1, 2))); 
# 835
extern "C" int symlinkat(const char * , int , const char * ) throw()
# 836
 __attribute((__nonnull__(1, 3))); 
# 839
extern "C" ssize_t readlinkat(int , const char *__restrict__ , char *__restrict__ , size_t ) throw()
# 841
 __attribute((__nonnull__(2, 3))); 
# 845
extern "C" int unlink(const char * ) throw() __attribute((__nonnull__(1))); 
# 849
extern "C" int unlinkat(int , const char * , int ) throw()
# 850
 __attribute((__nonnull__(2))); 
# 854
extern "C" int rmdir(const char * ) throw() __attribute((__nonnull__(1))); 
# 858
extern "C" __pid_t tcgetpgrp(int ) throw(); 
# 861
extern "C" int tcsetpgrp(int , __pid_t ) throw(); 
# 868
extern "C" char *getlogin(); 
# 876
extern "C" int getlogin_r(char * , size_t ) __attribute((__nonnull__(1))); 
# 881
extern "C" int setlogin(const char * ) throw() __attribute((__nonnull__(1))); 
# 59 "/usr/include/getopt.h" 3
extern "C" { extern char *optarg; } 
# 73 "/usr/include/getopt.h" 3
extern "C" { extern int optind; } 
# 78
extern "C" { extern int opterr; } 
# 82
extern "C" { extern int optopt; } 
# 152 "/usr/include/getopt.h" 3
extern "C" int getopt(int , char *const * , const char * ) throw(); 
# 898 "/usr/include/unistd.h" 3
extern "C" int gethostname(char * , size_t ) throw() __attribute((__nonnull__(1))); 
# 905
extern "C" int sethostname(const char * , size_t ) throw()
# 906
 __attribute((__nonnull__(1))); 
# 910
extern "C" int sethostid(long ) throw(); 
# 916
extern "C" int getdomainname(char * , size_t ) throw()
# 917
 __attribute((__nonnull__(1))); 
# 918
extern "C" int setdomainname(const char * , size_t ) throw()
# 919
 __attribute((__nonnull__(1))); 
# 925
extern "C" int vhangup() throw(); 
# 928
extern "C" int revoke(const char * ) throw() __attribute((__nonnull__(1))); 
# 936
extern "C" int profil(unsigned short * , size_t , size_t , unsigned ) throw()
# 938
 __attribute((__nonnull__(1))); 
# 944
extern "C" int acct(const char * ) throw(); 
# 948
extern "C" char *getusershell() throw(); 
# 949
extern "C" void endusershell() throw(); 
# 950
extern "C" void setusershell() throw(); 
# 956
extern "C" int daemon(int , int ) throw(); 
# 963
extern "C" int chroot(const char * ) throw() __attribute((__nonnull__(1))); 
# 967
extern "C" char *getpass(const char * ) __attribute((__nonnull__(1))); 
# 976 "/usr/include/unistd.h" 3
extern "C" int fsync(int ); 
# 983
extern "C" long gethostid(); 
# 986
extern "C" void sync() throw(); 
# 992
extern "C" int getpagesize() throw() __attribute((const)); 
# 997
extern "C" int getdtablesize() throw(); 
# 1007 "/usr/include/unistd.h" 3
extern "C" int truncate(const char * , __off_t ) throw()
# 1008
 __attribute((__nonnull__(1))); 
# 1019 "/usr/include/unistd.h" 3
extern "C" int truncate64(const char * , __off64_t ) throw()
# 1020
 __attribute((__nonnull__(1))); 
# 1029 "/usr/include/unistd.h" 3
extern "C" int ftruncate(int , __off_t ) throw(); 
# 1039 "/usr/include/unistd.h" 3
extern "C" int ftruncate64(int , __off64_t ) throw(); 
# 1050 "/usr/include/unistd.h" 3
extern "C" int brk(void * ) throw(); 
# 1056
extern "C" void *sbrk(intptr_t ) throw(); 
# 1071 "/usr/include/unistd.h" 3
extern "C" long syscall(long , ...) throw(); 
# 1094 "/usr/include/unistd.h" 3
extern "C" int lockf(int , int , __off_t ); 
# 1104 "/usr/include/unistd.h" 3
extern "C" int lockf64(int , int , __off64_t ); 
# 1125 "/usr/include/unistd.h" 3
extern "C" int fdatasync(int ); 
# 1133
extern "C" char *crypt(const char * , const char * ) throw()
# 1134
 __attribute((__nonnull__(1, 2))); 
# 1138
extern "C" void encrypt(char * , int ) throw() __attribute((__nonnull__(1))); 
# 1145
extern "C" void swab(const void *__restrict__ , void *__restrict__ , ssize_t ) throw()
# 1146
 __attribute((__nonnull__(1, 2))); 
# 1154
extern "C" char *ctermid(char * ) throw(); 
# 44 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 45
typedef pthread_key_t __gthread_key_t; 
# 46
typedef pthread_once_t __gthread_once_t; 
# 47
typedef pthread_mutex_t __gthread_mutex_t; 
# 48
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 49
typedef pthread_cond_t __gthread_cond_t; 
# 50
typedef timespec __gthread_time_t; 
# 118 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"))); 
# 119
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"))); 
# 120
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"))); 
# 122
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"))); 
# 123
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"))); 
# 124
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"))); 
# 125
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"))); 
# 126
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"))); 
# 127
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"))); 
# 128
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"))); 
# 130
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"))); 
# 131
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"))); 
# 134
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"))); 
# 137
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"))); 
# 138
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"))); 
# 139
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"))); 
# 141
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"))); 
# 142
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"))); 
# 143
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"))); 
# 144
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"))); 
# 145
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"))); 
# 148
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"))); 
# 149
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"))); 
# 150
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"))); 
# 151
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"))); 
# 152
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"))); 
# 238 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 239
{ 
# 240
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw_pthread_cancel)); 
# 242
return __gthread_active_ptr != (0); 
# 243
} 
# 649 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 650
__args) 
# 651
{ 
# 652
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 653
} 
# 656
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 657
{ 
# 658
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 659
} 
# 662
static inline int __gthread_detach(__gthread_t __threadid) 
# 663
{ 
# 664
return __gthrw_pthread_detach(__threadid); 
# 665
} 
# 668
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 669
{ 
# 670
return __gthrw_pthread_equal(__t1, __t2); 
# 671
} 
# 674
static inline __gthread_t __gthread_self() 
# 675
{ 
# 676
return __gthrw_pthread_self(); 
# 677
} 
# 680
static inline int __gthread_yield() 
# 681
{ 
# 682
return __gthrw_sched_yield(); 
# 683
} 
# 686
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 687
{ 
# 688
if (__gthread_active_p()) { 
# 689
return __gthrw_pthread_once(__once, __func); } else { 
# 691
return -1; }  
# 692
} 
# 695
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 696
{ 
# 697
return __gthrw_pthread_key_create(__key, __dtor); 
# 698
} 
# 701
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 702
{ 
# 703
return __gthrw_pthread_key_delete(__key); 
# 704
} 
# 707
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 708
{ 
# 709
return __gthrw_pthread_getspecific(__key); 
# 710
} 
# 713
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 714
{ 
# 715
return __gthrw_pthread_setspecific(__key, __ptr); 
# 716
} 
# 719
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 720
{ 
# 721
if (__gthread_active_p()) { 
# 722
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 724
return 0; }  
# 725
} 
# 728
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 729
{ 
# 730
if (__gthread_active_p()) { 
# 731
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 733
return 0; }  
# 734
} 
# 737
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 738
{ 
# 739
if (__gthread_active_p()) { 
# 740
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 742
return 0; }  
# 743
} 
# 748
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 749
__abs_timeout) 
# 750
{ 
# 751
if (__gthread_active_p()) { 
# 752
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 754
return 0; }  
# 755
} 
# 760
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 761
{ 
# 762
if (__gthread_active_p()) { 
# 763
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 765
return 0; }  
# 766
} 
# 792 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 793
{ 
# 794
return __gthread_mutex_lock(__mutex); 
# 795
} 
# 798
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 799
{ 
# 800
return __gthread_mutex_trylock(__mutex); 
# 801
} 
# 806
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 807
__abs_timeout) 
# 808
{ 
# 809
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 810
} 
# 815
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 816
{ 
# 817
return __gthread_mutex_unlock(__mutex); 
# 818
} 
# 821
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 822
{ 
# 823
return __gthrw_pthread_cond_broadcast(__cond); 
# 824
} 
# 827
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 828
{ 
# 829
return __gthrw_pthread_cond_signal(__cond); 
# 830
} 
# 833
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 834
{ 
# 835
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 836
} 
# 839
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 840
__abs_timeout) 
# 841
{ 
# 842
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 843
} 
# 846
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 847
__mutex) 
# 848
{ 
# 849
return __gthread_cond_wait(__cond, __mutex); 
# 850
} 
# 853
static inline int __gthread_cond_timedwait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 854
__mutex, const __gthread_time_t *
# 855
__abs_timeout) 
# 856
{ 
# 857
return __gthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 858
} 
# 861
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 862
{ 
# 863
return __gthrw_pthread_cond_destroy(__cond); 
# 864
} 
# 32 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 37 "/usr/include/c++/4.4/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 45
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 46
{ return __sync_fetch_and_add_4(__mem, __val); } 
# 49
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 50
{ __sync_fetch_and_add_4(__mem, __val); } 
# 62 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 63
{ 
# 64
_Atomic_word __result = (*__mem); 
# 65
(*__mem) += __val; 
# 66
return __result; 
# 67
} 
# 70
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 71
{ (*__mem) += __val; } 
# 74
__attribute((__unused__)) static inline _Atomic_word 
# 75
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 76
{ 
# 78
if (__gthread_active_p()) { 
# 79
return __exchange_and_add(__mem, __val); } else { 
# 81
return __exchange_and_add_single(__mem, __val); }  
# 85
} 
# 88
__attribute((__unused__)) static inline void 
# 89
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 90
{ 
# 92
if (__gthread_active_p()) { 
# 93
__atomic_add(__mem, __val); } else { 
# 95
__atomic_add_single(__mem, __val); }  
# 99
} 
# 101
}
# 46 "/usr/include/c++/4.4/new" 3
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 61
virtual ~bad_alloc() throw(); 
# 64
virtual const char *what() const throw(); 
# 65
}; 
# 67
struct nothrow_t { }; 
# 69
extern const nothrow_t nothrow; 
# 73
typedef void (*new_handler)(void); 
# 77
new_handler set_new_handler(new_handler) throw(); 
# 78
}
# 91 "/usr/include/c++/4.4/new" 3
void *operator new(size_t) throw(std::bad_alloc); 
# 92
void *operator new[](size_t) throw(std::bad_alloc); 
# 93
void operator delete(void *) throw(); 
# 94
void operator delete[](void *) throw(); 
# 95
void *operator new(size_t, const std::nothrow_t &) throw(); 
# 96
void *operator new[](size_t, const std::nothrow_t &) throw(); 
# 97
void operator delete(void *, const std::nothrow_t &) throw(); 
# 98
void operator delete[](void *, const std::nothrow_t &) throw(); 
# 101
inline void *operator new(size_t, void *__p) throw() { return __p; } 
# 102
inline void *operator new[](size_t, void *__p) throw() { return __p; } 
# 105
inline void operator delete(void *, void *) throw() { } 
# 106
inline void operator delete[](void *, void *) throw() { } 
# 37 "/usr/include/c++/4.4/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 39
using std::size_t;
# 40
using std::ptrdiff_t;
# 50 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    class new_allocator
    {
    public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef new_allocator < _Tp1 > other; };

      new_allocator ( ) throw ( ) { }

      new_allocator ( const new_allocator & ) throw ( ) { }

      template < typename _Tp1 >
        new_allocator ( const new_allocator < _Tp1 > & ) throw ( ) { }

      ~ new_allocator ( ) throw ( ) { }

      pointer
      address ( reference __x ) const { return & __x; }

      const_pointer
      address ( const_reference __x ) const { return & __x; }



      pointer
      allocate ( size_type __n, const void * = 0 )
      {
 if ( __builtin_expect ( __n > this -> max_size ( ), false ) )
   std :: __throw_bad_alloc ( );

 return static_cast < _Tp * > ( :: operator new ( __n * sizeof ( _Tp ) ) );
      }


      void
      deallocate ( pointer __p, size_type )
      { :: operator delete ( __p ); }

      size_type
      max_size ( ) const throw ( )
      { return size_t ( - 1 ) / sizeof ( _Tp ); }



      void
      construct ( pointer __p, const _Tp & __val )
      { :: new ( ( void * ) __p ) _Tp ( __val ); }

      void
      destroy ( pointer __p ) { __p -> ~ _Tp ( ); }
    };
# 118 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return true; }
# 123
template < typename _Tp >
    inline bool
    operator != ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return false; }
# 128
}
# 50 "/usr/include/c++/4.4/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 59 "/usr/include/c++/4.4/bits/allocator.h" 3
template< class _Tp> class allocator; 
# 64
template<> class allocator< void>  { 
# 67
public: typedef size_t size_type; 
# 68
typedef ptrdiff_t difference_type; 
# 69
typedef void *pointer; 
# 70
typedef const void *const_pointer; 
# 71
typedef void value_type; 
# 73
template< class _Tp1> 
# 74
struct rebind { 
# 75
typedef std::allocator< _Tp1>  other; }; 
# 76
}; 
# 85 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    class allocator : public __gnu_cxx :: new_allocator < _Tp >
    {
   public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef allocator < _Tp1 > other; };

      allocator ( ) throw ( ) { }

      allocator ( const allocator & __a ) throw ( )
      : __gnu_cxx :: new_allocator < _Tp > ( __a ) { }

      template < typename _Tp1 >
        allocator ( const allocator < _Tp1 > & ) throw ( ) { }

      ~ allocator ( ) throw ( ) { }


    };
# 114
template < typename _T1, typename _T2 >
    inline bool
    operator == ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return true; }
# 119
template < typename _Tp >
    inline bool
    operator == ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return true; }
# 124
template < typename _T1, typename _T2 >
    inline bool
    operator != ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return false; }
# 129
template < typename _Tp >
    inline bool
    operator != ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return false; }
# 138
extern template class allocator< char> ;
# 139
extern template class allocator< wchar_t> ;
# 146
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_swap
    { static void _S_do_it ( _Alloc &, _Alloc & ) { } };
# 150
template < typename _Alloc >
    struct __alloc_swap < _Alloc, false >
    {
      static void
      _S_do_it ( _Alloc & __one, _Alloc & __two )
      {

 if ( __one != __two )
   swap ( __one, __two );
      }
    };
# 163
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_neq
    {
      static bool
      _S_do_it ( const _Alloc &, const _Alloc & )
      { return false; }
    };
# 171
template < typename _Alloc >
    struct __alloc_neq < _Alloc, false >
    {
      static bool
      _S_do_it ( const _Alloc & __one, const _Alloc & __two )
      { return __one != __two; }
    };
# 179
}
# 32 "/usr/include/c++/4.4/cxxabi-forced.h" 3
namespace __cxxabiv1 { 
# 41
class __forced_unwind { 
# 43
virtual ~__forced_unwind() throw(); 
# 44
virtual void __pure_dummy() = 0; 
# 45
}; 
# 46
}
# 38 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
template < typename _CharT, typename _Traits >
    inline void
    __ostream_write ( basic_ostream < _CharT, _Traits > & __out,
      const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const streamsize __put = __out . rdbuf ( ) -> sputn ( __s, __n );
      if ( __put != __n )
 __out . setstate ( __ios_base :: badbit );
    }
# 53
template < typename _CharT, typename _Traits >
    inline void
    __ostream_fill ( basic_ostream < _CharT, _Traits > & __out, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const _CharT __c = __out . fill ( );
      for (; __n > 0; -- __n )
 {
   const typename _Traits :: int_type __put = __out . rdbuf ( ) -> sputc ( __c );
   if ( _Traits :: eq_int_type ( __put, _Traits :: eof ( ) ) )
     {
       __out . setstate ( __ios_base :: badbit );
       break;
     }
 }
    }
# 72
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    __ostream_insert ( basic_ostream < _CharT, _Traits > & __out,
       const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      typename __ostream_type :: sentry __cerb ( __out );
      if ( __cerb )
 {
   try
     {
       const streamsize __w = __out . width ( );
       if ( __w > __n )
  {
    const bool __left = ( ( __out . flags ( )
     & __ios_base :: adjustfield )
           == __ios_base :: left );
    if ( ! __left )
      __ostream_fill ( __out, __w - __n );
    if ( __out . good ( ) )
      __ostream_write ( __out, __s, __n );
    if ( __left && __out . good ( ) )
      __ostream_fill ( __out, __w - __n );
  }
       else
  __ostream_write ( __out, __s, __n );
       __out . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( __ios_base :: badbit ); }
 }
      return __out;
    }
# 117
extern template basic_ostream< char, char_traits< char> >  &__ostream_insert(basic_ostream< char, char_traits< char> >  & , const char * , streamsize );
# 120
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &__ostream_insert(basic_ostream< wchar_t, char_traits< wchar_t> >  & , const wchar_t * , streamsize );
# 125
}
# 60 "/usr/include/c++/4.4/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 99 "/usr/include/c++/4.4/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 100
struct unary_function { 
# 102
typedef _Arg argument_type; 
# 105
typedef _Result result_type; 
# 106
}; 
# 111
template< class _Arg1, class _Arg2, class _Result> 
# 112
struct binary_function { 
# 114
typedef _Arg1 first_argument_type; 
# 117
typedef _Arg2 second_argument_type; 
# 118
typedef _Result result_type; 
# 119
}; 
# 134 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct plus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x + __y; }
    };
# 143
template < typename _Tp >
    struct minus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x - __y; }
    };
# 152
template < typename _Tp >
    struct multiplies : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x * __y; }
    };
# 161
template < typename _Tp >
    struct divides : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x / __y; }
    };
# 170
template < typename _Tp >
    struct modulus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x % __y; }
    };
# 179
template < typename _Tp >
    struct negate : public unary_function < _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x ) const
      { return - __x; }
    };
# 198 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x == __y; }
    };
# 207
template < typename _Tp >
    struct not_equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x != __y; }
    };
# 216
template < typename _Tp >
    struct greater : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x > __y; }
    };
# 225
template < typename _Tp >
    struct less : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x < __y; }
    };
# 234
template < typename _Tp >
    struct greater_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x >= __y; }
    };
# 243
template < typename _Tp >
    struct less_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x <= __y; }
    };
# 262 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_and : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x && __y; }
    };
# 271
template < typename _Tp >
    struct logical_or : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x || __y; }
    };
# 280
template < typename _Tp >
    struct logical_not : public unary_function < _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x ) const
      { return ! __x; }
    };
# 291
template < typename _Tp >
    struct bit_and : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x & __y; }
    };
# 299
template < typename _Tp >
    struct bit_or : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x | __y; }
    };
# 307
template < typename _Tp >
    struct bit_xor : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x ^ __y; }
    };
# 345 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    class unary_negate
    : public unary_function < typename _Predicate :: argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      unary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: argument_type & __x ) const
      { return ! _M_pred ( __x ); }
    };
# 362
template < typename _Predicate >
    inline unary_negate < _Predicate >
    not1 ( const _Predicate & __pred )
    { return unary_negate < _Predicate > ( __pred ); }
# 368
template < typename _Predicate >
    class binary_negate
    : public binary_function < typename _Predicate :: first_argument_type,
        typename _Predicate :: second_argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      binary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: first_argument_type & __x,
   const typename _Predicate :: second_argument_type & __y ) const
      { return ! _M_pred ( __x, __y ); }
    };
# 387
template < typename _Predicate >
    inline binary_negate < _Predicate >
    not2 ( const _Predicate & __pred )
    { return binary_negate < _Predicate > ( __pred ); }
# 416 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg, typename _Result >
    class pointer_to_unary_function : public unary_function < _Arg, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg );

    public :
      pointer_to_unary_function ( ) { }

      explicit
      pointer_to_unary_function ( _Result ( * __x ) ( _Arg ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg __x ) const
      { return _M_ptr ( __x ); }
    };
# 435
template < typename _Arg, typename _Result >
    inline pointer_to_unary_function < _Arg, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg ) )
    { return pointer_to_unary_function < _Arg, _Result > ( __x ); }
# 441
template < typename _Arg1, typename _Arg2, typename _Result >
    class pointer_to_binary_function
    : public binary_function < _Arg1, _Arg2, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg1, _Arg2 );

    public :
      pointer_to_binary_function ( ) { }

      explicit
      pointer_to_binary_function ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg1 __x, _Arg2 __y ) const
      { return _M_ptr ( __x, __y ); }
    };
# 461
template < typename _Arg1, typename _Arg2, typename _Result >
    inline pointer_to_binary_function < _Arg1, _Arg2, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
    { return pointer_to_binary_function < _Arg1, _Arg2, _Result > ( __x ); }
# 467
template < typename _Tp >
    struct _Identity : public unary_function < _Tp, _Tp >
    {
      _Tp &
      operator ( ) ( _Tp & __x ) const
      { return __x; }

      const _Tp &
      operator ( ) ( const _Tp & __x ) const
      { return __x; }
    };
# 479
template < typename _Pair >
    struct _Select1st : public unary_function < _Pair,
           typename _Pair :: first_type >
    {
      typename _Pair :: first_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . first; }

      const typename _Pair :: first_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . first; }
    };
# 492
template < typename _Pair >
    struct _Select2nd : public unary_function < _Pair,
           typename _Pair :: second_type >
    {
      typename _Pair :: second_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . second; }

      const typename _Pair :: second_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . second; }
    };
# 523 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class mem_fun_t : public unary_function < _Tp *, _Ret >
    {
    public :
      explicit
      mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
    };
# 541
template < typename _Ret, typename _Tp >
    class const_mem_fun_t : public unary_function < const _Tp *, _Ret >
    {
    public :
      explicit
      const_mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 559
template < typename _Ret, typename _Tp >
    class mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
  };
# 577
template < typename _Ret, typename _Tp >
    class const_mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      const_mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 595
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_t : public binary_function < _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 613
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_t : public binary_function < const _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 631
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 649
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 667
template < typename _Ret, typename _Tp >
    inline mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_t < _Ret, _Tp > ( __f ); }
# 672
template < typename _Ret, typename _Tp >
    inline const_mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_t < _Ret, _Tp > ( __f ); }
# 677
template < typename _Ret, typename _Tp >
    inline mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 682
template < typename _Ret, typename _Tp >
    inline const_mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 687
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 692
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 697
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 702
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 709
}
# 60 "/usr/include/c++/4.4/backward/binders.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 96 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation >
    class binder1st
    : public unary_function < typename _Operation :: second_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: first_argument_type value;

    public :
      binder1st ( const _Operation & __x,
  const typename _Operation :: first_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }
    };
# 122
template < typename _Operation, typename _Tp >
    inline binder1st < _Operation >
    bind1st ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: first_argument_type _Arg1_type;
      return binder1st < _Operation > ( __fn, _Arg1_type ( __x ) );
    }
# 131
template < typename _Operation >
    class binder2nd
    : public unary_function < typename _Operation :: first_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: second_argument_type value;

    public :
      binder2nd ( const _Operation & __x,
  const typename _Operation :: second_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }
    };
# 157
template < typename _Operation, typename _Tp >
    inline binder2nd < _Operation >
    bind2nd ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: second_argument_type _Arg2_type;
      return binder2nd < _Operation > ( __fn, _Arg2_type ( __x ) );
    }
# 166
}
# 45 "/usr/include/c++/4.4/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 103 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    class basic_string
    {
      typedef typename _Alloc :: template rebind < _CharT > :: other _CharT_alloc_type;


    public :
      typedef _Traits traits_type;
      typedef typename _Traits :: char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type :: size_type size_type;
      typedef typename _CharT_alloc_type :: difference_type difference_type;
      typedef typename _CharT_alloc_type :: reference reference;
      typedef typename _CharT_alloc_type :: const_reference const_reference;
      typedef typename _CharT_alloc_type :: pointer pointer;
      typedef typename _CharT_alloc_type :: const_pointer const_pointer;
      typedef __gnu_cxx :: __normal_iterator < pointer, basic_string > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, basic_string >
                                                            const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;

    private :

      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc :: template rebind < char > :: other _Raw_bytes_alloc;

 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage [ ];

        static _Rep &
        _S_empty_rep ( )
        {



   void * __p = reinterpret_cast < void * > ( & _S_empty_rep_storage );
   return * reinterpret_cast < _Rep * > ( __p );
 }

        bool
 _M_is_leaked ( ) const
        { return this -> _M_refcount < 0; }

        bool
 _M_is_shared ( ) const
        { return this -> _M_refcount > 0; }

        void
 _M_set_leaked ( )
        { this -> _M_refcount = - 1; }

        void
 _M_set_sharable ( )
        { this -> _M_refcount = 0; }

 void
 _M_set_length_and_sharable ( size_type __n )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     {
       this -> _M_set_sharable ( );
       this -> _M_length = __n;
       traits_type :: assign ( this -> _M_refdata ( ) [ __n ], _S_terminal );


     }
 }

 _CharT *
 _M_refdata ( ) throw ( )
 { return reinterpret_cast < _CharT * > ( this + 1 ); }

 _CharT *
 _M_grab ( const _Alloc & __alloc1, const _Alloc & __alloc2 )
 {
   return ( ! _M_is_leaked ( ) && __alloc1 == __alloc2 )
           ? _M_refcopy ( ) : _M_clone ( __alloc1 );
 }


 static _Rep *
 _S_create ( size_type, size_type, const _Alloc & );

 void
 _M_dispose ( const _Alloc & __a )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     if ( __gnu_cxx :: __exchange_and_add_dispatch ( & this -> _M_refcount,
             - 1 ) <= 0 )
       _M_destroy ( __a );
 }

 void
 _M_destroy ( const _Alloc & ) throw ( );

 _CharT *
 _M_refcopy ( ) throw ( )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

            __gnu_cxx :: __atomic_add_dispatch ( & this -> _M_refcount, 1 );
   return _M_refdata ( );
 }

 _CharT *
 _M_clone ( const _Alloc &, size_type __res = 0 );
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider ( _CharT * __dat, const _Alloc & __a )
 : _Alloc ( __a ), _M_p ( __dat ) { }

 _CharT * _M_p;
      };

    public :




      static const size_type npos = static_cast < size_type > ( - 1 );

    private :

      mutable _Alloc_hider _M_dataplus;

      _CharT *
      _M_data ( ) const
      { return _M_dataplus . _M_p; }

      _CharT *
      _M_data ( _CharT * __p )
      { return ( _M_dataplus . _M_p = __p ); }

      _Rep *
      _M_rep ( ) const
      { return & ( ( reinterpret_cast < _Rep * > ( _M_data ( ) ) ) [ - 1 ] ); }



      iterator
      _M_ibegin ( ) const
      { return iterator ( _M_data ( ) ); }

      iterator
      _M_iend ( ) const
      { return iterator ( _M_data ( ) + this -> size ( ) ); }

      void
      _M_leak ( )
      {
 if ( ! _M_rep ( ) -> _M_is_leaked ( ) )
   _M_leak_hard ( );
      }

      size_type
      _M_check ( size_type __pos, const char * __s ) const
      {
 if ( __pos > this -> size ( ) )
   __throw_out_of_range ( ( __s ) );
 return __pos;
      }

      void
      _M_check_length ( size_type __n1, size_type __n2, const char * __s ) const
      {
 if ( this -> max_size ( ) - ( this -> size ( ) - __n1 ) < __n2 )
   __throw_length_error ( ( __s ) );
      }


      size_type
      _M_limit ( size_type __pos, size_type __off ) const
      {
 const bool __testoff = __off < this -> size ( ) - __pos;
 return __testoff ? __off : this -> size ( ) - __pos;
      }


      bool
      _M_disjunct ( const _CharT * __s ) const
      {
 return ( less < const _CharT * > ( ) ( __s, _M_data ( ) )
  || less < const _CharT * > ( ) ( _M_data ( ) + this -> size ( ), __s ) );
      }



      static void
      _M_copy ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: copy ( __d, __s, __n );
      }

      static void
      _M_move ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: move ( __d, __s, __n );
      }

      static void
      _M_assign ( _CharT * __d, size_type __n, _CharT __c )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, __c );
 else
   traits_type :: assign ( __d, __n, __c );
      }



      template < class _Iterator >
        static void
        _S_copy_chars ( _CharT * __p, _Iterator __k1, _Iterator __k2 )
        {
   for (; __k1 != __k2; ++ __k1, ++ __p )
     traits_type :: assign ( * __p, * __k1 );
 }

      static void
      _S_copy_chars ( _CharT * __p, iterator __k1, iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, const_iterator __k1, const_iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, _CharT * __k1, _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static void
      _S_copy_chars ( _CharT * __p, const _CharT * __k1, const _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static int
      _S_compare ( size_type __n1, size_type __n2 )
      {
 const difference_type __d = difference_type ( __n1 - __n2 );

 if ( __d > __gnu_cxx :: __numeric_traits < int > :: __max )
   return __gnu_cxx :: __numeric_traits < int > :: __max;
 else if ( __d < __gnu_cxx :: __numeric_traits < int > :: __min )
   return __gnu_cxx :: __numeric_traits < int > :: __min;
 else
   return int ( __d );
      }

      void
      _M_mutate ( size_type __pos, size_type __len1, size_type __len2 );

      void
      _M_leak_hard ( );

      static _Rep &
      _S_empty_rep ( )
      { return _Rep :: _S_empty_rep ( ); }

    public :







      inline
      basic_string ( );




      explicit
      basic_string ( const _Alloc & __a );






      basic_string ( const basic_string & __str );






      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n = npos );







      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n, const _Alloc & __a );

      basic_string ( const _CharT * __s, size_type __n,
     const _Alloc & __a = _Alloc ( ) );





      basic_string ( const _CharT * __s, const _Alloc & __a = _Alloc ( ) );






      basic_string ( size_type __n, _CharT __c, const _Alloc & __a = _Alloc ( ) );

      template < class _InputIterator >
        basic_string ( _InputIterator __beg, _InputIterator __end,
       const _Alloc & __a = _Alloc ( ) );




      ~ basic_string ( )
      { _M_rep ( ) -> _M_dispose ( this -> get_allocator ( ) ); }





      basic_string &
      operator = ( const basic_string & __str )
      { return this -> assign ( __str ); }





      basic_string &
      operator = ( const _CharT * __s )
      { return this -> assign ( __s ); }

      basic_string &
      operator = ( _CharT __c )
      {
 this -> assign ( 1, __c );
 return * this;
      }

      iterator
      begin ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) );
      }





      const_iterator
      begin ( ) const
      { return const_iterator ( _M_data ( ) ); }





      iterator
      end ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) + this -> size ( ) );
      }





      const_iterator
      end ( ) const
      { return const_iterator ( _M_data ( ) + this -> size ( ) ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( this -> end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( this -> end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( this -> begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( this -> begin ( ) ); }

    public :



      size_type
      size ( ) const
      { return _M_rep ( ) -> _M_length; }



      size_type
      length ( ) const
      { return _M_rep ( ) -> _M_length; }


      size_type
      max_size ( ) const
      { return _Rep :: _S_max_size; }

      void
      resize ( size_type __n, _CharT __c );

      void
      resize ( size_type __n )
      { this -> resize ( __n, _CharT ( ) ); }





      size_type
      capacity ( ) const
      { return _M_rep ( ) -> _M_capacity; }

      void
      reserve ( size_type __res_arg = 0 );




      void
      clear ( )
      { _M_mutate ( 0, this -> size ( ), 0 ); }




      bool
      empty ( ) const
      { return this -> size ( ) == 0; }

      const_reference
      operator [ ] ( size_type __pos ) const
      {
 ;
 return _M_data ( ) [ __pos ];
      }

      reference
      operator [ ] ( size_type __pos )
      {

 ;

 ;
 _M_leak ( );
 return _M_data ( ) [ __pos ];
      }

      const_reference
      at ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 return _M_data ( ) [ __n ];
      }

      reference
      at ( size_type __n )
      {
 if ( __n >= size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 _M_leak ( );
 return _M_data ( ) [ __n ];
      }







      basic_string &
      operator += ( const basic_string & __str )
      { return this -> append ( __str ); }






      basic_string &
      operator += ( const _CharT * __s )
      { return this -> append ( __s ); }






      basic_string &
      operator += ( _CharT __c )
      {
 this -> push_back ( __c );
 return * this;
      }

      basic_string &
      append ( const basic_string & __str );

      basic_string &
      append ( const basic_string & __str, size_type __pos, size_type __n );







      basic_string &
      append ( const _CharT * __s, size_type __n );






      basic_string &
      append ( const _CharT * __s )
      {
 ;
 return this -> append ( __s, traits_type :: length ( __s ) );
      }

      basic_string &
      append ( size_type __n, _CharT __c );

      template < class _InputIterator >
        basic_string &
        append ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_iend ( ), _M_iend ( ), __first, __last ); }





      void
      push_back ( _CharT __c )
      {
 const size_type __len = 1 + this -> size ( );
 if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
   this -> reserve ( __len );
 traits_type :: assign ( _M_data ( ) [ this -> size ( ) ], __c );
 _M_rep ( ) -> _M_set_length_and_sharable ( __len );
      }






      basic_string &
      assign ( const basic_string & __str );

      basic_string &
      assign ( const basic_string & __str, size_type __pos, size_type __n )
      { return this -> assign ( __str . _M_data ( )
       + __str . _M_check ( __pos, "basic_string::assign" ),
       __str . _M_limit ( __pos, __n ) ); }

      basic_string &
      assign ( const _CharT * __s, size_type __n );

      basic_string &
      assign ( const _CharT * __s )
      {
 ;
 return this -> assign ( __s, traits_type :: length ( __s ) );
      }

      basic_string &
      assign ( size_type __n, _CharT __c )
      { return _M_replace_aux ( size_type ( 0 ), this -> size ( ), __n, __c ); }

      template < class _InputIterator >
        basic_string &
        assign ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_ibegin ( ), _M_iend ( ), __first, __last ); }

      void
      insert ( iterator __p, size_type __n, _CharT __c )
      { this -> replace ( __p, __p, __n, __c ); }

      template < class _InputIterator >
        void
        insert ( iterator __p, _InputIterator __beg, _InputIterator __end )
        { this -> replace ( __p, __p, __beg, __end ); }

      basic_string &
      insert ( size_type __pos1, const basic_string & __str )
      { return this -> insert ( __pos1, __str, size_type ( 0 ), __str . size ( ) ); }

      basic_string &
      insert ( size_type __pos1, const basic_string & __str,
      size_type __pos2, size_type __n )
      { return this -> insert ( __pos1, __str . _M_data ( )
       + __str . _M_check ( __pos2, "basic_string::insert" ),
       __str . _M_limit ( __pos2, __n ) ); }

      basic_string &
      insert ( size_type __pos, const _CharT * __s, size_type __n );

      basic_string &
      insert ( size_type __pos, const _CharT * __s )
      {
 ;
 return this -> insert ( __pos, __s, traits_type :: length ( __s ) );
      }

      basic_string &
      insert ( size_type __pos, size_type __n, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::insert" ),
         size_type ( 0 ), __n, __c ); }

      iterator
      insert ( iterator __p, _CharT __c )
      {
 ;
 const size_type __pos = __p - _M_ibegin ( );
 _M_replace_aux ( __pos, size_type ( 0 ), size_type ( 1 ), __c );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }

      basic_string &
      erase ( size_type __pos = 0, size_type __n = npos )
      {
 _M_mutate ( _M_check ( __pos, "basic_string::erase" ),
    _M_limit ( __pos, __n ), size_type ( 0 ) );
 return * this;
      }

      iterator
      erase ( iterator __position )
      {
 ;

 const size_type __pos = __position - _M_ibegin ( );
 _M_mutate ( __pos, size_type ( 1 ), size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }

      iterator
      erase ( iterator __first, iterator __last );

      basic_string &
      replace ( size_type __pos, size_type __n, const basic_string & __str )
      { return this -> replace ( __pos, __n, __str . _M_data ( ), __str . size ( ) ); }

      basic_string &
      replace ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 )
      { return this -> replace ( __pos1, __n1, __str . _M_data ( )
        + __str . _M_check ( __pos2, "basic_string::replace" ),
        __str . _M_limit ( __pos2, __n2 ) ); }

      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 );

      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s )
      {
 ;
 return this -> replace ( __pos, __n1, __s, traits_type :: length ( __s ) );
      }

      basic_string &
      replace ( size_type __pos, size_type __n1, size_type __n2, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::replace" ),
         _M_limit ( __pos, __n1 ), __n2, __c ); }

      basic_string &
      replace ( iterator __i1, iterator __i2, const basic_string & __str )
      { return this -> replace ( __i1, __i2, __str . _M_data ( ), __str . size ( ) ); }

      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s, size_type __n )
      {
 ;

 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1, __s, __n );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s )
      {
 ;
 return this -> replace ( __i1, __i2, __s, traits_type :: length ( __s ) );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, size_type __n, _CharT __c )
      {
 ;

 return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __c );
      }

      template < class _InputIterator >
        basic_string &
        replace ( iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2 )
        {
   ;

   ;
   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   return _M_replace_dispatch ( __i1, __i2, __k1, __k2, _Integral ( ) );
 }



      basic_string &
      replace ( iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const _CharT * __k1, const _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, iterator __k1, iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

    private :
      template < class _Integer >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type )
        { return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __val ); }

      template < class _InputIterator >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type );

      basic_string &
      _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c );

      basic_string &
      _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
        size_type __n2 );



      template < class _InIterator >
        static _CharT *
        _S_construct_aux ( _InIterator __beg, _InIterator __end,
    const _Alloc & __a, __false_type )
 {
          typedef typename iterator_traits < _InIterator > :: iterator_category _Tag;
          return _S_construct ( __beg, __end, __a, _Tag ( ) );
 }



      template < class _Integer >
        static _CharT *
        _S_construct_aux ( _Integer __beg, _Integer __end,
    const _Alloc & __a, __true_type )
        { return _S_construct ( static_cast < size_type > ( __beg ), __end, __a ); }

      template < class _InIterator >
        static _CharT *
        _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a )
 {
   typedef typename std :: __is_integer < _InIterator > :: __type _Integral;
   return _S_construct_aux ( __beg, __end, __a, _Integral ( ) );
        }


      template < class _InIterator >
        static _CharT *
         _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
        input_iterator_tag );



      template < class _FwdIterator >
        static _CharT *
        _S_construct ( _FwdIterator __beg, _FwdIterator __end, const _Alloc & __a,
       forward_iterator_tag );

      static _CharT *
      _S_construct ( size_type __req, _CharT __c, const _Alloc & __a );

    public :

      size_type
      copy ( _CharT * __s, size_type __n, size_type __pos = 0 ) const;

      void
      swap ( basic_string & __s );

      const _CharT *
      c_str ( ) const
      { return _M_data ( ); }







      const _CharT *
      data ( ) const
      { return _M_data ( ); }




      allocator_type
      get_allocator ( ) const
      { return _M_dataplus; }

      size_type
      find ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      find ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find ( _CharT __c, size_type __pos = 0 ) const;

      size_type
      rfind ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> rfind ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      rfind ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      rfind ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> rfind ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      rfind ( _CharT __c, size_type __pos = npos ) const;

      size_type
      find_first_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      find_first_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_first_of ( _CharT __c, size_type __pos = 0 ) const
      { return this -> find ( __c, __pos ); }

      size_type
      find_last_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      find_last_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_last_of ( _CharT __c, size_type __pos = npos ) const
      { return this -> rfind ( __c, __pos ); }

      size_type
      find_first_not_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_not_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos,
   size_type __n ) const;

      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_first_not_of ( _CharT __c, size_type __pos = 0 ) const;

      size_type
      find_last_not_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_not_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos,
         size_type __n ) const;

      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_last_not_of ( _CharT __c, size_type __pos = npos ) const;

      basic_string
      substr ( size_type __pos = 0, size_type __n = npos ) const
      { return basic_string ( * this,
       _M_check ( __pos, "basic_string::substr" ), __n ); }

      int
      compare ( const basic_string & __str ) const
      {
 const size_type __size = this -> size ( );
 const size_type __osize = __str . size ( );
 const size_type __len = std :: min ( __size, __osize );

 int __r = traits_type :: compare ( _M_data ( ), __str . data ( ), __len );
 if ( ! __r )
   __r = _S_compare ( __size, __osize );
 return __r;
      }

      int
      compare ( size_type __pos, size_type __n, const basic_string & __str ) const;

      int
      compare ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 ) const;

      int
      compare ( const _CharT * __s ) const;

      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s ) const;

      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 ) const;
  };
# 2143 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( )

    : _M_dataplus ( _S_empty_rep ( ) . _M_refdata ( ), _Alloc ( ) ) { }
# 2159 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2175
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2186
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2196
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
      const _CharT * __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2212
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs, _CharT __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str ( __lhs );
      __str . append ( __size_type ( 1 ), __rhs );
      return __str;
    }
# 2230 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2236
template < typename _CharT >
    inline
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value, bool > :: __type
    operator == ( const basic_string < _CharT > & __lhs,
        const basic_string < _CharT > & __rhs )
    { return ( __lhs . size ( ) == __rhs . size ( )
       && ! std :: char_traits < _CharT > :: compare ( __lhs . data ( ), __rhs . data ( ),
          __lhs . size ( ) ) ); }
# 2251
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) == 0; }
# 2263
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2276 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2288
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2300
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return ! ( __lhs == __rhs ); }
# 2313 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2325
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2337
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) > 0; }
# 2350 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2362
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2374
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) < 0; }
# 2387 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2399
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2411
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) >= 0; }
# 2424 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2436
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2448
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const _CharT * __lhs,
      const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) <= 0; }
# 2461 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline void
    swap ( basic_string < _CharT, _Traits, _Alloc > & __lhs,
  basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { __lhs . swap ( __rhs ); }
# 2478 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is,
        basic_string < _CharT, _Traits, _Alloc > & __str );
# 2485
template<> basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , basic_string< char, char_traits< char> , allocator< char> >  & ); 
# 2496 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os,
        const basic_string < _CharT, _Traits, _Alloc > & __str )
    {


      return __ostream_insert ( __os, __str . data ( ), __str . size ( ) );
    }
# 2519 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim );
# 2536 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str )
    { return getline ( __is, __str, __is . widen ( '\n' ) ); }
# 2544
template<> basic_istream< char, char_traits< char> >  &getline(basic_istream< char, char_traits< char> >  & , basic_string< char, char_traits< char> , allocator< char> >  & , char ); 
# 2550
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &getline(basic_istream< wchar_t, char_traits< wchar_t> >  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & , wchar_t ); 
# 2554
}
# 46 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 51
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = ((((npos - sizeof(typename ::std::basic_string< _CharT, _Traits, _Alloc> ::_Rep_base)) / sizeof(_CharT)) - 1) / 4); 
# 53
template< class _CharT, class _Traits, class _Alloc> const _CharT 
# 56
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT()); 
# 58
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 60
basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 64
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 66
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[]; 
# 74
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     input_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 _CharT __buf [ 128 ];
 size_type __len = 0;
 while ( __beg != __end && __len < sizeof ( __buf ) / sizeof ( _CharT ) )
   {
     __buf [ __len ++ ] = * __beg;
     ++ __beg;
   }
 _Rep * __r = _Rep :: _S_create ( __len, size_type ( 0 ), __a );
 _M_copy ( __r -> _M_refdata ( ), __buf, __len );
 try
   {
     while ( __beg != __end )
       {
  if ( __len == __r -> _M_capacity )
    {

      _Rep * __another = _Rep :: _S_create ( __len + 1, __len, __a );
      _M_copy ( __another -> _M_refdata ( ), __r -> _M_refdata ( ), __len );
      __r -> _M_destroy ( __a );
      __r = __another;
    }
  __r -> _M_refdata ( ) [ __len ++ ] = * __beg;
  ++ __beg;
       }
   }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __len );
 return __r -> _M_refdata ( );
      }
# 120
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     forward_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 if ( __builtin_expect ( __gnu_cxx :: __is_null_pointer ( __beg )
        && __beg != __end, 0 ) )
   __throw_logic_error ( ( "basic_string::_S_construct NULL not valid" ) );

 const size_type __dnew = static_cast < size_type > ( std :: distance ( __beg,
              __end ) );

 _Rep * __r = _Rep :: _S_create ( __dnew, size_type ( 0 ), __a );
 try
   { _S_copy_chars ( __r -> _M_refdata ( ), __beg, __end ); }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __dnew );
 return __r -> _M_refdata ( );
      }
# 151
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > ::
    _S_construct ( size_type __n, _CharT __c, const _Alloc & __a )
    {

      if ( __n == 0 && __a == _Alloc ( ) )
 return _S_empty_rep ( ) . _M_refdata ( );


      _Rep * __r = _Rep :: _S_create ( __n, size_type ( 0 ), __a );
      if ( __n )
 _M_assign ( __r -> _M_refdata ( ), __n, __c );

      __r -> _M_set_length_and_sharable ( __n );
      return __r -> _M_refdata ( );
    }
# 169
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str )
    : _M_dataplus ( __str . _M_rep ( ) -> _M_grab ( _Alloc ( __str . get_allocator ( ) ),
       __str . get_allocator ( ) ),
    __str . get_allocator ( ) )
    { }
# 177
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _Alloc & __a )
    : _M_dataplus ( _S_construct ( size_type ( ), _CharT ( ), __a ), __a )
    { }
# 183
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos, size_type __n )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, _Alloc ( ) ), _Alloc ( ) )
    { }
# 193
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos,
   size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, __a ), __a )
    { }
# 205
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s + __n, __a ), __a )
    { }
# 212
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s ? __s + traits_type :: length ( __s ) :
          __s + npos, __a ), __a )
    { }
# 219
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( size_type __n, _CharT __c, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __n, __c, __a ), __a )
    { }
# 226
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( _InputIterator __beg, _InputIterator __end, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __beg, __end, __a ), __a )
    { }
# 241 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const basic_string & __str )
    {
      if ( _M_rep ( ) != __str . _M_rep ( ) )
 {

   const allocator_type __a = this -> get_allocator ( );
   _CharT * __tmp = __str . _M_rep ( ) -> _M_grab ( __a, __str . get_allocator ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
 }
      return * this;
    }
# 257
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const _CharT * __s, size_type __n )
    {
      ;
      _M_check_length ( this -> size ( ), __n, "basic_string::assign" );
      if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
 return _M_replace_safe ( size_type ( 0 ), this -> size ( ), __s, __n );
      else
 {

   const size_type __pos = __s - _M_data ( );
   if ( __pos >= __n )
     _M_copy ( _M_data ( ), __s, __n );
   else if ( __pos )
     _M_move ( _M_data ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __n );
   return * this;
 }
     }
# 279
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( size_type __n, _CharT __c )
    {
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_assign ( _M_data ( ) + this -> size ( ), __n, __c );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 296
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const _CharT * __s, size_type __n )
    {
      ;
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     {
       if ( _M_disjunct ( __s ) )
  this -> reserve ( __len );
       else
  {
    const size_type __off = __s - _M_data ( );
    this -> reserve ( __len );
    __s = _M_data ( ) + __off;
  }
     }
   _M_copy ( _M_data ( ) + this -> size ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 323
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str )
    {
      const size_type __size = __str . size ( );
      if ( __size )
 {
   const size_type __len = __size + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ), __size );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 340
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str, size_type __pos, size_type __n )
    {
      __str . _M_check ( __pos, "basic_string::append" );
      __n = __str . _M_limit ( __pos, __n );
      if ( __n )
 {
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ) + __pos, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 358
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     insert ( size_type __pos, const _CharT * __s, size_type __n )
     {
       ;
       _M_check ( __pos, "basic_string::insert" );
       _M_check_length ( size_type ( 0 ), __n, "basic_string::insert" );
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, size_type ( 0 ), __s, __n );
       else
         {

           const size_type __off = __s - _M_data ( );
           _M_mutate ( __pos, 0, __n );
           __s = _M_data ( ) + __off;
           _CharT * __p = _M_data ( ) + __pos;
           if ( __s + __n <= __p )
             _M_copy ( __p, __s, __n );
           else if ( __s >= __p )
             _M_copy ( __p, __s + __n, __n );
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy ( __p, __s, __nleft );
               _M_copy ( __p + __nleft, __p + __n, __n - __nleft );
             }
           return * this;
         }
     }
# 389
template < typename _CharT, typename _Traits, typename _Alloc >
     typename basic_string < _CharT, _Traits, _Alloc > :: iterator
     basic_string < _CharT, _Traits, _Alloc > ::
     erase ( iterator __first, iterator __last )
     {
       ;





       const size_type __size = __last - __first;
       if ( __size )
  {
    const size_type __pos = __first - _M_ibegin ( );
    _M_mutate ( __pos, __size, size_type ( 0 ) );
    _M_rep ( ) -> _M_set_leaked ( );
    return iterator ( _M_data ( ) + __pos );
  }
       else
  return __first;
     }
# 412
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     replace ( size_type __pos, size_type __n1, const _CharT * __s,
      size_type __n2 )
     {
       ;
       _M_check ( __pos, "basic_string::replace" );
       __n1 = _M_limit ( __pos, __n1 );
       _M_check_length ( __n1, __n2, "basic_string::replace" );
       bool __left;
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, __n1, __s, __n2 );
       else if ( ( __left = __s + __n2 <= _M_data ( ) + __pos )
  || _M_data ( ) + __pos + __n1 <= __s )
  {

    size_type __off = __s - _M_data ( );
    __left ? __off : ( __off += __n2 - __n1 );
    _M_mutate ( __pos, __n1, __n2 );
    _M_copy ( _M_data ( ) + __pos, _M_data ( ) + __off, __n2 );
    return * this;
  }
       else
  {

    const basic_string __tmp ( __s, __n2 );
    return _M_replace_safe ( __pos, __n1, __tmp . _M_data ( ), __n2 );
  }
     }
# 443
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_destroy ( const _Alloc & __a ) throw ( )
    {
      const size_type __size = sizeof ( _Rep_base ) +
                        ( this -> _M_capacity + 1 ) * sizeof ( _CharT );
      _Raw_bytes_alloc ( __a ) . deallocate ( reinterpret_cast < char * > ( this ), __size );
    }
# 453
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_leak_hard ( )
    {

      if ( _M_rep ( ) == & _S_empty_rep ( ) )
 return;

      if ( _M_rep ( ) -> _M_is_shared ( ) )
 _M_mutate ( 0, 0, 0 );
      _M_rep ( ) -> _M_set_leaked ( );
    }
# 467
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_mutate ( size_type __pos, size_type __len1, size_type __len2 )
    {
      const size_type __old_size = this -> size ( );
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if ( __new_size > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
 {

   const allocator_type __a = get_allocator ( );
   _Rep * __r = _Rep :: _S_create ( __new_size, this -> capacity ( ), __a );

   if ( __pos )
     _M_copy ( __r -> _M_refdata ( ), _M_data ( ), __pos );
   if ( __how_much )
     _M_copy ( __r -> _M_refdata ( ) + __pos + __len2,
      _M_data ( ) + __pos + __len1, __how_much );

   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __r -> _M_refdata ( ) );
 }
      else if ( __how_much && __len1 != __len2 )
 {

   _M_move ( _M_data ( ) + __pos + __len2,
    _M_data ( ) + __pos + __len1, __how_much );
 }
      _M_rep ( ) -> _M_set_length_and_sharable ( __new_size );
    }
# 500
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    reserve ( size_type __res )
    {
      if ( __res != this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
        {

   if ( __res < this -> size ( ) )
     __res = this -> size ( );
   const allocator_type __a = get_allocator ( );
   _CharT * __tmp = _M_rep ( ) -> _M_clone ( __a, __res - this -> size ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
        }
    }
# 517
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    swap ( basic_string & __s )
    {
      if ( _M_rep ( ) -> _M_is_leaked ( ) )
 _M_rep ( ) -> _M_set_sharable ( );
      if ( __s . _M_rep ( ) -> _M_is_leaked ( ) )
 __s . _M_rep ( ) -> _M_set_sharable ( );
      if ( this -> get_allocator ( ) == __s . get_allocator ( ) )
 {
   _CharT * __tmp = _M_data ( );
   _M_data ( __s . _M_data ( ) );
   __s . _M_data ( __tmp );
 }

      else
 {
   const basic_string __tmp1 ( _M_ibegin ( ), _M_iend ( ),
        __s . get_allocator ( ) );
   const basic_string __tmp2 ( __s . _M_ibegin ( ), __s . _M_iend ( ),
        this -> get_allocator ( ) );
   * this = __tmp2;
   __s = __tmp1;
 }
    }
# 544
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: _Rep *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _S_create ( size_type __capacity, size_type __old_capacity,
       const _Alloc & __alloc )
    {


      if ( __capacity > _S_max_size )
 __throw_length_error ( ( "basic_string::_S_create" ) );

      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof ( void * );







      if ( __capacity > __old_capacity && __capacity < 2 * __old_capacity )
 __capacity = 2 * __old_capacity;




      size_type __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );

      const size_type __adj_size = __size + __malloc_header_size;
      if ( __adj_size > __pagesize && __capacity > __old_capacity )
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof ( _CharT );

   if ( __capacity > _S_max_size )
     __capacity = _S_max_size;
   __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );
 }



      void * __place = _Raw_bytes_alloc ( __alloc ) . allocate ( __size );
      _Rep * __p = new ( __place ) _Rep;
      __p -> _M_capacity = __capacity;







      __p -> _M_set_sharable ( );
      return __p;
    }
# 622 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_clone ( const _Alloc & __alloc, size_type __res )
    {

      const size_type __requested_cap = this -> _M_length + __res;
      _Rep * __r = _Rep :: _S_create ( __requested_cap, this -> _M_capacity,
      __alloc );
      if ( this -> _M_length )
 _M_copy ( __r -> _M_refdata ( ), _M_refdata ( ), this -> _M_length );

      __r -> _M_set_length_and_sharable ( this -> _M_length );
      return __r -> _M_refdata ( );
    }
# 638
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    resize ( size_type __n, _CharT __c )
    {
      const size_type __size = this -> size ( );
      _M_check_length ( __size, __n, "basic_string::resize" );
      if ( __size < __n )
 this -> append ( __n - __size, __c );
      else if ( __n < __size )
 this -> erase ( __n );

    }
# 652
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
      basic_string < _CharT, _Traits, _Alloc > &
      basic_string < _CharT, _Traits, _Alloc > ::
      _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type )
      {
 const basic_string __s ( __k1, __k2 );
 const size_type __n1 = __i2 - __i1;
 _M_check_length ( __n1, __s . size ( ), "basic_string::_M_replace_dispatch" );
 return _M_replace_safe ( __i1 - _M_ibegin ( ), __n1, __s . _M_data ( ),
          __s . size ( ) );
      }
# 666
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c )
    {
      _M_check_length ( __n1, __n2, "basic_string::_M_replace_aux" );
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_assign ( _M_data ( ) + __pos1, __n2, __c );
      return * this;
    }
# 679
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
      size_type __n2 )
    {
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_copy ( _M_data ( ) + __pos1, __s, __n2 );
      return * this;
    }
# 691
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      ;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      const __size_type __len = _Traits :: length ( __lhs );
      __string_type __str;
      __str . reserve ( __len + __rhs . size ( ) );
      __str . append ( __lhs, __len );
      __str . append ( __rhs );
      return __str;
    }
# 707
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs . size ( );
      __str . reserve ( __len + 1 );
      __str . append ( __size_type ( 1 ), __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 721
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    copy ( _CharT * __s, size_type __n, size_type __pos ) const
    {
      _M_check ( __pos, "basic_string::copy" );
      __n = _M_limit ( __pos, __n );
      ;
      if ( __n )
 _M_copy ( __s, _M_data ( ) + __pos, __n );

      return __n;
    }
# 735
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      const _CharT * __data = _M_data ( );

      if ( __n == 0 )
 return __pos <= __size ? __pos : npos;

      if ( __n <= __size )
 {
   for (; __pos <= __size - __n; ++ __pos )
     if ( traits_type :: eq ( __data [ __pos ], __s [ 0 ] )
  && traits_type :: compare ( __data + __pos + 1,
     __s + 1, __n - 1 ) == 0 )
       return __pos;
 }
      return npos;
    }
# 758
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( _CharT __c, size_type __pos ) const
    {
      size_type __ret = npos;
      const size_type __size = this -> size ( );
      if ( __pos < __size )
 {
   const _CharT * __data = _M_data ( );
   const size_type __n = __size - __pos;
   const _CharT * __p = traits_type :: find ( __data + __pos, __n, __c );
   if ( __p )
     __ret = __p - __data;
 }
      return __ret;
    }
# 776
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      if ( __n <= __size )
 {
   __pos = std :: min ( size_type ( __size - __n ), __pos );
   const _CharT * __data = _M_data ( );
   do
     {
       if ( traits_type :: compare ( __data + __pos, __s, __n ) == 0 )
  return __pos;
     }
   while ( __pos -- > 0 );
 }
      return npos;
    }
# 797
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   for ( ++ __size; __size -- > 0; )
     if ( traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
       return __size;
 }
      return npos;
    }
# 814
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __n && __pos < this -> size ( ); ++ __pos )
 {
   const _CharT * __p = traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] );
   if ( __p )
     return __pos;
 }
      return npos;
    }
# 829
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size && __n )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- != 0 );
 }
      return npos;
    }
# 850
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] ) )
   return __pos;
      return npos;
    }
# 862
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( _CharT __c, size_type __pos ) const
    {
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: eq ( _M_data ( ) [ __pos ], __c ) )
   return __pos;
      return npos;
    }
# 873
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 894
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 914
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n, const basic_string & __str ) const
    {
      _M_check ( __pos, "basic_string::compare" );
      __n = _M_limit ( __pos, __n );
      const size_type __osize = __str . size ( );
      const size_type __len = std :: min ( __n, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __str . data ( ), __len );
      if ( ! __r )
 __r = _S_compare ( __n, __osize );
      return __r;
    }
# 929
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos1, size_type __n1, const basic_string & __str,
     size_type __pos2, size_type __n2 ) const
    {
      _M_check ( __pos1, "basic_string::compare" );
      __str . _M_check ( __pos2, "basic_string::compare" );
      __n1 = _M_limit ( __pos1, __n1 );
      __n2 = __str . _M_limit ( __pos2, __n2 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos1,
         __str . data ( ) + __pos2, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 947
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( const _CharT * __s ) const
    {
      ;
      const size_type __size = this -> size ( );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __size, __osize );
      int __r = traits_type :: compare ( _M_data ( ), __s, __len );
      if ( ! __r )
 __r = _S_compare ( __size, __osize );
      return __r;
    }
# 962
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __n1, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __osize );
      return __r;
    }
# 978
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s,
     size_type __n2 ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 995
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in,
        basic_string < _CharT, _Traits, _Alloc > & __str )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;
      typedef ctype < _CharT > __ctype_type;
      typedef typename __ctype_type :: ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       __str . erase ( );
       _CharT __buf [ 128 ];
       __size_type __len = 0;
       const streamsize __w = __in . width ( );
       const __size_type __n = __w > 0 ? static_cast < __size_type > ( __w )
                                : __str . max_size ( );
       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( __ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    if ( __len == sizeof ( __buf ) / sizeof ( _CharT ) )
      {
        __str . append ( __buf, sizeof ( __buf ) / sizeof ( _CharT ) );
        __len = 0;
      }
    __buf [ __len ++ ] = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }
       __str . append ( __buf, __len );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }

      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1067
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __in,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str . max_size ( );
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, true );
      if ( __cerb )
 {
   try
     {
       __str . erase ( );
       const __int_type __idelim = _Traits :: to_int_type ( __delim );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! _Traits :: eq_int_type ( __c, __idelim ) )
  {
    __str += _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       else if ( _Traits :: eq_int_type ( __c, __idelim ) )
  {
    ++ __extracted;
    __in . rdbuf ( ) -> sbumpc ( );
  }
       else
  __err |= __ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }
      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1134
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 1135
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , basic_string< char, char_traits< char> , allocator< char> >  & );
# 1138
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const basic_string< char, char_traits< char> , allocator< char> >  & );
# 1141
extern template basic_istream< char, char_traits< char> >  &getline(basic_istream< char, char_traits< char> >  & , basic_string< char, char_traits< char> , allocator< char> >  & , char );
# 1144
extern template basic_istream< char, char_traits< char> >  &getline(basic_istream< char, char_traits< char> >  & , basic_string< char, char_traits< char> , allocator< char> >  & );
# 1149
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1150
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & );
# 1153
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & );
# 1156
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &getline(basic_istream< wchar_t, char_traits< wchar_t> >  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & , wchar_t );
# 1159
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &getline(basic_istream< wchar_t, char_traits< wchar_t> >  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & );
# 1165
}
# 45 "/usr/include/c++/4.4/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 61 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale { 
# 66
public: typedef int category; 
# 69
class facet; 
# 70
class id; 
# 71
class _Impl; 
# 73
friend class facet; 
# 74
friend class _Impl; 
# 76
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 80
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 84
template< class _Cache> friend struct __use_cache; 
# 97 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category none = 0; 
# 98
static const category ctype = (1L << 0); 
# 99
static const category numeric = (1L << 1); 
# 100
static const category collate = (1L << 2); 
# 101
static const category time = (1L << 3); 
# 102
static const category monetary = (1L << 4); 
# 103
static const category messages = (1L << 5); 
# 104
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 116 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale() throw(); 
# 125 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale & ) throw(); 
# 136 "/usr/include/c++/4.4/bits/locale_classes.h" 3
explicit locale(const char * ); 
# 150 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale & , const char * , category ); 
# 163 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale & , const locale & , category ); 
# 175 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      locale ( const locale & __other, _Facet * __f );
# 179
~locale() throw(); 
# 190 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale &operator=(const locale & ) throw(); 
# 204 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      locale
      combine ( const locale & __other ) const;
# 214
string name() const; 
# 224 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool operator==(const locale & ) const throw(); 
# 233
bool operator!=(const locale &__other) const throw() 
# 234
{ return !this->operator==(__other); } 
# 251 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Char, typename _Traits, typename _Alloc >
      bool
      operator ( ) ( const basic_string < _Char, _Traits, _Alloc > & __s1,
   const basic_string < _Char, _Traits, _Alloc > & __s2 ) const;
# 268 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static locale global(const locale &); 
# 274
static const locale &classic(); 
# 278
private: _Impl *_M_impl; 
# 281
static _Impl *_S_classic; 
# 284
static _Impl *_S_global; 
# 290
static const char *const *const _S_categories; 
# 302 "/usr/include/c++/4.4/bits/locale_classes.h" 3
enum { _S_categories_size = 12}; 
# 305
static __gthread_once_t _S_once; 
# 309
explicit locale(_Impl *) throw(); 
# 312
static void _S_initialize(); 
# 315
static void _S_initialize_once(); 
# 318
static category _S_normalize_category(category); 
# 321
void _M_coalesce(const locale & , const locale & , category ); 
# 322
}; 
# 335 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::facet { 
# 338
friend class locale; 
# 339
friend class locale::_Impl; 
# 341
mutable _Atomic_word _M_refcount; 
# 344
static __c_locale _S_c_locale; 
# 347
static const char _S_c_name[2]; 
# 350
static __gthread_once_t _S_once; 
# 354
static void _S_initialize_once(); 
# 367 "/usr/include/c++/4.4/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = (0)) throw() : _M_refcount(((__refs) ? 1 : 0)) 
# 368
{ } 
# 372
virtual ~facet(); 
# 375
static void _S_create_c_locale(__c_locale & , const char * , __c_locale  = 0); 
# 379
static __c_locale _S_clone_c_locale(__c_locale & ); 
# 382
static void _S_destroy_c_locale(__c_locale & ); 
# 387
static __c_locale _S_get_c_locale(); 
# 390
static const char *_S_get_c_name(); 
# 394
private: void _M_add_reference() const throw() 
# 395
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 398
void _M_remove_reference() const throw() 
# 399
{ 
# 400
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 401
{ 
# 402
try 
# 403
{ delete this; } 
# 404
catch (...) 
# 405
{ }  
# 406
}  
# 407
} 
# 409
facet(const locale::facet &); 
# 412
locale::facet &operator=(const locale::facet &); 
# 413
}; 
# 426 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::id { 
# 429
friend class locale; 
# 430
friend class locale::_Impl; 
# 432
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 436
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 443
mutable size_t _M_index; 
# 446
static _Atomic_word _S_refcount; 
# 449
void operator=(const locale::id &); 
# 451
id(const locale::id &); 
# 457
public: id() { } 
# 460
size_t _M_id() const; 
# 461
}; 
# 465
class locale::_Impl { 
# 469
friend class locale; 
# 470
friend class locale::facet; 
# 472
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 476
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 480
template< class _Cache> friend struct __use_cache; 
# 485
_Atomic_word _M_refcount; 
# 486
const locale::facet **_M_facets; 
# 487
size_t _M_facets_size; 
# 488
const locale::facet **_M_caches; 
# 489
char **_M_names; 
# 490
static const locale::id *const _S_id_ctype[]; 
# 491
static const locale::id *const _S_id_numeric[]; 
# 492
static const locale::id *const _S_id_collate[]; 
# 493
static const locale::id *const _S_id_time[]; 
# 494
static const locale::id *const _S_id_monetary[]; 
# 495
static const locale::id *const _S_id_messages[]; 
# 496
static const locale::id *const *const _S_facet_categories[]; 
# 499
void _M_add_reference() throw() 
# 500
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 503
void _M_remove_reference() throw() 
# 504
{ 
# 505
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 506
{ 
# 507
try 
# 508
{ delete this; } 
# 509
catch (...) 
# 510
{ }  
# 511
}  
# 512
} 
# 514
_Impl(const locale::_Impl &, size_t); 
# 515
_Impl(const char *, size_t); 
# 516
_Impl(size_t) throw(); 
# 518
~_Impl() throw(); 
# 520
_Impl(const locale::_Impl &); 
# 523
void operator=(const locale::_Impl &); 
# 526
bool _M_check_same_name() 
# 527
{ 
# 528
bool __ret = true; 
# 529
if ((_M_names)[1]) { 
# 531
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 532
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 533
return __ret; 
# 534
} 
# 537
void _M_replace_categories(const locale::_Impl *, locale::category); 
# 540
void _M_replace_category(const locale::_Impl *, const locale::id *const *); 
# 543
void _M_replace_facet(const locale::_Impl *, const locale::id *); 
# 546
void _M_install_facet(const locale::id *, const locale::facet *); 
# 548
template < typename _Facet >
      void
      _M_init_facet ( _Facet * __facet )
      { _M_install_facet ( & _Facet :: id, __facet ); }
# 554
void _M_install_cache(const locale::facet *, size_t); 
# 555
}; 
# 569 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> bool has_facet(const locale & ) throw(); 
# 586 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _Facet> const _Facet &use_facet(const locale & ); 
# 603 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _CharT >
    class collate : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


    protected :


      __c_locale _M_c_locale_collate;

    public :

      static locale :: id id;

      explicit
      collate ( size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_get_c_locale ( ) )
      { }

      explicit
      collate ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_clone_c_locale ( __cloc ) )
      { }

      int
      compare ( const _CharT * __lo1, const _CharT * __hi1,
       const _CharT * __lo2, const _CharT * __hi2 ) const
      { return this -> do_compare ( __lo1, __hi1, __lo2, __hi2 ); }

      string_type
      transform ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_transform ( __lo, __hi ); }

      long
      hash ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_hash ( __lo, __hi ); }


      int
      _M_compare ( const _CharT *, const _CharT * ) const;

      size_t
      _M_transform ( _CharT *, const _CharT *, size_t ) const;

  protected :

      virtual
      ~ collate ( )
      { _S_destroy_c_locale ( _M_c_locale_collate ); }

      virtual int
      do_compare ( const _CharT * __lo1, const _CharT * __hi1,
   const _CharT * __lo2, const _CharT * __hi2 ) const;

      virtual string_type
      do_transform ( const _CharT * __lo, const _CharT * __hi ) const;

      virtual long
      do_hash ( const _CharT * __lo, const _CharT * __hi ) const;
    };
# 756 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template< class _CharT> locale::id 
# 757
collate< _CharT> ::id; 
# 762
template<> int collate< char> ::_M_compare(const char *, const char *) const; 
# 766
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const; 
# 771
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const; 
# 775
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const; 
# 779
template < typename _CharT >
    class collate_byname : public collate < _CharT >
    {
    public :


      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


      explicit
      collate_byname ( const char * __s, size_t __refs = 0 )
      : collate < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_collate );
     this -> _S_create_c_locale ( this -> _M_c_locale_collate, __s );
   }
      }

    protected :
      virtual
      ~ collate_byname ( ) { }
    };
# 806
}
# 39 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template < typename _Facet >
    locale ::
    locale ( const locale & __other, _Facet * __f )
    {
      _M_impl = new _Impl ( * __other . _M_impl, 1 );

      try
 { _M_impl -> _M_install_facet ( & _Facet :: id, __f ); }
      catch ( ... )
 {
   _M_impl -> _M_remove_reference ( );
   throw;
 }
      delete [ ] _M_impl -> _M_names [ 0 ];
      _M_impl -> _M_names [ 0 ] = 0;
    }
# 58
template < typename _Facet >
    locale
    locale ::
    combine ( const locale & __other ) const
    {
      _Impl * __tmp = new _Impl ( * _M_impl, 1 );
      try
 {
   __tmp -> _M_replace_facet ( __other . _M_impl, & _Facet :: id );
 }
      catch ( ... )
 {
   __tmp -> _M_remove_reference ( );
   throw;
 }
      return locale ( __tmp );
    }
# 76
template < typename _CharT, typename _Traits, typename _Alloc >
    bool
    locale ::
    operator ( ) ( const basic_string < _CharT, _Traits, _Alloc > & __s1,
        const basic_string < _CharT, _Traits, _Alloc > & __s2 ) const
    {
      typedef std :: collate < _CharT > __collate_type;
      const __collate_type & __collate = use_facet < __collate_type > ( * this );
      return ( __collate . compare ( __s1 . data ( ), __s1 . data ( ) + __s1 . length ( ),
    __s2 . data ( ), __s2 . data ( ) + __s2 . length ( ) ) < 0 );
    }
# 89
template < typename _Facet >
    bool
    has_facet ( const locale & __loc ) throw ( )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      return ( __i < __loc . _M_impl -> _M_facets_size

       && dynamic_cast < const _Facet * > ( __facets [ __i ] ) );



    }
# 103
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & __loc )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      if ( __i >= __loc . _M_impl -> _M_facets_size || ! __facets [ __i ] )
        __throw_bad_cast ( );

      return dynamic_cast < const _Facet & > ( * __facets [ __i ] );



    }
# 120
template < typename _CharT >
    int
    collate < _CharT > :: _M_compare ( const _CharT *, const _CharT * ) const
    { return 0; }
# 126
template < typename _CharT >
    size_t
    collate < _CharT > :: _M_transform ( _CharT *, const _CharT *, size_t ) const
    { return 0; }
# 131
template < typename _CharT >
    int
    collate < _CharT > ::
    do_compare ( const _CharT * __lo1, const _CharT * __hi1,
        const _CharT * __lo2, const _CharT * __hi2 ) const
    {


      const string_type __one ( __lo1, __hi1 );
      const string_type __two ( __lo2, __hi2 );

      const _CharT * __p = __one . c_str ( );
      const _CharT * __pend = __one . data ( ) + __one . length ( );
      const _CharT * __q = __two . c_str ( );
      const _CharT * __qend = __two . data ( ) + __two . length ( );




      for (;; )
 {
   const int __res = _M_compare ( __p, __q );
   if ( __res )
     return __res;

   __p += char_traits < _CharT > :: length ( __p );
   __q += char_traits < _CharT > :: length ( __q );
   if ( __p == __pend && __q == __qend )
     return 0;
   else if ( __p == __pend )
     return - 1;
   else if ( __q == __qend )
     return 1;

   __p ++;
   __q ++;
 }
    }
# 170
template < typename _CharT >
    typename collate < _CharT > :: string_type
    collate < _CharT > ::
    do_transform ( const _CharT * __lo, const _CharT * __hi ) const
    {
      string_type __ret;


      const string_type __str ( __lo, __hi );

      const _CharT * __p = __str . c_str ( );
      const _CharT * __pend = __str . data ( ) + __str . length ( );

      size_t __len = ( __hi - __lo ) * 2;

      _CharT * __c = new _CharT [ __len ];

      try
 {



   for (;; )
     {

       size_t __res = _M_transform ( __c, __p, __len );


       if ( __res >= __len )
  {
    __len = __res + 1;
    delete [ ] __c, __c = 0;
    __c = new _CharT [ __len ];
    __res = _M_transform ( __c, __p, __len );
  }

       __ret . append ( __c, __res );
       __p += char_traits < _CharT > :: length ( __p );
       if ( __p == __pend )
  break;

       __p ++;
       __ret . push_back ( _CharT ( ) );
     }
 }
      catch ( ... )
 {
   delete [ ] __c;
   throw;
 }

      delete [ ] __c;

      return __ret;
    }
# 226
template < typename _CharT >
    long
    collate < _CharT > ::
    do_hash ( const _CharT * __lo, const _CharT * __hi ) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++ __lo )
 __val =
   * __lo + ( ( __val << 7 )
     | ( __val >> ( __gnu_cxx :: __numeric_traits < unsigned long > ::
    __digits - 7 ) ) );
      return static_cast < long > ( __val );
    }
# 244
extern template class collate< char> ;
# 245
extern template class collate_byname< char> ;
# 247
extern template const collate< char>  &use_facet< collate< char> > (const locale &);
# 251
extern template bool has_facet< collate< char> > (const locale &) throw();
# 256
extern template class collate< wchar_t> ;
# 257
extern template class collate_byname< wchar_t> ;
# 259
extern template const collate< wchar_t>  &use_facet< collate< wchar_t> > (const locale &);
# 263
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 269
}
# 54 "/usr/include/c++/4.4/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 60
enum _Ios_Fmtflags { 
# 62
_S_boolalpha = 1, 
# 63
_S_dec, 
# 64
_S_fixed = 4, 
# 65
_S_hex = 8, 
# 66
_S_internal = 16, 
# 67
_S_left = 32, 
# 68
_S_oct = 64, 
# 69
_S_right = 128, 
# 70
_S_scientific = 256, 
# 71
_S_showbase = 512, 
# 72
_S_showpoint = 1024, 
# 73
_S_showpos = 2048, 
# 74
_S_skipws = 4096, 
# 75
_S_unitbuf = 8192, 
# 76
_S_uppercase = 16384, 
# 77
_S_adjustfield = 176, 
# 78
_S_basefield = 74, 
# 79
_S_floatfield = 260, 
# 80
_S_ios_fmtflags_end = 65536
# 81
}; 
# 84
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 85
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 88
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 89
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 92
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 93
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 96
inline _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 97
{ return __a = (__a | __b); } 
# 100
inline _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 101
{ return __a = (__a & __b); } 
# 104
inline _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 105
{ return __a = (__a ^ __b); } 
# 108
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 109
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 112
enum _Ios_Openmode { 
# 114
_S_app = 1, 
# 115
_S_ate, 
# 116
_S_bin = 4, 
# 117
_S_in = 8, 
# 118
_S_out = 16, 
# 119
_S_trunc = 32, 
# 120
_S_ios_openmode_end = 65536
# 121
}; 
# 124
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 125
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 128
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 129
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 132
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 133
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 136
inline _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 137
{ return __a = (__a | __b); } 
# 140
inline _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 141
{ return __a = (__a & __b); } 
# 144
inline _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 145
{ return __a = (__a ^ __b); } 
# 148
inline _Ios_Openmode operator~(_Ios_Openmode __a) 
# 149
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 152
enum _Ios_Iostate { 
# 154
_S_goodbit, 
# 155
_S_badbit, 
# 156
_S_eofbit, 
# 157
_S_failbit = 4, 
# 158
_S_ios_iostate_end = 65536
# 159
}; 
# 162
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 163
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 166
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 167
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 170
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 171
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 174
inline _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 175
{ return __a = (__a | __b); } 
# 178
inline _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 179
{ return __a = (__a & __b); } 
# 182
inline _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 183
{ return __a = (__a ^ __b); } 
# 186
inline _Ios_Iostate operator~(_Ios_Iostate __a) 
# 187
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 189
enum _Ios_Seekdir { 
# 191
_S_beg, 
# 192
_S_cur, 
# 193
_S_end, 
# 194
_S_ios_seekdir_end = 65536
# 195
}; 
# 207 "/usr/include/c++/4.4/bits/ios_base.h" 3
class ios_base { 
# 217
public: class failure : public exception { 
# 223
public: explicit failure(const string & ) throw(); 
# 228
virtual ~failure() throw(); 
# 231
virtual const char *what() const throw(); 
# 234
private: string _M_msg; 
# 235
}; 
# 263 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 266
static const fmtflags boolalpha = ((fmtflags)1); 
# 269
static const fmtflags dec = ((fmtflags)2); 
# 272
static const fmtflags fixed = ((fmtflags)4); 
# 275
static const fmtflags hex = ((fmtflags)8); 
# 280
static const fmtflags internal = ((fmtflags)16); 
# 284
static const fmtflags left = ((fmtflags)32); 
# 287
static const fmtflags oct = ((fmtflags)64); 
# 291
static const fmtflags right = ((fmtflags)128); 
# 294
static const fmtflags scientific = ((fmtflags)256); 
# 298
static const fmtflags showbase = ((fmtflags)512); 
# 302
static const fmtflags showpoint = ((fmtflags)1024); 
# 305
static const fmtflags showpos = ((fmtflags)2048); 
# 308
static const fmtflags skipws = ((fmtflags)4096); 
# 311
static const fmtflags unitbuf = ((fmtflags)8192); 
# 315
static const fmtflags uppercase = ((fmtflags)16384); 
# 318
static const fmtflags adjustfield = ((fmtflags)176); 
# 321
static const fmtflags basefield = ((fmtflags)74); 
# 324
static const fmtflags floatfield = ((fmtflags)260); 
# 338 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 342
static const iostate badbit = ((iostate)1); 
# 345
static const iostate eofbit = ((iostate)2); 
# 350
static const iostate failbit = ((iostate)4); 
# 353
static const iostate goodbit = ((iostate)0); 
# 369 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 372
static const openmode app = ((openmode)1); 
# 375
static const openmode ate = ((openmode)2); 
# 380
static const openmode binary = ((openmode)4); 
# 383
static const openmode in = ((openmode)8); 
# 386
static const openmode out = ((openmode)16); 
# 389
static const openmode trunc = ((openmode)32); 
# 401 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 404
static const seekdir beg = ((seekdir)0); 
# 407
static const seekdir cur = ((seekdir)1); 
# 410
static const seekdir end = ((seekdir)2); 
# 413
typedef int io_state; 
# 414
typedef int open_mode; 
# 415
typedef int seek_dir; 
# 417
typedef std::streampos streampos; 
# 418
typedef std::streamoff streamoff; 
# 427 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum event { 
# 429
erase_event, 
# 430
imbue_event, 
# 431
copyfmt_event
# 432
}; 
# 444 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef void (*event_callback)(event, ios_base &, int); 
# 457 "/usr/include/c++/4.4/bits/ios_base.h" 3
void register_callback(event_callback , int ); 
# 464
protected: streamsize _M_precision; 
# 465
streamsize _M_width; 
# 466
fmtflags _M_flags; 
# 467
iostate _M_exception; 
# 468
iostate _M_streambuf_state; 
# 473
struct _Callback_list { 
# 476
_Callback_list *_M_next; 
# 477
event_callback _M_fn; 
# 478
int _M_index; 
# 479
_Atomic_word _M_refcount; 
# 481
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 482
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 483
{ } 
# 486
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 490
int _M_remove_reference() 
# 491
{ return __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); } 
# 492
}; 
# 494
_Callback_list *_M_callbacks; 
# 497
void _M_call_callbacks(event ) throw(); 
# 500
void _M_dispose_callbacks(); 
# 503
struct _Words { 
# 505
void *_M_pword; 
# 506
long _M_iword; 
# 507
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 508
}; 
# 511
_Words _M_word_zero; 
# 515
enum { _S_local_word_size = 8}; 
# 516
_Words _M_local_word[_S_local_word_size]; 
# 519
int _M_word_size; 
# 520
_Words *_M_word; 
# 523
_Words &_M_grow_words(int , bool ); 
# 526
locale _M_ios_locale; 
# 529
void _M_init(); 
# 537
public: class Init { 
# 539
friend class ios_base; 
# 541
public: Init(); 
# 542
~Init(); 
# 545
private: static _Atomic_word _S_refcount; 
# 546
static bool _S_synced_with_stdio; 
# 547
}; 
# 555
fmtflags flags() const 
# 556
{ return _M_flags; } 
# 566 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 567
{ 
# 568
fmtflags __old = (_M_flags); 
# 569
(_M_flags) = __fmtfl; 
# 570
return __old; 
# 571
} 
# 582 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 583
{ 
# 584
fmtflags __old = (_M_flags); 
# 585
((_M_flags) |= __fmtfl); 
# 586
return __old; 
# 587
} 
# 599 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 600
{ 
# 601
fmtflags __old = (_M_flags); 
# 602
((_M_flags) &= ((~__mask))); 
# 603
((_M_flags) |= ((__fmtfl & __mask))); 
# 604
return __old; 
# 605
} 
# 614
void unsetf(fmtflags __mask) 
# 615
{ ((_M_flags) &= ((~__mask))); } 
# 625 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize precision() const 
# 626
{ return _M_precision; } 
# 634
streamsize precision(streamsize __prec) 
# 635
{ 
# 636
streamsize __old = (_M_precision); 
# 637
(_M_precision) = __prec; 
# 638
return __old; 
# 639
} 
# 648
streamsize width() const 
# 649
{ return _M_width; } 
# 657
streamsize width(streamsize __wide) 
# 658
{ 
# 659
streamsize __old = (_M_width); 
# 660
(_M_width) = __wide; 
# 661
return __old; 
# 662
} 
# 676 "/usr/include/c++/4.4/bits/ios_base.h" 3
static bool sync_with_stdio(bool  = true); 
# 688 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale imbue(const locale & ); 
# 699 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale getloc() const 
# 700
{ return _M_ios_locale; } 
# 710 "/usr/include/c++/4.4/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 711
{ return _M_ios_locale; } 
# 729 "/usr/include/c++/4.4/bits/ios_base.h" 3
static int xalloc() throw(); 
# 745 "/usr/include/c++/4.4/bits/ios_base.h" 3
long &iword(int __ix) 
# 746
{ 
# 747
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, true)); 
# 749
return __word._M_iword; 
# 750
} 
# 766 "/usr/include/c++/4.4/bits/ios_base.h" 3
void *&pword(int __ix) 
# 767
{ 
# 768
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, false)); 
# 770
return __word._M_pword; 
# 771
} 
# 782 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual ~ios_base(); 
# 785
protected: ios_base(); 
# 790
private: ios_base(const ios_base &); 
# 793
ios_base &operator=(const ios_base &); 
# 794
}; 
# 799
inline ios_base &boolalpha(ios_base &__base) 
# 800
{ 
# 801
__base.setf(ios_base::boolalpha); 
# 802
return __base; 
# 803
} 
# 807
inline ios_base &noboolalpha(ios_base &__base) 
# 808
{ 
# 809
__base.unsetf(ios_base::boolalpha); 
# 810
return __base; 
# 811
} 
# 815
inline ios_base &showbase(ios_base &__base) 
# 816
{ 
# 817
__base.setf(ios_base::showbase); 
# 818
return __base; 
# 819
} 
# 823
inline ios_base &noshowbase(ios_base &__base) 
# 824
{ 
# 825
__base.unsetf(ios_base::showbase); 
# 826
return __base; 
# 827
} 
# 831
inline ios_base &showpoint(ios_base &__base) 
# 832
{ 
# 833
__base.setf(ios_base::showpoint); 
# 834
return __base; 
# 835
} 
# 839
inline ios_base &noshowpoint(ios_base &__base) 
# 840
{ 
# 841
__base.unsetf(ios_base::showpoint); 
# 842
return __base; 
# 843
} 
# 847
inline ios_base &showpos(ios_base &__base) 
# 848
{ 
# 849
__base.setf(ios_base::showpos); 
# 850
return __base; 
# 851
} 
# 855
inline ios_base &noshowpos(ios_base &__base) 
# 856
{ 
# 857
__base.unsetf(ios_base::showpos); 
# 858
return __base; 
# 859
} 
# 863
inline ios_base &skipws(ios_base &__base) 
# 864
{ 
# 865
__base.setf(ios_base::skipws); 
# 866
return __base; 
# 867
} 
# 871
inline ios_base &noskipws(ios_base &__base) 
# 872
{ 
# 873
__base.unsetf(ios_base::skipws); 
# 874
return __base; 
# 875
} 
# 879
inline ios_base &uppercase(ios_base &__base) 
# 880
{ 
# 881
__base.setf(ios_base::uppercase); 
# 882
return __base; 
# 883
} 
# 887
inline ios_base &nouppercase(ios_base &__base) 
# 888
{ 
# 889
__base.unsetf(ios_base::uppercase); 
# 890
return __base; 
# 891
} 
# 895
inline ios_base &unitbuf(ios_base &__base) 
# 896
{ 
# 897
__base.setf(ios_base::unitbuf); 
# 898
return __base; 
# 899
} 
# 903
inline ios_base &nounitbuf(ios_base &__base) 
# 904
{ 
# 905
__base.unsetf(ios_base::unitbuf); 
# 906
return __base; 
# 907
} 
# 912
inline ios_base &internal(ios_base &__base) 
# 913
{ 
# 914
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 915
return __base; 
# 916
} 
# 920
inline ios_base &left(ios_base &__base) 
# 921
{ 
# 922
__base.setf(ios_base::left, ios_base::adjustfield); 
# 923
return __base; 
# 924
} 
# 928
inline ios_base &right(ios_base &__base) 
# 929
{ 
# 930
__base.setf(ios_base::right, ios_base::adjustfield); 
# 931
return __base; 
# 932
} 
# 937
inline ios_base &dec(ios_base &__base) 
# 938
{ 
# 939
__base.setf(ios_base::dec, ios_base::basefield); 
# 940
return __base; 
# 941
} 
# 945
inline ios_base &hex(ios_base &__base) 
# 946
{ 
# 947
__base.setf(ios_base::hex, ios_base::basefield); 
# 948
return __base; 
# 949
} 
# 953
inline ios_base &oct(ios_base &__base) 
# 954
{ 
# 955
__base.setf(ios_base::oct, ios_base::basefield); 
# 956
return __base; 
# 957
} 
# 962
inline ios_base &fixed(ios_base &__base) 
# 963
{ 
# 964
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 965
return __base; 
# 966
} 
# 970
inline ios_base &scientific(ios_base &__base) 
# 971
{ 
# 972
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 973
return __base; 
# 974
} 
# 976
}
# 46 "/usr/include/c++/4.4/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > *,
     basic_streambuf < _CharT, _Traits > *, bool & );
# 113 "/usr/include/c++/4.4/streambuf" 3
template < typename _CharT, typename _Traits >
    class basic_streambuf
    {
    public :






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;




      typedef basic_streambuf < char_type, traits_type > __streambuf_type;


      friend class basic_ios < char_type, traits_type >;
      friend class basic_istream < char_type, traits_type >;
      friend class basic_ostream < char_type, traits_type >;
      friend class istreambuf_iterator < char_type, traits_type >;
      friend class ostreambuf_iterator < char_type, traits_type >;

      friend streamsize
      __copy_streambufs_eof < > ( __streambuf_type *, __streambuf_type *, bool & );

      template < bool _IsMove, typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
        __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
      istreambuf_iterator < _CharT2 > > :: __type
        find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 * );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &,
     basic_string < _CharT2, _Traits2, _Alloc > & );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        getline ( basic_istream < _CharT2, _Traits2 > &,
  basic_string < _CharT2, _Traits2, _Alloc > &, _CharT2 );

    protected :

      char_type * _M_in_beg;
      char_type * _M_in_cur;
      char_type * _M_in_end;
      char_type * _M_out_beg;
      char_type * _M_out_cur;
      char_type * _M_out_end;


      locale _M_buf_locale;

  public :

      virtual
      ~ basic_streambuf ( )
      { }

      locale
      pubimbue ( const locale & __loc )
      {
 locale __tmp ( this -> getloc ( ) );
 this -> imbue ( __loc );
 _M_buf_locale = __loc;
 return __tmp;
      }

      locale
      getloc ( ) const
      { return _M_buf_locale; }

      __streambuf_type *
      pubsetbuf ( char_type * __s, streamsize __n )
      { return this -> setbuf ( __s, __n ); }

      pos_type
      pubseekoff ( off_type __off, ios_base :: seekdir __way,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekoff ( __off, __way, __mode ); }

      pos_type
      pubseekpos ( pos_type __sp,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekpos ( __sp, __mode ); }

      int
      pubsync ( ) { return this -> sync ( ); }

      streamsize
      in_avail ( )
      {
 const streamsize __ret = this -> egptr ( ) - this -> gptr ( );
 return __ret ? __ret : this -> showmanyc ( );
      }

      int_type
      snextc ( )
      {
 int_type __ret = traits_type :: eof ( );
 if ( __builtin_expect ( ! traits_type :: eq_int_type ( this -> sbumpc ( ),
             __ret ), true ) )
   __ret = this -> sgetc ( );
 return __ret;
      }

      int_type
      sbumpc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 else
   __ret = this -> uflow ( );
 return __ret;
      }

      int_type
      sgetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
 else
   __ret = this -> underflow ( );
 return __ret;
      }

      streamsize
      sgetn ( char_type * __s, streamsize __n )
      { return this -> xsgetn ( __s, __n ); }

      int_type
      sputbackc ( char_type __c )
      {
 int_type __ret;
 const bool __testpos = this -> eback ( ) < this -> gptr ( );
 if ( __builtin_expect ( ! __testpos ||
        ! traits_type :: eq ( __c, this -> gptr ( ) [ - 1 ] ), false ) )
   __ret = this -> pbackfail ( traits_type :: to_int_type ( __c ) );
 else
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 return __ret;
      }

      int_type
      sungetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> eback ( ) < this -> gptr ( ), true ) )
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 else
   __ret = this -> pbackfail ( );
 return __ret;
      }

      int_type
      sputc ( char_type __c )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> pptr ( ) < this -> epptr ( ), true ) )
   {
     * this -> pptr ( ) = __c;
     this -> pbump ( 1 );
     __ret = traits_type :: to_int_type ( __c );
   }
 else
   __ret = this -> overflow ( traits_type :: to_int_type ( __c ) );
 return __ret;
      }

      streamsize
      sputn ( const char_type * __s, streamsize __n )
      { return this -> xsputn ( __s, __n ); }

    protected :

      basic_streambuf ( )
      : _M_in_beg ( 0 ), _M_in_cur ( 0 ), _M_in_end ( 0 ),
      _M_out_beg ( 0 ), _M_out_cur ( 0 ), _M_out_end ( 0 ),
      _M_buf_locale ( locale ( ) )
      { }

      char_type *
      eback ( ) const { return _M_in_beg; }

      char_type *
      gptr ( ) const { return _M_in_cur; }

      char_type *
      egptr ( ) const { return _M_in_end; }

      void
      gbump ( int __n ) { _M_in_cur += __n; }

      void
      setg ( char_type * __gbeg, char_type * __gnext, char_type * __gend )
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }

      char_type *
      pbase ( ) const { return _M_out_beg; }

      char_type *
      pptr ( ) const { return _M_out_cur; }

      char_type *
      epptr ( ) const { return _M_out_end; }

      void
      pbump ( int __n ) { _M_out_cur += __n; }

      void
      setp ( char_type * __pbeg, char_type * __pend )
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }

      virtual void
      imbue ( const locale & )
      { }

      virtual basic_streambuf < char_type, _Traits > *
      setbuf ( char_type *, streamsize )
      { return this; }

      virtual pos_type
      seekoff ( off_type, ios_base :: seekdir,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }

      virtual pos_type
      seekpos ( pos_type,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }

      virtual int
      sync ( ) { return 0; }

      virtual streamsize
      showmanyc ( ) { return 0; }

      virtual streamsize
      xsgetn ( char_type * __s, streamsize __n );

      virtual int_type
      underflow ( )
      { return traits_type :: eof ( ); }

      virtual int_type
      uflow ( )
      {
 int_type __ret = traits_type :: eof ( );
 const bool __testeof = traits_type :: eq_int_type ( this -> underflow ( ),
       __ret );
 if ( ! __testeof )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 return __ret;
      }

      virtual int_type
      pbackfail ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }

      virtual streamsize
      xsputn ( const char_type * __s, streamsize __n );

      virtual int_type
      overflow ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }



    public :

      void
      stossc ( )
      {
 if ( this -> gptr ( ) < this -> egptr ( ) )
   this -> gbump ( 1 );
 else
   this -> uflow ( );
      }


    private :


      basic_streambuf ( const __streambuf_type & __sb )
      : _M_in_beg ( __sb . _M_in_beg ), _M_in_cur ( __sb . _M_in_cur ),
      _M_in_end ( __sb . _M_in_end ), _M_out_beg ( __sb . _M_out_beg ),
      _M_out_cur ( __sb . _M_out_cur ), _M_out_end ( __sb . _M_out_cur ),
      _M_buf_locale ( __sb . _M_buf_locale )
      { }

      __streambuf_type &
      operator = ( const __streambuf_type & ) { return * this; };
    };
# 784 "/usr/include/c++/4.4/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> >  * , basic_streambuf< char, char_traits< char> >  * , bool & ); 
# 789
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> >  * , basic_streambuf< wchar_t, char_traits< wchar_t> >  * , bool & ); 
# 793
}
# 40 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsgetn ( char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> egptr ( ) - this -> gptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( __s, this -> gptr ( ), __len );
       __ret += __len;
       __s += __len;
       this -> gbump ( __len );
     }

   if ( __ret < __n )
     {
       const int_type __c = this -> uflow ( );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    traits_type :: assign ( * __s ++, traits_type :: to_char_type ( __c ) );
    ++ __ret;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 76
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsputn ( const char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> epptr ( ) - this -> pptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( this -> pptr ( ), __s, __len );
       __ret += __len;
       __s += __len;
       this -> pbump ( __len );
     }

   if ( __ret < __n )
     {
       int_type __c = this -> overflow ( traits_type :: to_int_type ( * __s ) );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    ++ __ret;
    ++ __s;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 113
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > * __sbin,
     basic_streambuf < _CharT, _Traits > * __sbout,
     bool & __ineof )
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits :: int_type __c = __sbin -> sgetc ( );
      while ( ! _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
 {
   __c = __sbout -> sputc ( _Traits :: to_char_type ( __c ) );
   if ( _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
     {
       __ineof = false;
       break;
     }
   ++ __ret;
   __c = __sbin -> snextc ( );
 }
      return __ret;
    }
# 136
template < typename _CharT, typename _Traits >
    inline streamsize
    __copy_streambufs ( basic_streambuf < _CharT, _Traits > * __sbin,
        basic_streambuf < _CharT, _Traits > * __sbout )
    {
      bool __ineof;
      return __copy_streambufs_eof ( __sbin, __sbout, __ineof );
    }
# 149
extern template class basic_streambuf< char, char_traits< char> > ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> >  * , basic_streambuf< char, char_traits< char> >  * );
# 154
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> >  *, basic_streambuf< char, char_traits< char> >  *, bool &);
# 160
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> >  * , basic_streambuf< wchar_t, char_traits< wchar_t> >  * );
# 165
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> >  *, basic_streambuf< wchar_t, char_traits< wchar_t> >  *, bool &);
# 172
}
# 53 "/usr/include/wctype.h" 3
typedef unsigned long wctype_t; 
# 73 "/usr/include/wctype.h" 3
enum { 
# 74
__ISwupper, 
# 75
__ISwlower, 
# 76
__ISwalpha, 
# 77
__ISwdigit, 
# 78
__ISwxdigit, 
# 79
__ISwspace, 
# 80
__ISwprint, 
# 81
__ISwgraph, 
# 82
__ISwblank, 
# 83
__ISwcntrl, 
# 84
__ISwpunct, 
# 85
__ISwalnum, 
# 87
_ISwupper = 16777216, 
# 88
_ISwlower = 33554432, 
# 89
_ISwalpha = 67108864, 
# 90
_ISwdigit = 134217728, 
# 91
_ISwxdigit = 268435456, 
# 92
_ISwspace = 536870912, 
# 93
_ISwprint = 1073741824, 
# 94
_ISwgraph = (-2147483647-1), 
# 95
_ISwblank = 65536, 
# 96
_ISwcntrl = 131072, 
# 97
_ISwpunct = 262144, 
# 98
_ISwalnum = 524288
# 99
}; 
# 112
extern "C" int iswalnum(wint_t ) throw(); 
# 118
extern "C" int iswalpha(wint_t ) throw(); 
# 121
extern "C" int iswcntrl(wint_t ) throw(); 
# 125
extern "C" int iswdigit(wint_t ) throw(); 
# 129
extern "C" int iswgraph(wint_t ) throw(); 
# 134
extern "C" int iswlower(wint_t ) throw(); 
# 137
extern "C" int iswprint(wint_t ) throw(); 
# 142
extern "C" int iswpunct(wint_t ) throw(); 
# 147
extern "C" int iswspace(wint_t ) throw(); 
# 152
extern "C" int iswupper(wint_t ) throw(); 
# 157
extern "C" int iswxdigit(wint_t ) throw(); 
# 163
extern "C" int iswblank(wint_t ) throw(); 
# 172 "/usr/include/wctype.h" 3
extern "C" wctype_t wctype(const char * ) throw(); 
# 176
extern "C" int iswctype(wint_t , wctype_t ) throw(); 
# 187
extern "C" { typedef const __int32_t *wctrans_t; }
# 195
extern "C" wint_t towlower(wint_t ) throw(); 
# 198
extern "C" wint_t towupper(wint_t ) throw(); 
# 219 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans(const char * ) throw(); 
# 222
extern "C" wint_t towctrans(wint_t , wctrans_t ) throw(); 
# 231
extern "C" int iswalnum_l(wint_t , __locale_t ) throw(); 
# 237
extern "C" int iswalpha_l(wint_t , __locale_t ) throw(); 
# 240
extern "C" int iswcntrl_l(wint_t , __locale_t ) throw(); 
# 244
extern "C" int iswdigit_l(wint_t , __locale_t ) throw(); 
# 248
extern "C" int iswgraph_l(wint_t , __locale_t ) throw(); 
# 253
extern "C" int iswlower_l(wint_t , __locale_t ) throw(); 
# 256
extern "C" int iswprint_l(wint_t , __locale_t ) throw(); 
# 261
extern "C" int iswpunct_l(wint_t , __locale_t ) throw(); 
# 266
extern "C" int iswspace_l(wint_t , __locale_t ) throw(); 
# 271
extern "C" int iswupper_l(wint_t , __locale_t ) throw(); 
# 276
extern "C" int iswxdigit_l(wint_t , __locale_t ) throw(); 
# 281
extern "C" int iswblank_l(wint_t , __locale_t ) throw(); 
# 285
extern "C" wctype_t wctype_l(const char * , __locale_t ) throw(); 
# 290
extern "C" int iswctype_l(wint_t , wctype_t , __locale_t ) throw(); 
# 299
extern "C" wint_t towlower_l(wint_t , __locale_t ) throw(); 
# 302
extern "C" wint_t towupper_l(wint_t , __locale_t ) throw(); 
# 306
extern "C" wctrans_t wctrans_l(const char * , __locale_t ) throw(); 
# 310
extern "C" wint_t towctrans_l(wint_t , wctrans_t , __locale_t ) throw(); 
# 76 "/usr/include/c++/4.4/cwctype" 3
namespace std __attribute((__visibility__("default"))) { 
# 78
using ::wctrans_t;
# 79
using ::wctype_t;
# 82
using ::iswalnum;
# 83
using ::iswalpha;
# 85
using ::iswblank;
# 87
using ::iswcntrl;
# 88
using ::iswctype;
# 89
using ::iswdigit;
# 90
using ::iswgraph;
# 91
using ::iswlower;
# 92
using ::iswprint;
# 93
using ::iswpunct;
# 94
using ::iswspace;
# 95
using ::iswupper;
# 96
using ::iswxdigit;
# 97
using ::towctrans;
# 98
using ::towlower;
# 99
using ::towupper;
# 100
using ::wctrans;
# 101
using ::wctype;
# 103
}
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
struct ctype_base { 
# 43
typedef const int *__to_type; 
# 47
typedef unsigned short mask; 
# 48
static const mask upper = (_ISupper); 
# 49
static const mask lower = (_ISlower); 
# 50
static const mask alpha = (_ISalpha); 
# 51
static const mask digit = (_ISdigit); 
# 52
static const mask xdigit = (_ISxdigit); 
# 53
static const mask space = (_ISspace); 
# 54
static const mask print = (_ISprint); 
# 55
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 56
static const mask cntrl = (_IScntrl); 
# 57
static const mask punct = (_ISpunct); 
# 58
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 59
}; 
# 61
}
# 40 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template < typename _CharT, typename _Traits >
    class istreambuf_iterator
    : public iterator < input_iterator_tag, _CharT, typename _Traits :: off_type,
        _CharT *, _CharT & >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits :: int_type int_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_istream < _CharT, _Traits > istream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

      template < bool _IsMove, typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
 __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
               istreambuf_iterator < _CharT2 > > :: __type
 find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

    private :







      mutable streambuf_type * _M_sbuf;
      mutable int_type _M_c;

    public :

      istreambuf_iterator ( ) throw ( )
      : _M_sbuf ( 0 ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( istream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_c ( traits_type :: eof ( ) ) { }




      char_type
      operator * ( ) const
      {







 return traits_type :: to_char_type ( _M_get ( ) );
      }


      istreambuf_iterator &
      operator ++ ( )
      {
 ;


 if ( _M_sbuf )
   {
     _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return * this;
      }


      istreambuf_iterator
      operator ++ ( int )
      {
 ;



 istreambuf_iterator __old = * this;
 if ( _M_sbuf )
   {
     __old . _M_c = _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return __old;
      }





      bool
      equal ( const istreambuf_iterator & __b ) const
      { return _M_at_eof ( ) == __b . _M_at_eof ( ); }

    private :
      int_type
      _M_get ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 int_type __ret = __eof;
 if ( _M_sbuf )
   {
     if ( ! traits_type :: eq_int_type ( _M_c, __eof ) )
       __ret = _M_c;
     else if ( ! traits_type :: eq_int_type ( ( __ret = _M_sbuf -> sgetc ( ) ),
            __eof ) )
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 return traits_type :: eq_int_type ( _M_get ( ), __eof );
      }
    };
# 185
template < typename _CharT, typename _Traits >
    inline bool
    operator == ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return __a . equal ( __b ); }
# 191
template < typename _CharT, typename _Traits >
    inline bool
    operator != ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return ! __a . equal ( __b ); }
# 198
template < typename _CharT, typename _Traits >
    class ostreambuf_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

    private :
      streambuf_type * _M_sbuf;
      bool _M_failed;

    public :

      ostreambuf_iterator ( ostream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator &
      operator = ( _CharT __c )
      {
 if ( ! _M_failed &&
     _Traits :: eq_int_type ( _M_sbuf -> sputc ( __c ), _Traits :: eof ( ) ) )
   _M_failed = true;
 return * this;
      }


      ostreambuf_iterator &
      operator * ( )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( int )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( )
      { return * this; }


      bool
      failed ( ) const throw ( )
      { return _M_failed; }

      ostreambuf_iterator &
      _M_put ( const _CharT * __ws, streamsize __len )
      {
 if ( __builtin_expect ( ! _M_failed, true )
     && __builtin_expect ( this -> _M_sbuf -> sputn ( __ws, __len ) != __len,
    false ) )
   _M_failed = true;
 return * this;
      }
    };
# 273
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
                           ostreambuf_iterator < _CharT > > :: __type
    copy ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last,
  ostreambuf_iterator < _CharT > __result )
    {
      if ( __first . _M_sbuf && ! __last . _M_sbuf && ! __result . _M_failed )
 {
   bool __ineof;
   __copy_streambufs_eof ( __first . _M_sbuf, __result . _M_sbuf, __ineof );
   if ( ! __ineof )
     __result . _M_failed = true;
 }
      return __result;
    }
# 290
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( _CharT * __first, _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 302
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( const _CharT * __first, const _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 314
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT > __first,
     istreambuf_iterator < _CharT > __last, _CharT * __result )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     {
       const streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    traits_type :: copy ( __result, __sb -> gptr ( ), __n );
    __sb -> gbump ( __n );
    __result += __n;
    __c = __sb -> underflow ( );
  }
       else
  {
    * __result ++ = traits_type :: to_char_type ( __c );
    __c = __sb -> snextc ( );
  }
     }
 }
      return __result;
    }
# 349
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
          istreambuf_iterator < _CharT > > :: __type
    find ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last, const _CharT & __val )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   const int_type __ival = traits_type :: to_int_type ( __val );
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) )
   && ! traits_type :: eq_int_type ( __c, __ival ) )
     {
       streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    const _CharT * __p = traits_type :: find ( __sb -> gptr ( ),
       __n, __val );
    if ( __p )
      __n = __p - __sb -> gptr ( );
    __sb -> gbump ( __n );
    __c = __sb -> sgetc ( );
  }
       else
  __c = __sb -> snextc ( );
     }

   if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     __first . _M_c = __c;
   else
     __first . _M_sbuf = 0;
 }
      return __first;
    }
# 390
}
# 52 "/usr/include/c++/4.4/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _Tv> void __convert_to_v(const char * , _Tv & , ios_base::iostate & , const __c_locale & ); 
# 72
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &); 
# 77
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &); 
# 82
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &); 
# 87
template< class _CharT, class _Traits> 
# 88
struct __pad { 
# 91
static void _S_pad(ios_base & , _CharT , _CharT * , const _CharT * , streamsize , streamsize ); 
# 93
}; 
# 100
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last );
# 109
template < typename _CharT >
    inline
    ostreambuf_iterator < _CharT >
    __write ( ostreambuf_iterator < _CharT > __s, const _CharT * __ws, int __len )
    {
      __s . _M_put ( __ws, __len );
      return __s;
    }
# 119
template < typename _CharT, typename _OutIter >
    inline
    _OutIter
    __write ( _OutIter __s, const _CharT * __ws, int __len )
    {
      for ( int __j = 0; __j < __len; __j ++, ++ __s )
 * __s = __ws [ __j ];
      return __s;
    }
# 143 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class __ctype_abstract_base : public locale :: facet, public ctype_base
    {
    public :


      typedef _CharT char_type;

      bool
      is ( mask __m, char_type __c ) const
      { return this -> do_is ( __m, __c ); }

      const char_type *
      is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const
      { return this -> do_is ( __lo, __hi, __vec ); }

      const char_type *
      scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_is ( __m, __lo, __hi ); }

      const char_type *
      scan_not ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_not ( __m, __lo, __hi ); }

      char_type
      toupper ( char_type __c ) const
      { return this -> do_toupper ( __c ); }

      const char_type *
      toupper ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_toupper ( __lo, __hi ); }

      char_type
      tolower ( char_type __c ) const
      { return this -> do_tolower ( __c ); }

      const char_type *
      tolower ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_tolower ( __lo, __hi ); }

      char_type
      widen ( char __c ) const
      { return this -> do_widen ( __c ); }

      const char *
      widen ( const char * __lo, const char * __hi, char_type * __to ) const
      { return this -> do_widen ( __lo, __hi, __to ); }

      char
      narrow ( char_type __c, char __dfault ) const
      { return this -> do_narrow ( __c, __dfault ); }

      const char_type *
      narrow ( const char_type * __lo, const char_type * __hi,
       char __dfault, char * __to ) const
      { return this -> do_narrow ( __lo, __hi, __dfault, __to ); }

    protected :
      explicit
      __ctype_abstract_base ( size_t __refs = 0 ) : facet ( __refs ) { }

      virtual
      ~ __ctype_abstract_base ( ) { }

      virtual bool
      do_is ( mask __m, char_type __c ) const = 0;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi,
     mask * __vec ) const = 0;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo,
   const char_type * __hi ) const = 0;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const = 0;

      virtual char_type
      do_toupper ( char_type ) const = 0;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const = 0;

      virtual char_type
      do_tolower ( char_type ) const = 0;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const = 0;

      virtual char_type
      do_widen ( char ) const = 0;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi,
        char_type * __dest ) const = 0;

      virtual char
      do_narrow ( char_type, char __dfault ) const = 0;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const = 0;
    };
# 604 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype : public __ctype_abstract_base < _CharT >
    {
    public :

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base < _CharT > :: mask mask;


      static locale :: id id;

      explicit
      ctype ( size_t __refs = 0 ) : __ctype_abstract_base < _CharT > ( __refs ) { }

   protected :
      virtual
      ~ ctype ( );

      virtual bool
      do_is ( mask __m, char_type __c ) const;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const;

      virtual char_type
      do_toupper ( char_type __c ) const;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_tolower ( char_type __c ) const;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_widen ( char __c ) const;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi, char_type * __dest ) const;

      virtual char
      do_narrow ( char_type, char __dfault ) const;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const;
    };
# 661
template< class _CharT> locale::id 
# 662
ctype< _CharT> ::id; 
# 674 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 679
public: typedef char char_type; 
# 683
protected: __c_locale _M_c_locale_ctype; 
# 684
bool _M_del; 
# 685
__to_type _M_toupper; 
# 686
__to_type _M_tolower; 
# 687
const mask *_M_table; 
# 688
mutable char _M_widen_ok; 
# 689
mutable char _M_widen[1 + (static_cast< unsigned char>((-1)))]; 
# 690
mutable char _M_narrow[1 + (static_cast< unsigned char>((-1)))]; 
# 691
mutable char _M_narrow_ok; 
# 696
public: static locale::id id; 
# 698
static const size_t table_size = (1 + (static_cast< unsigned char>((-1)))); 
# 711 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(const mask *  = 0, bool  = false, size_t  = (0)); 
# 724 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(__c_locale , const mask *  = 0, bool  = false, size_t  = (0)); 
# 737 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline bool is(mask , char ) const; 
# 752 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *is(const char * , const char * , mask * ) const; 
# 766 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *scan_is(mask , const char * , const char * ) const; 
# 780 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *scan_not(mask , const char * , const char * ) const; 
# 795 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 796
{ return this->do_toupper(__c); } 
# 812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 813
{ return this->do_toupper(__lo, __hi); } 
# 828 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 829
{ return this->do_tolower(__c); } 
# 845 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 846
{ return this->do_tolower(__lo, __hi); } 
# 865 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 866
{ 
# 867
if (_M_widen_ok) { 
# 868
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 869
this->_M_widen_init(); 
# 870
return this->do_widen(__c); 
# 871
} 
# 892 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 893
{ 
# 894
if ((_M_widen_ok) == 1) 
# 895
{ 
# 896
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 897
return __hi; 
# 898
}  
# 899
if (!(_M_widen_ok)) { 
# 900
this->_M_widen_init(); }  
# 901
return this->do_widen(__lo, __hi, __to); 
# 902
} 
# 923 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 924
{ 
# 925
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 926
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 927
const char __t = this->do_narrow(__c, __dfault); 
# 928
if (__t != __dfault) { 
# 929
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 930
return __t; 
# 931
} 
# 956 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 957
__dfault, char *__to) const 
# 958
{ 
# 959
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 960
{ 
# 961
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 962
return __hi; 
# 963
}  
# 964
if (!(_M_narrow_ok)) { 
# 965
this->_M_narrow_init(); }  
# 966
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 967
} 
# 974
const mask *table() const throw() 
# 975
{ return _M_table; } 
# 979
static const mask *classic_table() throw(); 
# 989
protected: virtual ~ctype(); 
# 1005 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const; 
# 1022 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * , const char_type * ) const; 
# 1038 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const; 
# 1055 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * , const char_type * ) const; 
# 1075 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1076
{ return __c; } 
# 1098 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__dest) const 
# 1099
{ 
# 1100
__builtin_memcpy(__dest, __lo, __hi - __lo); 
# 1101
return __hi; 
# 1102
} 
# 1124 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char) const 
# 1125
{ return __c; } 
# 1150 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char, char *
# 1151
__dest) const 
# 1152
{ 
# 1153
__builtin_memcpy(__dest, __lo, __hi - __lo); 
# 1154
return __hi; 
# 1155
} 
# 1158
private: void _M_narrow_init() const; 
# 1159
void _M_widen_init() const; 
# 1160
}; 
# 1175 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1180
public: typedef wchar_t char_type; 
# 1181
typedef wctype_t __wmask_type; 
# 1184
protected: __c_locale _M_c_locale_ctype; 
# 1187
bool _M_narrow_ok; 
# 1188
char _M_narrow[128]; 
# 1189
wint_t _M_widen[1 + (static_cast< unsigned char>((-1)))]; 
# 1192
mask _M_bit[16]; 
# 1193
__wmask_type _M_wmask[16]; 
# 1198
public: static locale::id id; 
# 1208 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(size_t  = (0)); 
# 1219 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(__c_locale , size_t  = (0)); 
# 1223
protected: __wmask_type _M_convert_to_wmask(const mask ) const; 
# 1227
virtual ~ctype(); 
# 1243 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual bool do_is(mask , char_type ) const; 
# 1262 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * , const char_type * , mask * ) const; 
# 1280 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask , const char_type * , const char_type * ) const; 
# 1298 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask , const char_type * , const char_type * ) const; 
# 1315 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const; 
# 1332 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * , const char_type * ) const; 
# 1348 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const; 
# 1365 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * , const char_type * ) const; 
# 1385 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_widen(char) const; 
# 1407 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char *do_widen(const char * , const char * , char_type * ) const; 
# 1430 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char ) const; 
# 1456 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * , const char_type * , char , char * ) const; 
# 1461
void _M_initialize_ctype(); 
# 1462
}; 
# 1466
template < typename _CharT >
    class ctype_byname : public ctype < _CharT >
    {
    public :
      typedef typename ctype < _CharT > :: mask mask;

      explicit
      ctype_byname ( const char * __s, size_t __refs = 0 );

    protected :
      virtual
      ~ ctype_byname ( ) { };
    };
# 1482
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1486
public: explicit ctype_byname(const char * , size_t  = (0)); 
# 1490
protected: virtual ~ctype_byname(); 
# 1491
}; 
# 1495
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1499
public: explicit ctype_byname(const char * , size_t  = (0)); 
# 1503
protected: virtual ~ctype_byname(); 
# 1504
}; 
# 1507
}
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
inline bool ctype< char> ::is(mask __m, char __c) const 
# 42
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 46
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 47
{ 
# 48
while (__low < __high) { 
# 49
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>((*(__low++)))]); }  
# 50
return __high; 
# 51
} 
# 55
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 56
{ 
# 57
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>((*__low))]) & __m))) { 
# 59
++__low; }  
# 60
return __low; 
# 61
} 
# 65
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 66
{ 
# 67
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>((*__low))]) & __m) != 0)) { 
# 69
++__low; }  
# 70
return __low; 
# 71
} 
# 73
}
# 1512 "/usr/include/c++/4.4/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1515
class __num_base { 
# 1521
public: enum { 
# 1522
_S_ominus, 
# 1523
_S_oplus, 
# 1524
_S_ox, 
# 1525
_S_oX, 
# 1526
_S_odigits, 
# 1527
_S_odigits_end = 20, 
# 1528
_S_oudigits = 20, 
# 1529
_S_oudigits_end = 36, 
# 1530
_S_oe = 18, 
# 1531
_S_oE = 34, 
# 1532
_S_oend = 36
# 1533
}; 
# 1540
static const char *_S_atoms_out; 
# 1544
static const char *_S_atoms_in; 
# 1547
enum { 
# 1548
_S_iminus, 
# 1549
_S_iplus, 
# 1550
_S_ix, 
# 1551
_S_iX, 
# 1552
_S_izero, 
# 1553
_S_ie = 18, 
# 1554
_S_iE = 24, 
# 1555
_S_iend = 26
# 1556
}; 
# 1561
static void _S_format_float(const ios_base & , char * , char ); 
# 1562
}; 
# 1564
template < typename _CharT >
    struct __numpunct_cache : public locale :: facet
    {
      const char * _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT * _M_truename;
      size_t _M_truename_size;
      const _CharT * _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out [ __num_base :: _S_oend ];





      _CharT _M_atoms_in [ __num_base :: _S_iend ];

      bool _M_allocated;

      __numpunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_grouping ( __null ), _M_grouping_size ( 0 ), _M_use_grouping ( false ),
      _M_truename ( __null ), _M_truename_size ( 0 ), _M_falsename ( __null ),
      _M_falsename_size ( 0 ), _M_decimal_point ( _CharT ( ) ),
      _M_thousands_sep ( _CharT ( ) ), _M_allocated ( false )
      { }

      ~ __numpunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __numpunct_cache &
      operator = ( const __numpunct_cache & );

      explicit
      __numpunct_cache ( const __numpunct_cache & );
    };
# 1611
template < typename _CharT >
    __numpunct_cache < _CharT > :: ~ __numpunct_cache ( )
    {
      if ( _M_allocated )
 {
   delete [ ] _M_grouping;
   delete [ ] _M_truename;
   delete [ ] _M_falsename;
 }
    }
# 1635 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      typedef __numpunct_cache < _CharT > __cache_type;

    protected :
      __cache_type * _M_data;

    public :

      static locale :: id id;






      explicit
      numpunct ( size_t __refs = 0 ) : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( ); }

      explicit
      numpunct ( __cache_type * __cache, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __cache )
      { _M_initialize_numpunct ( ); }

      explicit
      numpunct ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( __cloc ); }

      char_type
      decimal_point ( ) const
      { return this -> do_decimal_point ( ); }

      char_type
      thousands_sep ( ) const
      { return this -> do_thousands_sep ( ); }

      string
      grouping ( ) const
      { return this -> do_grouping ( ); }

      string_type
      truename ( ) const
      { return this -> do_truename ( ); }

      string_type
      falsename ( ) const
      { return this -> do_falsename ( ); }

    protected :

      virtual
      ~ numpunct ( );

      virtual char_type
      do_decimal_point ( ) const
      { return _M_data -> _M_decimal_point; }

      virtual char_type
      do_thousands_sep ( ) const
      { return _M_data -> _M_thousands_sep; }

      virtual string
      do_grouping ( ) const
      { return _M_data -> _M_grouping; }

      virtual string_type
      do_truename ( ) const
      { return _M_data -> _M_truename; }

      virtual string_type
      do_falsename ( ) const
      { return _M_data -> _M_falsename; }


      void
      _M_initialize_numpunct ( __c_locale __cloc = __null );
    };
# 1847 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT> locale::id 
# 1848
numpunct< _CharT> ::id; 
# 1851
template<> numpunct< char> ::~numpunct(); 
# 1855
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale ); 
# 1859
template<> numpunct< wchar_t> ::~numpunct(); 
# 1863
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale ); 
# 1867
template < typename _CharT >
    class numpunct_byname : public numpunct < _CharT >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      explicit
      numpunct_byname ( const char * __s, size_t __refs = 0 )
      : numpunct < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     __c_locale __tmp;
     this -> _S_create_c_locale ( __tmp, __s );
     this -> _M_initialize_numpunct ( __tmp );
     this -> _S_destroy_c_locale ( __tmp );
   }
      }

    protected :
      virtual
      ~ numpunct_byname ( ) { }
    };
# 1907 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class num_get : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale :: id id;

      explicit
      num_get ( size_t __refs = 0 ) : facet ( __refs ) { }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, bool & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned short & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned int & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }


      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, float & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, void * & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

    protected :

      virtual ~ num_get ( ) { }

      iter_type
      _M_extract_float ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         string & ) const;

      template < typename _ValueT >
        iter_type
        _M_extract_int ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         _ValueT & ) const;

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value, int > :: __type
        _M_find ( const _CharT2 *, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   if ( __len <= 10 )
     {
       if ( __c >= _CharT2 ( '0' ) && __c < _CharT2 ( _CharT2 ( '0' ) + __len ) )
  __ret = __c - _CharT2 ( '0' );
     }
   else
     {
       if ( __c >= _CharT2 ( '0' ) && __c <= _CharT2 ( '9' ) )
  __ret = __c - _CharT2 ( '0' );
       else if ( __c >= _CharT2 ( 'a' ) && __c <= _CharT2 ( 'f' ) )
  __ret = 10 + ( __c - _CharT2 ( 'a' ) );
       else if ( __c >= _CharT2 ( 'A' ) && __c <= _CharT2 ( 'F' ) )
  __ret = 10 + ( __c - _CharT2 ( 'A' ) );
     }
   return __ret;
 }

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < ! __is_char < _CharT2 > :: __value,
          int > :: __type
        _M_find ( const _CharT2 * __zero, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   const char_type * __q = char_traits < _CharT2 > :: find ( __zero, __len, __c );
   if ( __q )
     {
       __ret = __q - __zero;
       if ( __ret > 15 )
  __ret -= 6;
     }
   return __ret;
 }

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate &, bool & ) const;

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned short & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned int & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      float & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      double & ) const;







      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      long double & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      void * & ) const;

    };
# 2229 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT, class _InIter> locale::id 
# 2230
num_get< _CharT, _InIter> ::id; 
# 2244 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class num_put : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale :: id id;

      explicit
      num_put ( size_t __refs = 0 ) : facet ( __refs ) { }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, bool __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }


      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   long double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   const void * __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

    protected :
      template < typename _ValueT >
        iter_type
        _M_insert_float ( iter_type, ios_base & __io, char_type __fill,
   char __mod, _ValueT __v ) const;

      void
      _M_group_float ( const char * __grouping, size_t __grouping_size,
       char_type __sep, const char_type * __p, char_type * __new,
       char_type * __cs, int & __len ) const;

      template < typename _ValueT >
        iter_type
        _M_insert_int ( iter_type, ios_base & __io, char_type __fill,
        _ValueT __v ) const;

      void
      _M_group_int ( const char * __grouping, size_t __grouping_size,
     char_type __sep, ios_base & __io, char_type * __new,
     char_type * __cs, int & __len ) const;

      void
      _M_pad ( char_type __fill, streamsize __w, ios_base & __io,
      char_type * __new, const char_type * __cs, int & __len ) const;


      virtual
      ~ num_put ( ) { };

      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, bool __v ) const;

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill, long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, double __v ) const;






      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long double __v ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, const void * __v ) const;







    };
# 2508 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> locale::id 
# 2509
num_put< _CharT, _OutIter> ::id; 
# 2519
template < typename _CharT >
    inline bool
    isspace ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: space, __c ); }
# 2525
template < typename _CharT >
    inline bool
    isprint ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: print, __c ); }
# 2531
template < typename _CharT >
    inline bool
    iscntrl ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: cntrl, __c ); }
# 2537
template < typename _CharT >
    inline bool
    isupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: upper, __c ); }
# 2543
template < typename _CharT >
    inline bool
    islower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: lower, __c ); }
# 2549
template < typename _CharT >
    inline bool
    isalpha ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alpha, __c ); }
# 2555
template < typename _CharT >
    inline bool
    isdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: digit, __c ); }
# 2561
template < typename _CharT >
    inline bool
    ispunct ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: punct, __c ); }
# 2567
template < typename _CharT >
    inline bool
    isxdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: xdigit, __c ); }
# 2573
template < typename _CharT >
    inline bool
    isalnum ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alnum, __c ); }
# 2579
template < typename _CharT >
    inline bool
    isgraph ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: graph, __c ); }
# 2585
template < typename _CharT >
    inline _CharT
    toupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . toupper ( __c ); }
# 2591
template < typename _CharT >
    inline _CharT
    tolower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . tolower ( __c ); }
# 2596
}
# 37 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & ) const; 
# 46
}; 
# 49
template < typename _CharT >
    struct __use_cache < __numpunct_cache < _CharT > >
    {
      const __numpunct_cache < _CharT > *
      operator ( ) ( const locale & __loc ) const
      {
 const size_t __i = numpunct < _CharT > :: id . _M_id ( );
 const locale :: facet * * __caches = __loc . _M_impl -> _M_caches;
 if ( ! __caches [ __i ] )
   {
     __numpunct_cache < _CharT > * __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache < _CharT >;
  __tmp -> _M_cache ( __loc );
       }
     catch ( ... )
       {
  delete __tmp;
  throw;
       }
     __loc . _M_impl -> _M_install_cache ( __tmp, __i );
   }
 return static_cast < const __numpunct_cache < _CharT > * > ( __caches [ __i ] );
      }
    };
# 76
template < typename _CharT >
    void
    __numpunct_cache < _CharT > :: _M_cache ( const locale & __loc )
    {
      _M_allocated = true;

      const numpunct < _CharT > & __np = use_facet < numpunct < _CharT > > ( __loc );

      _M_grouping_size = __np . grouping ( ) . size ( );
      char * __grouping = new char [ _M_grouping_size ];
      __np . grouping ( ) . copy ( __grouping, _M_grouping_size );
      _M_grouping = __grouping;
      _M_use_grouping = ( _M_grouping_size
    && static_cast < signed char > ( _M_grouping [ 0 ] ) > 0
    && ( _M_grouping [ 0 ]
        != __gnu_cxx :: __numeric_traits < char > :: __max ) );

      _M_truename_size = __np . truename ( ) . size ( );
      _CharT * __truename = new _CharT [ _M_truename_size ];
      __np . truename ( ) . copy ( __truename, _M_truename_size );
      _M_truename = __truename;

      _M_falsename_size = __np . falsename ( ) . size ( );
      _CharT * __falsename = new _CharT [ _M_falsename_size ];
      __np . falsename ( ) . copy ( __falsename, _M_falsename_size );
      _M_falsename = __falsename;

      _M_decimal_point = __np . decimal_point ( );
      _M_thousands_sep = __np . thousands_sep ( );

      const ctype < _CharT > & __ct = use_facet < ctype < _CharT > > ( __loc );
      __ct . widen ( __num_base :: _S_atoms_out,
   __num_base :: _S_atoms_out + __num_base :: _S_oend, _M_atoms_out );
      __ct . widen ( __num_base :: _S_atoms_in,
   __num_base :: _S_atoms_in + __num_base :: _S_iend, _M_atoms_in );
    }
# 122 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
bool __verify_grouping(const char * , size_t , const string & ); 
# 127
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    _M_extract_float ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, string & __xtrc ) const
    {
      typedef char_traits < _CharT > __traits_type;
      typedef __numpunct_cache < _CharT > __cache_type;
      __use_cache < __cache_type > __uc;
      const locale & __loc = __io . _M_getloc ( );
      const __cache_type * __lc = __uc ( __loc );
      const _CharT * __lit = __lc -> _M_atoms_in;
      char_type __c = char_type ( );


      bool __testeof = __beg == __end;


      if ( ! __testeof )
 {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
     {
       __xtrc += __plus ? '+' : '-';
       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while ( ! __testeof )
 {
   if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       || __c == __lc -> _M_decimal_point )
     break;
   else if ( __c == __lit [ __num_base :: _S_izero ] )
     {
       if ( ! __found_mantissa )
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++ __sep_pos;

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if ( __lc -> _M_use_grouping )
 __found_grouping . reserve ( 32 );
      const char_type * __lit_zero = __lit + __num_base :: _S_izero;

      if ( ! __lc -> _M_allocated )

 while ( ! __testeof )
   {
     const int __digit = _M_find ( __lit_zero, 10, __c );
     if ( __digit != - 1 )
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if ( __c == __lc -> _M_decimal_point
       && ! __found_dec && ! __found_sci )
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ( ( __c == __lit [ __num_base :: _S_ie ]
        || __c == __lit [ __num_base :: _S_iE ] )
       && ! __found_sci && __found_mantissa )
       {

  __xtrc += 'e';
  __found_sci = true;


  if ( ++ __beg != __end )
    {
      __c = * __beg;
      const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
      if ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }
      else
 while ( ! __testeof )
   {


     if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       {
  if ( ! __found_dec && ! __found_sci )
    {


      if ( __sep_pos )
        {
   __found_grouping += static_cast < char > ( __sep_pos );
   __sep_pos = 0;
        }
      else
        {


   __xtrc . clear ( );
   break;
        }
    }
  else
    break;
       }
     else if ( __c == __lc -> _M_decimal_point )
       {
  if ( ! __found_dec && ! __found_sci )
    {



      if ( __found_grouping . size ( ) )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type * __q =
    __traits_type :: find ( __lit_zero, 10, __c );
  if ( __q )
    {
      __xtrc += '0' + ( __q - __lit_zero );
      __found_mantissa = true;
      ++ __sep_pos;
    }
  else if ( ( __c == __lit [ __num_base :: _S_ie ]
     || __c == __lit [ __num_base :: _S_iE ] )
    && ! __found_sci && __found_mantissa )
    {

      if ( __found_grouping . size ( ) && ! __found_dec )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += 'e';
      __found_sci = true;


      if ( ++ __beg != __end )
        {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping
     && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }



      if ( __found_grouping . size ( ) )
        {

   if ( ! __found_dec && ! __found_sci )
     __found_grouping += static_cast < char > ( __sep_pos );

          if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
          __lc -> _M_grouping_size,
          __found_grouping ) )
     __err = ios_base :: failbit;
        }

      return __beg;
    }
# 351
template < typename _CharT, typename _InIter >
    template < typename _ValueT >
      _InIter
      num_get < _CharT, _InIter > ::
      _M_extract_int ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, _ValueT & __v ) const
      {
        typedef char_traits < _CharT > __traits_type;
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_in;
 char_type __c = char_type ( );


 const ios_base :: fmtflags __basefield = __io . flags ( )
                                        & ios_base :: basefield;
 const bool __oct = __basefield == ios_base :: oct;
 int __base = __oct ? 8 : ( __basefield == ios_base :: hex ? 16 : 10 );


 bool __testeof = __beg == __end;


 bool __negative = false;
 if ( ! __testeof )
   {
     __c = * __beg;
     __negative = __c == __lit [ __num_base :: _S_iminus ];
     if ( ( __negative || __c == __lit [ __num_base :: _S_iplus ] )
  && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  && ! ( __c == __lc -> _M_decimal_point ) )
       {
  if ( ++ __beg != __end )
    __c = * __beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while ( ! __testeof )
   {
     if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  || __c == __lc -> _M_decimal_point )
       break;
     else if ( __c == __lit [ __num_base :: _S_izero ]
       && ( ! __found_zero || __base == 10 ) )
       {
  __found_zero = true;
  ++ __sep_pos;
  if ( __basefield == 0 )
    __base = 8;
  if ( __base == 8 )
    __sep_pos = 0;
       }
     else if ( __found_zero
       && ( __c == __lit [ __num_base :: _S_ix ]
    || __c == __lit [ __num_base :: _S_iX ] ) )
       {
  if ( __basefield == 0 )
    __base = 16;
  if ( __base == 16 )
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if ( ++ __beg != __end )
       {
  __c = * __beg;
  if ( ! __found_zero )
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = ( __base == 16 ? __num_base :: _S_iend
         - __num_base :: _S_izero : __base );


 string __found_grouping;
 if ( __lc -> _M_use_grouping )
   __found_grouping . reserve ( 32 );
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   ( __negative && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
   ? - __gnu_cxx :: __numeric_traits < _ValueT > :: __min
   : __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type * __lit_zero = __lit + __num_base :: _S_izero;

 if ( ! __lc -> _M_allocated )

   while ( ! __testeof )
     {
       __digit = _M_find ( __lit_zero, __len, __c );
       if ( __digit == - 1 )
  break;

       if ( __result > __smax )
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++ __sep_pos;
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 else
   while ( ! __testeof )
     {


       if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  {


    if ( __sep_pos )
      {
        __found_grouping += static_cast < char > ( __sep_pos );
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if ( __c == __lc -> _M_decimal_point )
  break;
       else
  {
    const char_type * __q =
      __traits_type :: find ( __lit_zero, __len, __c );
    if ( ! __q )
      break;

    __digit = __q - __lit_zero;
    if ( __digit > 15 )
      __digit -= 6;
    if ( __result > __smax )
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++ __sep_pos;
      }
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }



 if ( __found_grouping . size ( ) )
   {

     __found_grouping += static_cast < char > ( __sep_pos );

     if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
     __lc -> _M_grouping_size,
     __found_grouping ) )
       __err = ios_base :: failbit;
   }



 if ( ( ! __sep_pos && ! __found_zero && ! __found_grouping . size ( ) )
     || __testfail )
   {
     __v = 0;
     __err = ios_base :: failbit;
   }
 else if ( __testoverflow )
   {
     if ( __negative
  && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __min;
     else
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
     __err = ios_base :: failbit;
   }
 else
   __v = __negative ? - __result : __result;

 if ( __testeof )
   __err |= ios_base :: eofbit;
 return __beg;
      }
# 572
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, bool & __v ) const
    {
      if ( ! ( __io . flags ( ) & ios_base :: boolalpha ) )
        {



   long __l = - 1;
          __beg = _M_extract_int ( __beg, __end, __io, __err, __l );
   if ( __l == 0 || __l == 1 )
     __v = bool ( __l );
   else
     {


       __v = true;
       __err = ios_base :: failbit;
       if ( __beg == __end )
  __err |= ios_base :: eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc -> _M_falsename_size == 0;
   bool __donet = __lc -> _M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while ( ! __donef || ! __donet )
     {
       if ( __beg == __end )
  {
    __testeof = true;
    break;
  }

       const char_type __c = * __beg;

       if ( ! __donef )
  __testf = __c == __lc -> _M_falsename [ __n ];

       if ( ! __testf && __donet )
  break;

       if ( ! __donet )
  __testt = __c == __lc -> _M_truename [ __n ];

       if ( ! __testt && __donef )
  break;

       if ( ! __testt && ! __testf )
  break;

       ++ __n;
       ++ __beg;

       __donef = ! __testf || __n >= __lc -> _M_falsename_size;
       __donet = ! __testt || __n >= __lc -> _M_truename_size;
     }
   if ( __testf && __n == __lc -> _M_falsename_size && __n )
     {
       __v = false;
       if ( __testt && __n == __lc -> _M_truename_size )
  __err = ios_base :: failbit;
       else
  __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else if ( __testt && __n == __lc -> _M_truename_size && __n )
     {
       __v = true;
       __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base :: failbit;
       if ( __testeof )
  __err |= ios_base :: eofbit;
     }
 }
      return __beg;
    }
# 668
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, float & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 683
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 715 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 730
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, void * & __v ) const
    {

      typedef ios_base :: fmtflags fmtflags;
      const fmtflags __fmt = __io . flags ( );
      __io . flags ( ( __fmt & ~ ios_base :: basefield ) | ios_base :: hex );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int ( __beg, __end, __io, __err, __ul );


      __io . flags ( __fmt );

      __v = reinterpret_cast < void * > ( __ul );
      return __beg;
    }
# 757
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_pad ( _CharT __fill, streamsize __w, ios_base & __io,
    _CharT * __new, const _CharT * __cs, int & __len ) const
    {


      __pad < _CharT, char_traits < _CharT > > :: _S_pad ( __io, __fill, __new,
        __cs, __w, __len );
      __len = static_cast < int > ( __w );
    }
# 772
template < typename _CharT, typename _ValueT >
    int
    __int_to_char ( _CharT * __bufend, _ValueT __v, const _CharT * __lit,
    ios_base :: fmtflags __flags, bool __dec )
    {
      _CharT * __buf = __bufend;
      if ( __builtin_expect ( __dec, true ) )
 {

   do
     {
       * -- __buf = __lit [ ( __v % 10 ) + __num_base :: _S_odigits ];
       __v /= 10;
     }
   while ( __v != 0 );
 }
      else if ( ( __flags & ios_base :: basefield ) == ios_base :: oct )
 {

   do
     {
       * -- __buf = __lit [ ( __v & 7 ) + __num_base :: _S_odigits ];
       __v >>= 3;
     }
   while ( __v != 0 );
 }
      else
 {

   const bool __uppercase = __flags & ios_base :: uppercase;
   const int __case_offset = __uppercase ? __num_base :: _S_oudigits
                                         : __num_base :: _S_odigits;
   do
     {
       * -- __buf = __lit [ ( __v & 15 ) + __case_offset ];
       __v >>= 4;
     }
   while ( __v != 0 );
 }
      return __bufend - __buf;
    }
# 816
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_int ( const char * __grouping, size_t __grouping_size, _CharT __sep,
   ios_base &, _CharT * __new, _CharT * __cs, int & __len ) const
    {
      _CharT * __p = std :: __add_grouping ( __new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len );
      __len = __p - __new;
    }
# 827
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_int ( _OutIter __s, ios_base & __io, _CharT __fill,
      _ValueT __v ) const
      {
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_out;
 const ios_base :: fmtflags __flags = __io . flags ( );


 const int __ilen = 5 * sizeof ( _ValueT );
 _CharT * __cs = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __ilen ) );



 const ios_base :: fmtflags __basefield = __flags & ios_base :: basefield;
 const bool __dec = ( __basefield != ios_base :: oct
       && __basefield != ios_base :: hex );
 const __unsigned_type __u = ( ( __v > 0 || ! __dec )
         ? __unsigned_type ( __v )
         : - __unsigned_type ( __v ) );
  int __len = __int_to_char ( __cs + __ilen, __u, __lit, __flags, __dec );
 __cs += __ilen - __len;


 if ( __lc -> _M_use_grouping )
   {


     _CharT * __cs2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * ( __len + 1 )
          * 2 ) );
     _M_group_int ( __lc -> _M_grouping, __lc -> _M_grouping_size,
    __lc -> _M_thousands_sep, __io, __cs2 + 2, __cs, __len );
     __cs = __cs2 + 2;
   }


 if ( __builtin_expect ( __dec, true ) )
   {

     if ( __v >= 0 )
       {
  if ( bool ( __flags & ios_base :: showpos )
      && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
    * -- __cs = __lit [ __num_base :: _S_oplus ], ++ __len;
       }
     else
       * -- __cs = __lit [ __num_base :: _S_ominus ], ++ __len;
   }
 else if ( bool ( __flags & ios_base :: showbase ) && __v )
   {
     if ( __basefield == ios_base :: oct )
       * -- __cs = __lit [ __num_base :: _S_odigits ], ++ __len;
     else
       {

  const bool __uppercase = __flags & ios_base :: uppercase;
  * -- __cs = __lit [ __num_base :: _S_ox + __uppercase ];

  * -- __cs = __lit [ __num_base :: _S_odigits ];
  __len += 2;
       }
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __cs3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __cs3, __cs, __len );
     __cs = __cs3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __cs, __len );
      }
# 916
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_float ( const char * __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT * __p, _CharT * __new,
     _CharT * __cs, int & __len ) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT * __p2 = std :: __add_grouping ( __new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen );


      int __newlen = __p2 - __new;
      if ( __p )
 {
   char_traits < _CharT > :: copy ( __p2, __p, __len - __declen );
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 951 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_float ( _OutIter __s, ios_base & __io, _CharT __fill, char __mod,
         _ValueT __v ) const
      {
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );


 const streamsize __prec = __io . precision ( ) < 0 ? 6 : __io . precision ( );

 const int __max_digits =
   __gnu_cxx :: __numeric_traits < _ValueT > :: __digits10;


 int __len;

 char __fbuf [ 16 ];
 __num_base :: _S_format_float ( __io, __fbuf, __mod );




 int __cs_size = __max_digits * 3;
 char * __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
 __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
          __fbuf, __prec, __v );


 if ( __len >= __cs_size )
   {
     __cs_size = __len + 1;
     __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
     __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
       __fbuf, __prec, __v );
   }

 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 _CharT * __ws = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __len ) );
 __ctype . widen ( __cs, __cs + __len, __ws );


 _CharT * __wp = 0;
 const char * __p = char_traits < char > :: find ( __cs, __len, '.' );
 if ( __p )
   {
     __wp = __ws + ( __p - __cs );
     * __wp = __lc -> _M_decimal_point;
   }




 if ( __lc -> _M_use_grouping
     && ( __wp || __len < 3 || ( __cs [ 1 ] <= '9' && __cs [ 2 ] <= '9'
          && __cs [ 1 ] >= '0' && __cs [ 2 ] >= '0' ) ) )
   {


     _CharT * __ws2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __len * 2 ) );

     streamsize __off = 0;
     if ( __cs [ 0 ] == '-' || __cs [ 0 ] == '+' )
       {
  __off = 1;
  __ws2 [ 0 ] = __ws [ 0 ];
  __len -= 1;
       }

     _M_group_float ( __lc -> _M_grouping, __lc -> _M_grouping_size,
      __lc -> _M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len );
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __ws3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __ws3, __ws, __len );
     __ws = __ws3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __ws, __len );
      }
# 1071 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, bool __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      if ( ( __flags & ios_base :: boolalpha ) == 0 )
        {
          const long __l = __v;
          __s = _M_insert_int ( __s, __io, __fill, __l );
        }
      else
        {
   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   const _CharT * __name = __v ? __lc -> _M_truename
                              : __lc -> _M_falsename;
   int __len = __v ? __lc -> _M_truename_size
                   : __lc -> _M_falsename_size;

   const streamsize __w = __io . width ( );
   if ( __w > static_cast < streamsize > ( __len ) )
     {
       const streamsize __plen = __w - __len;
       _CharT * __ps
  = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
       * __plen ) );

       char_traits < _CharT > :: assign ( __ps, __plen, __fill );
       __io . width ( 0 );

       if ( ( __flags & ios_base :: adjustfield ) == ios_base :: left )
  {
    __s = std :: __write ( __s, __name, __len );
    __s = std :: __write ( __s, __ps, __plen );
  }
       else
  {
    __s = std :: __write ( __s, __ps, __plen );
    __s = std :: __write ( __s, __name, __len );
  }
       return __s;
     }
   __io . width ( 0 );
   __s = std :: __write ( __s, __name, __len );
 }
      return __s;
    }
# 1123
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, double __v ) const
    { return _M_insert_float ( __s, __io, __fill, char ( ), __v ); }
# 1137 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
    long double __v ) const
    { return _M_insert_float ( __s, __io, __fill, 'L', __v ); }
# 1144
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           const void * __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      const ios_base :: fmtflags __fmt = ~ ( ios_base :: basefield
      | ios_base :: uppercase );
      __io . flags ( ( __flags & __fmt ) | ( ios_base :: hex | ios_base :: showbase ) );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( const void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      __s = _M_insert_int ( __s, __io, __fill,
     reinterpret_cast < _UIntPtrType > ( __v ) );
      __io . flags ( __flags );
      return __s;
    }
# 1174 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _Traits >
    void
    __pad < _CharT, _Traits > :: _S_pad ( ios_base & __io, _CharT __fill,
       _CharT * __news, const _CharT * __olds,
       streamsize __newlen, streamsize __oldlen )
    {
      const size_t __plen = static_cast < size_t > ( __newlen - __oldlen );
      const ios_base :: fmtflags __adjust = __io . flags ( ) & ios_base :: adjustfield;


      if ( __adjust == ios_base :: left )
 {
   _Traits :: copy ( __news, __olds, __oldlen );
   _Traits :: assign ( __news + __oldlen, __plen, __fill );
   return;
 }

      size_t __mod = 0;
      if ( __adjust == ios_base :: internal )
 {



          const locale & __loc = __io . _M_getloc ( );
   const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

   if ( __ctype . widen ( '-' ) == __olds [ 0 ]
       || __ctype . widen ( '+' ) == __olds [ 0 ] )
     {
       __news [ 0 ] = __olds [ 0 ];
       __mod = 1;
       ++ __news;
     }
   else if ( __ctype . widen ( '0' ) == __olds [ 0 ]
     && __oldlen > 1
     && ( __ctype . widen ( 'x' ) == __olds [ 1 ]
         || __ctype . widen ( 'X' ) == __olds [ 1 ] ) )
     {
       __news [ 0 ] = __olds [ 0 ];
       __news [ 1 ] = __olds [ 1 ];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits :: assign ( __news, __plen, __fill );
      _Traits :: copy ( __news + __plen, __olds + __mod, __oldlen - __mod );
    }
# 1223
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last )
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while ( __last - __first > __gbeg [ __idx ]
      && static_cast < signed char > ( __gbeg [ __idx ] ) > 0
      && __gbeg [ __idx ] != __gnu_cxx :: __numeric_traits < char > :: __max )
 {
   __last -= __gbeg [ __idx ];
   __idx < __gsize - 1 ? ++ __idx : ++ __ctr;
 }

      while ( __first != __last )
 * __s ++ = * __first ++;

      while ( __ctr -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      while ( __idx -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      return __s;
    }
# 1264
extern template class numpunct< char> ;
# 1265
extern template class numpunct_byname< char> ;
# 1266
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1267
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1270
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1274
extern template const numpunct< char>  &use_facet< numpunct< char> > (const locale &);
# 1278
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > >  &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1282
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > >  &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1286
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1290
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 1294
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1298
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1303
extern template class numpunct< wchar_t> ;
# 1304
extern template class numpunct_byname< wchar_t> ;
# 1305
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1306
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1309
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1313
extern template const numpunct< wchar_t>  &use_facet< numpunct< wchar_t> > (const locale &);
# 1317
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1321
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1325
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1329
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 1333
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1337
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1343
}
# 42 "/usr/include/c++/4.4/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template < typename _Facet >
    inline const _Facet &
    __check_facet ( const _Facet * __f )
    {
      if ( ! __f )
 __throw_bad_cast ( );
      return * __f;
    }
# 61 "/usr/include/c++/4.4/bits/basic_ios.h" 3
template < typename _CharT, typename _Traits >
    class basic_ios : public ios_base
    {
    public :






      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;






      typedef ctype < _CharT > __ctype_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
           __num_put_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
           __num_get_type;



    protected :
      basic_ostream < _CharT, _Traits > * _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf < _CharT, _Traits > * _M_streambuf;


      const __ctype_type * _M_ctype;

      const __num_put_type * _M_num_put;

      const __num_get_type * _M_num_get;

    public :







      operator void * ( ) const
      { return this -> fail ( ) ? 0 : const_cast < basic_ios * > ( this ); }

      bool
      operator ! ( ) const
      { return this -> fail ( ); }

      iostate
      rdstate ( ) const
      { return _M_streambuf_state; }

      void
      clear ( iostate __state = goodbit );







      void
      setstate ( iostate __state )
      { this -> clear ( this -> rdstate ( ) | __state ); }




      void
      _M_setstate ( iostate __state )
      {


 _M_streambuf_state |= __state;
 if ( this -> exceptions ( ) & __state )
   throw;
      }







      bool
      good ( ) const
      { return this -> rdstate ( ) == 0; }







      bool
      eof ( ) const
      { return ( this -> rdstate ( ) & eofbit ) != 0; }

      bool
      fail ( ) const
      { return ( this -> rdstate ( ) & ( badbit | failbit ) ) != 0; }







      bool
      bad ( ) const
      { return ( this -> rdstate ( ) & badbit ) != 0; }

      iostate
      exceptions ( ) const
      { return _M_exception; }

      void
      exceptions ( iostate __except )
      {
        _M_exception = __except;
        this -> clear ( _M_streambuf_state );
      }







      explicit
      basic_ios ( basic_streambuf < _CharT, _Traits > * __sb )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( ), _M_fill_init ( false ), _M_streambuf ( 0 ),
 _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { this -> init ( __sb ); }







      virtual
      ~ basic_ios ( ) { }

      basic_ostream < _CharT, _Traits > *
      tie ( ) const
      { return _M_tie; }

      basic_ostream < _CharT, _Traits > *
      tie ( basic_ostream < _CharT, _Traits > * __tiestr )
      {
        basic_ostream < _CharT, _Traits > * __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf < _CharT, _Traits > *
      rdbuf ( ) const
      { return _M_streambuf; }

      basic_streambuf < _CharT, _Traits > *
      rdbuf ( basic_streambuf < _CharT, _Traits > * __sb );

      basic_ios &
      copyfmt ( const basic_ios & __rhs );







      char_type
      fill ( ) const
      {
 if ( ! _M_fill_init )
   {
     _M_fill = this -> widen ( ' ' );
     _M_fill_init = true;
   }
 return _M_fill;
      }

      char_type
      fill ( char_type __ch )
      {
 char_type __old = this -> fill ( );
 _M_fill = __ch;
 return __old;
      }

      locale
      imbue ( const locale & __loc );

      char
      narrow ( char_type __c, char __dfault ) const
      { return __check_facet ( _M_ctype ) . narrow ( __c, __dfault ); }

      char_type
      widen ( char __c ) const
      { return __check_facet ( _M_ctype ) . widen ( __c ); }

    protected :







      basic_ios ( )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( char_type ( ) ), _M_fill_init ( false ),
 _M_streambuf ( 0 ), _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { }







      void
      init ( basic_streambuf < _CharT, _Traits > * __sb );

      void
      _M_cache_locale ( const locale & __loc );
    };
# 468 "/usr/include/c++/4.4/bits/basic_ios.h" 3
}
# 36 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 38
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: clear ( iostate __state )
    {
      if ( this -> rdbuf ( ) )
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if ( this -> exceptions ( ) & this -> rdstate ( ) )
 __throw_ios_failure ( ( "basic_ios::clear" ) );
    }
# 50
template < typename _CharT, typename _Traits >
    basic_streambuf < _CharT, _Traits > *
    basic_ios < _CharT, _Traits > :: rdbuf ( basic_streambuf < _CharT, _Traits > * __sb )
    {
      basic_streambuf < _CharT, _Traits > * __old = _M_streambuf;
      _M_streambuf = __sb;
      this -> clear ( );
      return __old;
    }
# 60
template < typename _CharT, typename _Traits >
    basic_ios < _CharT, _Traits > &
    basic_ios < _CharT, _Traits > :: copyfmt ( const basic_ios & __rhs )
    {


      if ( this != & __rhs )
 {




   _Words * __words = ( __rhs . _M_word_size <= _S_local_word_size ) ?
                      _M_local_word : new _Words [ __rhs . _M_word_size ];


   _Callback_list * __cb = __rhs . _M_callbacks;
   if ( __cb )
     __cb -> _M_add_reference ( );
   _M_call_callbacks ( erase_event );
   if ( _M_word != _M_local_word )
     {
       delete [ ] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks ( );


   _M_callbacks = __cb;
   for ( int __i = 0; __i < __rhs . _M_word_size; ++ __i )
     __words [ __i ] = __rhs . _M_word [ __i ];
   _M_word = __words;
   _M_word_size = __rhs . _M_word_size;

   this -> flags ( __rhs . flags ( ) );
   this -> width ( __rhs . width ( ) );
   this -> precision ( __rhs . precision ( ) );
   this -> tie ( __rhs . tie ( ) );
   this -> fill ( __rhs . fill ( ) );
   _M_ios_locale = __rhs . getloc ( );
   _M_cache_locale ( _M_ios_locale );

   _M_call_callbacks ( copyfmt_event );


   this -> exceptions ( __rhs . exceptions ( ) );
 }
      return * this;
    }
# 111
template < typename _CharT, typename _Traits >
    locale
    basic_ios < _CharT, _Traits > :: imbue ( const locale & __loc )
    {
      locale __old ( this -> getloc ( ) );
      ios_base :: imbue ( __loc );
      _M_cache_locale ( __loc );
      if ( this -> rdbuf ( ) != 0 )
 this -> rdbuf ( ) -> pubimbue ( __loc );
      return __old;
    }
# 123
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: init ( basic_streambuf < _CharT, _Traits > * __sb )
    {

      ios_base :: _M_init ( );


      _M_cache_locale ( _M_ios_locale );

      _M_fill = _CharT ( );
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }
# 154 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: _M_cache_locale ( const locale & __loc )
    {
      if ( __builtin_expect ( has_facet < __ctype_type > ( __loc ), true ) )
 _M_ctype = & use_facet < __ctype_type > ( __loc );
      else
 _M_ctype = 0;

      if ( __builtin_expect ( has_facet < __num_put_type > ( __loc ), true ) )
 _M_num_put = & use_facet < __num_put_type > ( __loc );
      else
 _M_num_put = 0;

      if ( __builtin_expect ( has_facet < __num_get_type > ( __loc ), true ) )
 _M_num_get = & use_facet < __num_get_type > ( __loc );
      else
 _M_num_get = 0;
    }
# 178
extern template class basic_ios< char, char_traits< char> > ;
# 181
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 185
}
# 43 "/usr/include/c++/4.4/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
             __num_put_type;
      typedef ctype < _CharT > __ctype_type;

      explicit
      basic_ostream ( __streambuf_type * __sb )
      { this -> init ( __sb ); }






      virtual
      ~ basic_ostream ( ) { }


      class sentry;
      friend class sentry;

      __ostream_type &
      operator << ( __ostream_type & ( * __pf ) ( __ostream_type & ) )
      {



 return __pf ( * this );
      }

      __ostream_type &
      operator << ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( ios_base & ( * __pf ) ( ios_base & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( bool __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( short __n );

      __ostream_type &
      operator << ( unsigned short __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }

      __ostream_type &
      operator << ( int __n );

      __ostream_type &
      operator << ( unsigned int __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }


      __ostream_type &
      operator << ( long long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long long __n )
      { return _M_insert ( __n ); }


      __ostream_type &
      operator << ( double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( float __f )
      {


 return _M_insert ( static_cast < double > ( __f ) );
      }

      __ostream_type &
      operator << ( long double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( const void * __p )
      { return _M_insert ( __p ); }

      __ostream_type &
      operator << ( __streambuf_type * __sb );

      __ostream_type &
      put ( char_type __c );


      void
      _M_write ( const char_type * __s, streamsize __n )
      {
 const streamsize __put = this -> rdbuf ( ) -> sputn ( __s, __n );
 if ( __put != __n )
   this -> setstate ( ios_base :: badbit );
      }

      __ostream_type &
      write ( const char_type * __s, streamsize __n );

      __ostream_type &
      flush ( );

      pos_type
      tellp ( );

      __ostream_type &
      seekp ( pos_type );

       __ostream_type &
      seekp ( off_type, ios_base :: seekdir );

    protected :
      basic_ostream ( )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __ostream_type &
        _M_insert ( _ValueT __v );
    };
# 376 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream < _CharT, _Traits > :: sentry
    {

      bool _M_ok;
      basic_ostream < _CharT, _Traits > & _M_os;

    public :

      explicit
      sentry ( basic_ostream < _CharT, _Traits > & __os );

      ~ sentry ( )
      {

 if ( bool ( _M_os . flags ( ) & ios_base :: unitbuf ) && ! uncaught_exception ( ) )
   {

     if ( _M_os . rdbuf ( ) && _M_os . rdbuf ( ) -> pubsync ( ) == - 1 )
       _M_os . setstate ( ios_base :: badbit );
   }
      }

      operator bool ( ) const
      { return _M_ok; }
    };
# 444 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, _CharT __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 449
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, char __c )
    { return ( __out << __out . widen ( __c ) ); }
# 455
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, char __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 461
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, signed char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 466
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, unsigned char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 486 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const _CharT * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 498
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s );
# 503
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 516
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const signed char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 521
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const unsigned char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 536 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    endl ( basic_ostream < _CharT, _Traits > & __os )
    { return flush ( __os . put ( __os . widen ( '\n' ) ) ); }
# 547
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    ends ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . put ( _CharT ( ) ); }
# 557
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    flush ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . flush ( ); }
# 562
}
# 43 "/usr/include/c++/4.4/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > :: sentry ::
    sentry ( basic_ostream < _CharT, _Traits > & __os )
    : _M_ok ( false ), _M_os ( __os )
    {

      if ( __os . tie ( ) && __os . good ( ) )
 __os . tie ( ) -> flush ( );

      if ( __os . good ( ) )
 _M_ok = true;
      else
 __os . setstate ( ios_base :: failbit );
    }
# 60
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_ostream < _CharT, _Traits > &
      basic_ostream < _CharT, _Traits > ::
      _M_insert ( _ValueT __v )
      {
 sentry __cerb ( * this );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_put_type & __np = __check_facet ( this -> _M_num_put );
  if ( __np . put ( * this, * this, this -> fill ( ), __v ) . failed ( ) )
    __err |= ios_base :: badbit;
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 89
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( short __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned short > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 103
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( int __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned int > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 117
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( __streambuf_type * __sbin )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this );
      if ( __cerb && __sbin )
 {
   try
     {
       if ( ! __copy_streambufs ( __sbin, this -> rdbuf ( ) ) )
  __err |= ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbin )
 __err |= ios_base :: badbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 146
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    put ( char_type __c )
    {






      sentry __cerb ( * this );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __put = this -> rdbuf ( ) -> sputc ( __c );
       if ( traits_type :: eq_int_type ( __put, traits_type :: eof ( ) ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 180
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    write ( const _CharT * __s, streamsize __n )
    {







      sentry __cerb ( * this );
      if ( __cerb )
 {
   try
     { _M_write ( __s, __n ); }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      return * this;
    }
# 208
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    flush ( )
    {



      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( this -> rdbuf ( ) && this -> rdbuf ( ) -> pubsync ( ) == - 1 )
     __err |= ios_base :: badbit;
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 234
template < typename _CharT, typename _Traits >
    typename basic_ostream < _CharT, _Traits > :: pos_type
    basic_ostream < _CharT, _Traits > ::
    tellp ( )
    {
      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 255
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( pos_type __pos )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 287
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( off_type __off, ios_base :: seekdir __dir )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 319
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 {


   const size_t __clen = char_traits < char > :: length ( __s );
   try
     {
       struct __ptr_guard
       {
  _CharT * __p;
  __ptr_guard ( _CharT * __ip ) : __p ( __ip ) { }
  ~ __ptr_guard ( ) { delete [ ] __p; }
  _CharT * __get ( ) { return __p; }
       } __pg ( new _CharT [ __clen ] );

       _CharT * __ws = __pg . __get ( );
       for ( size_t __i = 0; __i < __clen; ++ __i )
  __ws [ __i ] = __out . widen ( __s [ __i ] );
       __ostream_insert ( __out, __ws, __clen );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( ios_base :: badbit ); }
 }
      return __out;
    }
# 360
extern template class basic_ostream< char, char_traits< char> > ;
# 361
extern template basic_ostream< char, char_traits< char> >  &endl(basic_ostream< char, char_traits< char> >  & );
# 362
extern template basic_ostream< char, char_traits< char> >  &ends(basic_ostream< char, char_traits< char> >  & );
# 363
extern template basic_ostream< char, char_traits< char> >  &flush(basic_ostream< char, char_traits< char> >  & );
# 364
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , char );
# 365
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , unsigned char );
# 366
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , signed char );
# 367
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const char * );
# 368
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const unsigned char * );
# 369
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const signed char * );
# 371
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long );
# 372
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long );
# 373
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool );
# 375
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long );
# 376
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long );
# 378
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double );
# 379
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double );
# 380
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void * );
# 383
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 384
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &endl(basic_ostream< wchar_t, char_traits< wchar_t> >  & );
# 385
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &ends(basic_ostream< wchar_t, char_traits< wchar_t> >  & );
# 386
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &flush(basic_ostream< wchar_t, char_traits< wchar_t> >  & );
# 387
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , wchar_t );
# 388
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , char );
# 389
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , const wchar_t * );
# 390
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , const char * );
# 392
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long );
# 393
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long );
# 394
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool );
# 396
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long );
# 397
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long );
# 399
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double );
# 400
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double );
# 401
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void * );
# 405
}
# 43 "/usr/include/c++/4.4/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
        __num_get_type;
      typedef ctype < _CharT > __ctype_type;

    protected :





      streamsize _M_gcount;

    public :

      explicit
      basic_istream ( __streambuf_type * __sb )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( __sb ); }






      virtual
      ~ basic_istream ( )
      { _M_gcount = streamsize ( 0 ); }


      class sentry;
      friend class sentry;

      __istream_type &
      operator >> ( __istream_type & ( * __pf ) ( __istream_type & ) )
      { return __pf ( * this ); }

      __istream_type &
      operator >> ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( ios_base & ( * __pf ) ( ios_base & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( bool & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( short & __n );

      __istream_type &
      operator >> ( unsigned short & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( int & __n );

      __istream_type &
      operator >> ( unsigned int & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( long long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( float & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( long double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( void * & __p )
      { return _M_extract ( __p ); }

      __istream_type &
      operator >> ( __streambuf_type * __sb );

      streamsize
      gcount ( ) const
      { return _M_gcount; }

      int_type
      get ( );

      __istream_type &
      get ( char_type & __c );

      __istream_type &
      get ( char_type * __s, streamsize __n, char_type __delim );

      __istream_type &
      get ( char_type * __s, streamsize __n )
      { return this -> get ( __s, __n, this -> widen ( '\n' ) ); }

      __istream_type &
      get ( __streambuf_type & __sb, char_type __delim );

      __istream_type &
      get ( __streambuf_type & __sb )
      { return this -> get ( __sb, this -> widen ( '\n' ) ); }

      __istream_type &
      getline ( char_type * __s, streamsize __n, char_type __delim );

      __istream_type &
      getline ( char_type * __s, streamsize __n )
      { return this -> getline ( __s, __n, this -> widen ( '\n' ) ); }

      __istream_type &
      ignore ( );

      __istream_type &
      ignore ( streamsize __n );

      __istream_type &
      ignore ( streamsize __n, int_type __delim );

      int_type
      peek ( );

      __istream_type &
      read ( char_type * __s, streamsize __n );

      streamsize
      readsome ( char_type * __s, streamsize __n );

      __istream_type &
      putback ( char_type __c );

      __istream_type &
      unget ( );

      int
      sync ( );

      pos_type
      tellg ( );

      __istream_type &
      seekg ( pos_type );

      __istream_type &
      seekg ( off_type, ios_base :: seekdir );


    protected :
      basic_istream ( )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __istream_type &
        _M_extract ( _ValueT & __v );
    };
# 594 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::getline(char_type * , streamsize , char_type ); 
# 599
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize ); 
# 604
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize , int_type ); 
# 610
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type * , streamsize , char_type ); 
# 615
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize ); 
# 620
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize , int_type ); 
# 631 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream < _CharT, _Traits > :: sentry
    {
    public :

      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef typename _Traits :: int_type __int_type;

      explicit
      sentry ( basic_istream < _CharT, _Traits > & __is, bool __noskipws = false );

      operator bool ( ) const
      { return _M_ok; }

    private :
      bool _M_ok;
    };
# 693 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c );
# 697
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 702
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 734 "/usr/include/c++/4.4/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & , _CharT * ); 
# 741
template<> basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , char * ); 
# 743
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 748
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 762 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_iostream
    : public basic_istream < _CharT, _Traits >,
      public basic_ostream < _CharT, _Traits >
    {
    public :



      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;







      explicit
      basic_iostream ( basic_streambuf < _CharT, _Traits > * __sb )
      : __istream_type ( __sb ), __ostream_type ( __sb ) { }




      virtual
      ~ basic_iostream ( ) { }

    protected :
      basic_iostream ( )
      : __istream_type ( ), __ostream_type ( ) { }
    };
# 823 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __is );
# 827
}
# 43 "/usr/include/c++/4.4/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > :: sentry ::
    sentry ( basic_istream < _CharT, _Traits > & __in, bool __noskip ) : _M_ok ( false )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      if ( __in . good ( ) )
 {
   if ( __in . tie ( ) )
     __in . tie ( ) -> flush ( );
   if ( ! __noskip && bool ( __in . flags ( ) & ios_base :: skipws ) )
     {
       const __int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       const __ctype_type & __ct = __check_facet ( __in . _M_ctype );
       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && __ct . is ( ctype_base :: space,
    traits_type :: to_char_type ( __c ) ) )
  __c = __sb -> snextc ( );




       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
 }

      if ( __in . good ( ) && __err == ios_base :: goodbit )
 _M_ok = true;
      else
 {
   __err |= ios_base :: failbit;
   __in . setstate ( __err );
 }
    }
# 83
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_istream < _CharT, _Traits > &
      basic_istream < _CharT, _Traits > ::
      _M_extract ( _ValueT & __v )
      {
 sentry __cerb ( * this, false );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_get_type & __ng = __check_facet ( this -> _M_num_get );
  __ng . get ( * this, 0, * this, __err, __v );
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 111
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( short & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < short > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < short > :: __max )
     __n = short ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 131
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( int & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < int > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < int > :: __max )
     __n = int ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 151
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( __streambuf_type * __sbout )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, false );
      if ( __cerb && __sbout )
 {
   try
     {
       bool __ineof;
       if ( ! __copy_streambufs_eof ( this -> rdbuf ( ), __sbout, __ineof ) )
  __err |= ios_base :: failbit;
       if ( __ineof )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: failbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbout )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 183
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    get ( void )
    {
      const int_type __eof = traits_type :: eof ( );
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       __c = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __c, __eof ) )
  _M_gcount = 1;
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return __c;
    }
# 219
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type & __c )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __cb = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __cb, traits_type :: eof ( ) ) )
  {
    _M_gcount = 1;
    __c = traits_type :: to_char_type ( __cb );
  }
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 256
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( _M_gcount + 1 < __n
       && ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim ) )
  {
    * __s ++ = traits_type :: to_char_type ( __c );
    ++ _M_gcount;
    __c = __sb -> snextc ( );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 303
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( __streambuf_type & __sb, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __this_sb = this -> rdbuf ( );
       int_type __c = __this_sb -> sgetc ( );
       char_type __c2 = traits_type :: to_char_type ( __c );

       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim )
       && ! traits_type :: eq_int_type ( __sb . sputc ( __c2 ), __eof ) )
  {
    ++ _M_gcount;
    __c = __this_sb -> snextc ( );
    __c2 = traits_type :: to_char_type ( __c );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 347
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    getline ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
        {
          try
            {
              const int_type __idelim = traits_type :: to_int_type ( __delim );
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

              while ( _M_gcount + 1 < __n
                     && ! traits_type :: eq_int_type ( __c, __eof )
                     && ! traits_type :: eq_int_type ( __c, __idelim ) )
                {
                  * __s ++ = traits_type :: to_char_type ( __c );
                  __c = __sb -> snextc ( );
                  ++ _M_gcount;
                }
              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
              else
                {
                  if ( traits_type :: eq_int_type ( __c, __idelim ) )
                    {
                      __sb -> sbumpc ( );
                      ++ _M_gcount;
                    }
                  else
                    __err |= ios_base :: failbit;
                }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
        }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
        __err |= ios_base :: failbit;
      if ( __err )
        this -> setstate ( __err );
      return * this;
    }
# 407
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( void )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );

       if ( traits_type :: eq_int_type ( __sb -> sbumpc ( ), __eof ) )
  __err |= ios_base :: eofbit;
       else
  _M_gcount = 1;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 440
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 502 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n, int_type __delim )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );


       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof )
    && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof )
        && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
       else if ( traits_type :: eq_int_type ( __c, __delim ) )
  {
    if ( _M_gcount
        < __gnu_cxx :: __numeric_traits < streamsize > :: __max )
      ++ _M_gcount;
    __sb -> sbumpc ( );
  }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 567
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    peek ( void )
    {
      int_type __c = traits_type :: eof ( );
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __c = this -> rdbuf ( ) -> sgetc ( );
       if ( traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __c;
    }
# 597
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    read ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, __n );
       if ( _M_gcount != __n )
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 626
template < typename _CharT, typename _Traits >
    streamsize
    basic_istream < _CharT, _Traits > ::
    readsome ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {

       const streamsize __num = this -> rdbuf ( ) -> in_avail ( );
       if ( __num > 0 )
  _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, std :: min ( __num, __n ) );
       else if ( __num == - 1 )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return _M_gcount;
    }
# 658
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    putback ( char_type __c )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sputbackc ( __c ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 691
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    unget ( void )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sungetc ( ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 724
template < typename _CharT, typename _Traits >
    int
    basic_istream < _CharT, _Traits > ::
    sync ( void )
    {


      int __ret = - 1;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( __sb )
  {
    if ( __sb -> pubsync ( ) == - 1 )
      __err |= ios_base :: badbit;
    else
      __ret = 0;
  }
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __ret;
    }
# 760
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: pos_type
    basic_istream < _CharT, _Traits > ::
    tellg ( void )
    {


      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur,
           ios_base :: in );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 784
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( pos_type __pos )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 817
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( off_type __off, ios_base :: seekdir __dir )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 851
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;

      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const __int_type __cb = __in . rdbuf ( ) -> sbumpc ( );
       if ( ! _Traits :: eq_int_type ( __cb, _Traits :: eof ( ) ) )
  __c = _Traits :: to_char_type ( __cb );
       else
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     __in . setstate ( __err );
 }
      return __in;
    }
# 883
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT * __s )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename _Traits :: int_type int_type;
      typedef _CharT char_type;
      typedef ctype < _CharT > __ctype_type;

      streamsize __extracted = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       streamsize __num = __in . width ( );
       if ( __num <= 0 )
  __num = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );

       const int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( __extracted < __num - 1
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    * __s ++ = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }
       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;



       * __s = char_type ( );
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 944
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __in )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename __istream_type :: int_type __int_type;
      typedef ctype < _CharT > __ctype_type;

      const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
      const __int_type __eof = _Traits :: eof ( );
      __streambuf_type * __sb = __in . rdbuf ( );
      __int_type __c = __sb -> sgetc ( );

      while ( ! _Traits :: eq_int_type ( __c, __eof )
      && __ct . is ( ctype_base :: space, _Traits :: to_char_type ( __c ) ) )
 __c = __sb -> snextc ( );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __in . setstate ( ios_base :: eofbit );
      return __in;
    }
# 971
extern template class basic_istream< char, char_traits< char> > ;
# 972
extern template basic_istream< char, char_traits< char> >  &ws(basic_istream< char, char_traits< char> >  & );
# 973
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , char & );
# 974
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  &, char *);
# 975
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , unsigned char & );
# 976
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , signed char & );
# 977
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , unsigned char * );
# 978
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , signed char * );
# 980
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short & );
# 981
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned & );
# 982
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long & );
# 983
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long & );
# 984
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool & );
# 986
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long & );
# 987
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long & );
# 989
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float & );
# 990
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double & );
# 991
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double & );
# 992
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *& );
# 994
extern template class basic_iostream< char, char_traits< char> > ;
# 997
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 998
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &ws(basic_istream< wchar_t, char_traits< wchar_t> >  & );
# 999
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  & , wchar_t & );
# 1000
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  &, wchar_t *);
# 1002
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short & );
# 1003
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned & );
# 1004
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long & );
# 1005
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long & );
# 1006
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool & );
# 1008
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long & );
# 1009
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long & );
# 1011
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float & );
# 1012
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double & );
# 1013
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double & );
# 1014
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *& );
# 1016
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1020
}
# 43 "/usr/include/c++/4.4/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/include/c++/4.4/iostream" 3
extern istream cin; 
# 59
extern ostream cout; 
# 60
extern ostream cerr; 
# 61
extern ostream clog; 
# 64
extern wistream wcin; 
# 65
extern wostream wcout; 
# 66
extern wostream wcerr; 
# 67
extern wostream wclog; 
# 72
static ios_base::Init __ioinit; 
# 74
}
# 42 "/usr/include/c++/4.4/bits/codecvt.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
class codecvt_base { 
# 48
public: enum result { 
# 50
ok, 
# 51
partial, 
# 52
error, 
# 53
noconv
# 54
}; 
# 55
}; 
# 66 "/usr/include/c++/4.4/bits/codecvt.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class __codecvt_abstract_base
    : public locale :: facet, public codecvt_base
    {
    public :

      typedef codecvt_base :: result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

      result
      out ( state_type & __state, const intern_type * __from,
   const intern_type * __from_end, const intern_type * & __from_next,
   extern_type * __to, extern_type * __to_end,
   extern_type * & __to_next ) const
      {
 return this -> do_out ( __state, __from, __from_end, __from_next,
       __to, __to_end, __to_next );
      }

      result
      unshift ( state_type & __state, extern_type * __to, extern_type * __to_end,
       extern_type * & __to_next ) const
      { return this -> do_unshift ( __state, __to, __to_end, __to_next ); }

      result
      in ( state_type & __state, const extern_type * __from,
  const extern_type * __from_end, const extern_type * & __from_next,
  intern_type * __to, intern_type * __to_end,
  intern_type * & __to_next ) const
      {
 return this -> do_in ( __state, __from, __from_end, __from_next,
      __to, __to_end, __to_next );
      }

      int
      encoding ( ) const throw ( )
      { return this -> do_encoding ( ); }

      bool
      always_noconv ( ) const throw ( )
      { return this -> do_always_noconv ( ); }

      int
      length ( state_type & __state, const extern_type * __from,
      const extern_type * __end, size_t __max ) const
      { return this -> do_length ( __state, __from, __end, __max ); }

      int
      max_length ( ) const throw ( )
      { return this -> do_max_length ( ); }

    protected :
      explicit
      __codecvt_abstract_base ( size_t __refs = 0 ) : locale :: facet ( __refs ) { }

      virtual
      ~ __codecvt_abstract_base ( ) { }

      virtual result
      do_out ( state_type & __state, const intern_type * __from,
      const intern_type * __from_end, const intern_type * & __from_next,
      extern_type * __to, extern_type * __to_end,
      extern_type * & __to_next ) const = 0;

      virtual result
      do_unshift ( state_type & __state, extern_type * __to,
   extern_type * __to_end, extern_type * & __to_next ) const = 0;

      virtual result
      do_in ( state_type & __state, const extern_type * __from,
     const extern_type * __from_end, const extern_type * & __from_next,
     intern_type * __to, intern_type * __to_end,
     intern_type * & __to_next ) const = 0;

      virtual int
      do_encoding ( ) const throw ( ) = 0;

      virtual bool
      do_always_noconv ( ) const throw ( ) = 0;

      virtual int
      do_length ( state_type &, const extern_type * __from,
  const extern_type * __end, size_t __max ) const = 0;

      virtual int
      do_max_length ( ) const throw ( ) = 0;
    };
# 267 "/usr/include/c++/4.4/bits/codecvt.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt
    : public __codecvt_abstract_base < _InternT, _ExternT, _StateT >
    {
    public :

      typedef codecvt_base :: result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected :
      __c_locale _M_c_locale_codecvt;

    public :
      static locale :: id id;

      explicit
      codecvt ( size_t __refs = 0 )
      : __codecvt_abstract_base < _InternT, _ExternT, _StateT > ( __refs ) { }

      explicit
      codecvt ( __c_locale __cloc, size_t __refs = 0 );

    protected :
      virtual
      ~ codecvt ( ) { }

      virtual result
      do_out ( state_type & __state, const intern_type * __from,
      const intern_type * __from_end, const intern_type * & __from_next,
      extern_type * __to, extern_type * __to_end,
      extern_type * & __to_next ) const;

      virtual result
      do_unshift ( state_type & __state, extern_type * __to,
   extern_type * __to_end, extern_type * & __to_next ) const;

      virtual result
      do_in ( state_type & __state, const extern_type * __from,
     const extern_type * __from_end, const extern_type * & __from_next,
     intern_type * __to, intern_type * __to_end,
     intern_type * & __to_next ) const;

      virtual int
      do_encoding ( ) const throw ( );

      virtual bool
      do_always_noconv ( ) const throw ( );

      virtual int
      do_length ( state_type &, const extern_type * __from,
  const extern_type * __end, size_t __max ) const;

      virtual int
      do_max_length ( ) const throw ( );
    };
# 325
template< class _InternT, class _ExternT, class _StateT> locale::id 
# 326
codecvt< _InternT, _ExternT, _StateT> ::id; 
# 330
template<> class codecvt< char, char, __mbstate_t>  : public __codecvt_abstract_base< char, char, __mbstate_t>  { 
# 335
public: typedef char intern_type; 
# 336
typedef char extern_type; 
# 337
typedef mbstate_t state_type; 
# 340
protected: __c_locale _M_c_locale_codecvt; 
# 343
public: static locale::id id; 
# 346
explicit codecvt(size_t  = (0)); 
# 349
explicit codecvt(__c_locale , size_t  = (0)); 
# 353
protected: virtual ~codecvt(); 
# 356
virtual result do_out(state_type & , const intern_type * , const intern_type * , const intern_type *& , extern_type * , extern_type * , extern_type *& ) const; 
# 362
virtual result do_unshift(state_type & , extern_type * , extern_type * , extern_type *& ) const; 
# 366
virtual result do_in(state_type & , const extern_type * , const extern_type * , const extern_type *& , intern_type * , intern_type * , intern_type *& ) const; 
# 372
virtual int do_encoding() const throw(); 
# 375
virtual bool do_always_noconv() const throw(); 
# 378
virtual int do_length(state_type &, const extern_type * , const extern_type * , size_t ) const; 
# 382
virtual int do_max_length() const throw(); 
# 383
}; 
# 388
template<> class codecvt< wchar_t, char, __mbstate_t>  : public __codecvt_abstract_base< wchar_t, char, __mbstate_t>  { 
# 393
public: typedef wchar_t intern_type; 
# 394
typedef char extern_type; 
# 395
typedef mbstate_t state_type; 
# 398
protected: __c_locale _M_c_locale_codecvt; 
# 401
public: static locale::id id; 
# 404
explicit codecvt(size_t  = (0)); 
# 407
explicit codecvt(__c_locale , size_t  = (0)); 
# 411
protected: virtual ~codecvt(); 
# 414
virtual result do_out(state_type & , const intern_type * , const intern_type * , const intern_type *& , extern_type * , extern_type * , extern_type *& ) const; 
# 420
virtual result do_unshift(state_type & , extern_type * , extern_type * , extern_type *& ) const; 
# 425
virtual result do_in(state_type & , const extern_type * , const extern_type * , const extern_type *& , intern_type * , intern_type * , intern_type *& ) const; 
# 432
virtual int do_encoding() const throw(); 
# 435
virtual bool do_always_noconv() const throw(); 
# 438
virtual int do_length(state_type &, const extern_type * , const extern_type * , size_t ) const; 
# 442
virtual int do_max_length() const throw(); 
# 443
}; 
# 447
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt_byname : public codecvt < _InternT, _ExternT, _StateT >
    {
    public :
      explicit
      codecvt_byname ( const char * __s, size_t __refs = 0 )
      : codecvt < _InternT, _ExternT, _StateT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_codecvt );
     this -> _S_create_c_locale ( this -> _M_c_locale_codecvt, __s );
   }
      }

    protected :
      virtual
      ~ codecvt_byname ( ) { }
    };
# 472
extern template class codecvt_byname< char, char, __mbstate_t> ;
# 474
extern template const codecvt< char, char, __mbstate_t>  &use_facet< codecvt< char, char, __mbstate_t> > (const locale &);
# 478
extern template bool has_facet< codecvt< char, char, __mbstate_t> > (const locale &) throw();
# 483
extern template class codecvt_byname< wchar_t, char, __mbstate_t> ;
# 485
extern template const codecvt< wchar_t, char, __mbstate_t>  &use_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &);
# 489
extern template bool has_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &) throw();
# 495
}
# 93 "/usr/include/c++/4.4/cstdio" 3
namespace std __attribute((__visibility__("default"))) { 
# 95
using ::FILE;
# 96
using ::fpos_t;
# 98
using ::clearerr;
# 99
using ::fclose;
# 100
using ::feof;
# 101
using ::ferror;
# 102
using ::fflush;
# 103
using ::fgetc;
# 104
using ::fgetpos;
# 105
using ::fgets;
# 106
using ::fopen;
# 107
using ::fprintf;
# 108
using ::fputc;
# 109
using ::fputs;
# 110
using ::fread;
# 111
using ::freopen;
# 112
using ::fscanf;
# 113
using ::fseek;
# 114
using ::fsetpos;
# 115
using ::ftell;
# 116
using ::fwrite;
# 117
using ::getc;
# 118
using ::getchar;
# 119
using ::gets;
# 120
using ::perror;
# 121
using ::printf;
# 122
using ::putc;
# 123
using ::putchar;
# 124
using ::puts;
# 125
using ::remove;
# 126
using ::rename;
# 127
using ::rewind;
# 128
using ::scanf;
# 129
using ::setbuf;
# 130
using ::setvbuf;
# 131
using ::sprintf;
# 132
using ::sscanf;
# 133
using ::tmpfile;
# 134
using ::tmpnam;
# 135
using ::ungetc;
# 136
using ::vfprintf;
# 137
using ::vprintf;
# 138
using ::vsprintf;
# 140
}
# 150 "/usr/include/c++/4.4/cstdio" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 165 "/usr/include/c++/4.4/cstdio" 3
using ::snprintf;
# 166
using ::vfscanf;
# 167
using ::vscanf;
# 168
using ::vsnprintf;
# 169
using ::vsscanf;
# 172
}
# 174
namespace std __attribute((__visibility__("default"))) { 
# 176
using __gnu_cxx::snprintf;
# 177
using __gnu_cxx::vfscanf;
# 178
using __gnu_cxx::vscanf;
# 179
using __gnu_cxx::vsnprintf;
# 180
using __gnu_cxx::vsscanf;
# 182
}
# 40 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++io.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
typedef __gthread_mutex_t __c_lock; 
# 45
typedef FILE __c_file; 
# 47
}
# 44 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/basic_file.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
template< class _CharT> class __basic_file; 
# 52
template<> class __basic_file< char>  { 
# 55
__c_file *_M_cfile; 
# 58
bool _M_cfile_created; 
# 61
public: __basic_file(__c_lock *  = 0); 
# 64
std::__basic_file< char>  *open(const char * , ios_base::openmode , int  = 436); 
# 67
std::__basic_file< char>  *sys_open(__c_file * , ios_base::openmode); 
# 70
std::__basic_file< char>  *sys_open(int , ios_base::openmode ); 
# 73
std::__basic_file< char>  *close(); 
# 76
bool is_open() const; 
# 79
int fd(); 
# 82
__c_file *file(); 
# 84
~__basic_file(); 
# 87
streamsize xsputn(const char * , streamsize ); 
# 90
streamsize xsputn_2(const char * , streamsize , const char * , streamsize ); 
# 94
streamsize xsgetn(char * , streamsize ); 
# 97
streamoff seekoff(streamoff , ios_base::seekdir ); 
# 100
int sync(); 
# 103
streamsize showmanyc(); 
# 104
}; 
# 106
}
# 49 "/usr/include/c++/4.4/fstream" 3
namespace std __attribute((__visibility__("default"))) { 
# 66 "/usr/include/c++/4.4/fstream" 3
template < typename _CharT, typename _Traits >
    class basic_filebuf : public basic_streambuf < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;

      typedef basic_streambuf < char_type, traits_type > __streambuf_type;
      typedef basic_filebuf < char_type, traits_type > __filebuf_type;
      typedef __basic_file < char > __file_type;
      typedef typename traits_type :: state_type __state_type;
      typedef codecvt < char_type, char, __state_type > __codecvt_type;

      friend class ios_base;

    protected :


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base :: openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type * _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;

      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type * _M_pback_cur_save;
      char_type * _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type * _M_codecvt;






      char * _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char * _M_ext_next;
      char * _M_ext_end;






      void
      _M_create_pback ( )
      {
 if ( ! _M_pback_init )
   {
     _M_pback_cur_save = this -> gptr ( );
     _M_pback_end_save = this -> egptr ( );
     this -> setg ( & _M_pback, & _M_pback, & _M_pback + 1 );
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback ( ) throw ( )
      {
 if ( _M_pback_init )
   {

     _M_pback_cur_save += this -> gptr ( ) != this -> eback ( );
     this -> setg ( _M_buf, _M_pback_cur_save, _M_pback_end_save );
     _M_pback_init = false;
   }
      }

    public :







      basic_filebuf ( );




      virtual
      ~ basic_filebuf ( )
      { this -> close ( ); }





      bool
      is_open ( ) const throw ( )
      { return _M_file . is_open ( ); }

      __filebuf_type *
      open ( const char * __s, ios_base :: openmode __mode );

      __filebuf_type *
      close ( );

    protected :
      void
      _M_allocate_internal_buffer ( );

      void
      _M_destroy_internal_buffer ( ) throw ( );


      virtual streamsize
      showmanyc ( );






      virtual int_type
      underflow ( );

      virtual int_type
      pbackfail ( int_type __c = _Traits :: eof ( ) );

      virtual int_type
      overflow ( int_type __c = _Traits :: eof ( ) );



      bool
      _M_convert_to_external ( char_type *, streamsize );

      virtual __streambuf_type *
      setbuf ( char_type * __s, streamsize __n );

      virtual pos_type
      seekoff ( off_type __off, ios_base :: seekdir __way,
       ios_base :: openmode __mode = ios_base :: in | ios_base :: out );

      virtual pos_type
      seekpos ( pos_type __pos,
       ios_base :: openmode __mode = ios_base :: in | ios_base :: out );


      pos_type
      _M_seek ( off_type __off, ios_base :: seekdir __way, __state_type __state );

      virtual int
      sync ( );

      virtual void
      imbue ( const locale & __loc );

      virtual streamsize
      xsgetn ( char_type * __s, streamsize __n );

      virtual streamsize
      xsputn ( const char_type * __s, streamsize __n );


      bool
      _M_terminate_output ( );

      void
      _M_set_buffer ( streamsize __off )
      {
  const bool __testin = _M_mode & ios_base :: in;
  const bool __testout = _M_mode & ios_base :: out;

 if ( __testin && __off > 0 )
   this -> setg ( _M_buf, _M_buf, _M_buf + __off );
 else
   this -> setg ( _M_buf, _M_buf, _M_buf );

 if ( __testout && __off == 0 && _M_buf_size > 1 )
   this -> setp ( _M_buf, _M_buf + _M_buf_size - 1 );
 else
   this -> setp ( __null, __null );
      }
    };
# 413 "/usr/include/c++/4.4/fstream" 3
template < typename _CharT, typename _Traits >
    class basic_ifstream : public basic_istream < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;


      typedef basic_filebuf < char_type, traits_type > __filebuf_type;
      typedef basic_istream < char_type, traits_type > __istream_type;

    private :
      __filebuf_type _M_filebuf;

    public :

      basic_ifstream ( ) : __istream_type ( ), _M_filebuf ( )
      { this -> init ( & _M_filebuf ); }

      explicit
      basic_ifstream ( const char * __s, ios_base :: openmode __mode = ios_base :: in )
      : __istream_type ( ), _M_filebuf ( )
      {
 this -> init ( & _M_filebuf );
 this -> open ( __s, __mode );
      }

      ~ basic_ifstream ( )
      { }

      __filebuf_type *
      rdbuf ( ) const
      { return const_cast < __filebuf_type * > ( & _M_filebuf ); }





      bool
      is_open ( )
      { return _M_filebuf . is_open ( ); }



      bool
      is_open ( ) const
      { return _M_filebuf . is_open ( ); }

      void
      open ( const char * __s, ios_base :: openmode __mode = ios_base :: in )
      {
 if ( ! _M_filebuf . open ( __s, __mode | ios_base :: in ) )
   this -> setstate ( ios_base :: failbit );
 else


   this -> clear ( );
      }

      void
      close ( )
      {
 if ( ! _M_filebuf . close ( ) )
   this -> setstate ( ios_base :: failbit );
      }
    };
# 581 "/usr/include/c++/4.4/fstream" 3
template < typename _CharT, typename _Traits >
    class basic_ofstream : public basic_ostream < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;


      typedef basic_filebuf < char_type, traits_type > __filebuf_type;
      typedef basic_ostream < char_type, traits_type > __ostream_type;

    private :
      __filebuf_type _M_filebuf;

    public :

      basic_ofstream ( ) : __ostream_type ( ), _M_filebuf ( )
      { this -> init ( & _M_filebuf ); }

      explicit
      basic_ofstream ( const char * __s,
       ios_base :: openmode __mode = ios_base :: out | ios_base :: trunc )
      : __ostream_type ( ), _M_filebuf ( )
      {
 this -> init ( & _M_filebuf );
 this -> open ( __s, __mode );
      }

      ~ basic_ofstream ( )
      { }

      __filebuf_type *
      rdbuf ( ) const
      { return const_cast < __filebuf_type * > ( & _M_filebuf ); }





      bool
      is_open ( )
      { return _M_filebuf . is_open ( ); }



      bool
      is_open ( ) const
      { return _M_filebuf . is_open ( ); }

      void
      open ( const char * __s,
    ios_base :: openmode __mode = ios_base :: out | ios_base :: trunc )
      {
 if ( ! _M_filebuf . open ( __s, __mode | ios_base :: out ) )
   this -> setstate ( ios_base :: failbit );
 else


   this -> clear ( );
      }

      void
      close ( )
      {
 if ( ! _M_filebuf . close ( ) )
   this -> setstate ( ios_base :: failbit );
      }
    };
# 754 "/usr/include/c++/4.4/fstream" 3
template < typename _CharT, typename _Traits >
    class basic_fstream : public basic_iostream < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;


      typedef basic_filebuf < char_type, traits_type > __filebuf_type;
      typedef basic_ios < char_type, traits_type > __ios_type;
      typedef basic_iostream < char_type, traits_type > __iostream_type;

    private :
      __filebuf_type _M_filebuf;

    public :

      basic_fstream ( )
      : __iostream_type ( ), _M_filebuf ( )
      { this -> init ( & _M_filebuf ); }

      explicit
      basic_fstream ( const char * __s,
      ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      : __iostream_type ( __null ), _M_filebuf ( )
      {
 this -> init ( & _M_filebuf );
 this -> open ( __s, __mode );
      }

      ~ basic_fstream ( )
      { }

      __filebuf_type *
      rdbuf ( ) const
      { return const_cast < __filebuf_type * > ( & _M_filebuf ); }





      bool
      is_open ( )
      { return _M_filebuf . is_open ( ); }



      bool
      is_open ( ) const
      { return _M_filebuf . is_open ( ); }

      void
      open ( const char * __s,
    ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      {
 if ( ! _M_filebuf . open ( __s, __mode ) )
   this -> setstate ( ios_base :: failbit );
 else


   this -> clear ( );
      }

      void
      close ( )
      {
 if ( ! _M_filebuf . close ( ) )
   this -> setstate ( ios_base :: failbit );
      }
    };
# 912 "/usr/include/c++/4.4/fstream" 3
}
# 43 "/usr/include/c++/4.4/bits/fstream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template < typename _CharT, typename _Traits >
    void
    basic_filebuf < _CharT, _Traits > ::
    _M_allocate_internal_buffer ( )
    {


      if ( ! _M_buf_allocated && ! _M_buf )
 {
   _M_buf = new char_type [ _M_buf_size ];
   _M_buf_allocated = true;
 }
    }
# 59
template < typename _CharT, typename _Traits >
    void
    basic_filebuf < _CharT, _Traits > ::
    _M_destroy_internal_buffer ( ) throw ( )
    {
      if ( _M_buf_allocated )
 {
   delete [ ] _M_buf;
   _M_buf = __null;
   _M_buf_allocated = false;
 }
      delete [ ] _M_ext_buf;
      _M_ext_buf = __null;
      _M_ext_buf_size = 0;
      _M_ext_next = __null;
      _M_ext_end = __null;
    }
# 77
template < typename _CharT, typename _Traits >
    basic_filebuf < _CharT, _Traits > ::
    basic_filebuf ( ) : __streambuf_type ( ), _M_lock ( ), _M_file ( & _M_lock ),
    _M_mode ( ios_base :: openmode ( 0 ) ), _M_state_beg ( ), _M_state_cur ( ),
    _M_state_last ( ), _M_buf ( __null ), _M_buf_size ( 8192 ),
    _M_buf_allocated ( false ), _M_reading ( false ), _M_writing ( false ), _M_pback ( ),
    _M_pback_cur_save ( 0 ), _M_pback_end_save ( 0 ), _M_pback_init ( false ),
    _M_codecvt ( 0 ), _M_ext_buf ( 0 ), _M_ext_buf_size ( 0 ), _M_ext_next ( 0 ),
    _M_ext_end ( 0 )
    {
      if ( has_facet < __codecvt_type > ( this -> _M_buf_locale ) )
 _M_codecvt = & use_facet < __codecvt_type > ( this -> _M_buf_locale );
    }
# 91
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: __filebuf_type *
    basic_filebuf < _CharT, _Traits > ::
    open ( const char * __s, ios_base :: openmode __mode )
    {
      __filebuf_type * __ret = __null;
      if ( ! this -> is_open ( ) )
 {
   _M_file . open ( __s, __mode );
   if ( this -> is_open ( ) )
     {
       _M_allocate_internal_buffer ( );
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer ( - 1 );


       _M_state_last = _M_state_cur = _M_state_beg;


       if ( ( __mode & ios_base :: ate )
    && this -> seekoff ( 0, ios_base :: end, __mode )
    == pos_type ( off_type ( - 1 ) ) )
  this -> close ( );
       else
  __ret = this;
     }
 }
      return __ret;
    }
# 125
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: __filebuf_type *
    basic_filebuf < _CharT, _Traits > ::
    close ( )
    {
      if ( ! this -> is_open ( ) )
 return __null;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf * __fb;
   __close_sentry ( basic_filebuf * __fbi ) : __fb ( __fbi ) { }
   ~ __close_sentry ( )
   {
     __fb -> _M_mode = ios_base :: openmode ( 0 );
     __fb -> _M_pback_init = false;
     __fb -> _M_destroy_internal_buffer ( );
     __fb -> _M_reading = false;
     __fb -> _M_writing = false;
     __fb -> _M_set_buffer ( - 1 );
     __fb -> _M_state_last = __fb -> _M_state_cur = __fb -> _M_state_beg;
   }
 } __cs ( this );

 try
   {
     if ( ! _M_terminate_output ( ) )
       __testfail = true;
   }
 catch ( __cxxabiv1 :: __forced_unwind & )
   {
     _M_file . close ( );
     throw;
   }
 catch ( ... )
   { __testfail = true; }
      }

      if ( ! _M_file . close ( ) )
 __testfail = true;

      if ( __testfail )
 return __null;
      else
 return this;
    }
# 175
template < typename _CharT, typename _Traits >
    streamsize
    basic_filebuf < _CharT, _Traits > ::
    showmanyc ( )
    {
      streamsize __ret = - 1;
      const bool __testin = _M_mode & ios_base :: in;
      if ( __testin && this -> is_open ( ) )
 {


   __ret = this -> egptr ( ) - this -> gptr ( );







   if ( __check_facet ( _M_codecvt ) . encoding ( ) >= 0 )

     __ret += _M_file . showmanyc ( ) / _M_codecvt -> max_length ( );
 }
      return __ret;
    }
# 201
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: int_type
    basic_filebuf < _CharT, _Traits > ::
    underflow ( )
    {
      int_type __ret = traits_type :: eof ( );
      const bool __testin = _M_mode & ios_base :: in;
      if ( __testin && ! _M_writing )
 {



   _M_destroy_pback ( );

   if ( this -> gptr ( ) < this -> egptr ( ) )
     return traits_type :: to_int_type ( * this -> gptr ( ) );


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base :: result __r = codecvt_base :: ok;
   if ( __check_facet ( _M_codecvt ) . always_noconv ( ) )
     {
       __ilen = _M_file . xsgetn ( reinterpret_cast < char * > ( this -> eback ( ) ),
          __buflen );
       if ( __ilen == 0 )
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt -> encoding ( );
       streamsize __blen;
       streamsize __rlen;
       if ( __enc > 0 )
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt -> max_length ( ) - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if ( _M_reading && this -> egptr ( ) == this -> eback ( ) && __remainder )
  __rlen = 0;



       if ( _M_ext_buf_size < __blen )
  {
    char * __buf = new char [ __blen ];
    if ( __remainder )
      __builtin_memcpy ( __buf, _M_ext_next, __remainder );

    delete [ ] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if ( __remainder )
  __builtin_memmove ( _M_ext_buf, _M_ext_next, __remainder );

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if ( __rlen > 0 )
      {



        if ( _M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size )
   {
     __throw_ios_failure ( ( "basic_filebuf::underflow codecvt::max_length() is not valid" ) );


   }
        streamsize __elen = _M_file . xsgetn ( _M_ext_end, __rlen );
        if ( __elen == 0 )
   __got_eof = true;
        else if ( __elen == - 1 )
   break;
        _M_ext_end += __elen;
      }

    char_type * __iend = this -> eback ( );
    if ( _M_ext_next < _M_ext_end )
      __r = _M_codecvt -> in ( _M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this -> eback ( ),
      this -> eback ( ) + __buflen, __iend );
    if ( __r == codecvt_base :: noconv )
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std :: min ( __avail, __buflen );
        traits_type :: copy ( this -> eback ( ),
     reinterpret_cast < char_type * >
     ( _M_ext_buf ), __ilen );
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this -> eback ( );




    if ( __r == codecvt_base :: error )
      break;

    __rlen = 1;
  }
       while ( __ilen == 0 && ! __got_eof );
     }

   if ( __ilen > 0 )
     {
       _M_set_buffer ( __ilen );
       _M_reading = true;
       __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     }
   else if ( __got_eof )
     {



       _M_set_buffer ( - 1 );
       _M_reading = false;


       if ( __r == codecvt_base :: partial )
  __throw_ios_failure ( ( "basic_filebuf::underflow incomplete character in file" ) );

     }
   else if ( __r == codecvt_base :: error )
     __throw_ios_failure ( ( "basic_filebuf::underflow invalid byte sequence in file" ) );

   else
     __throw_ios_failure ( ( "basic_filebuf::underflow error reading the file" ) );

 }
      return __ret;
    }
# 353
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: int_type
    basic_filebuf < _CharT, _Traits > ::
    pbackfail ( int_type __i )
    {
      int_type __ret = traits_type :: eof ( );
      const bool __testin = _M_mode & ios_base :: in;
      if ( __testin && ! _M_writing )
 {


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type :: eq_int_type ( __i, __ret );
   int_type __tmp;
   if ( this -> eback ( ) < this -> gptr ( ) )
     {
       this -> gbump ( - 1 );
       __tmp = traits_type :: to_int_type ( * this -> gptr ( ) );
     }
   else if ( this -> seekoff ( - 1, ios_base :: cur ) != pos_type ( off_type ( - 1 ) ) )
     {
       __tmp = this -> underflow ( );
       if ( traits_type :: eq_int_type ( __tmp, __ret ) )
  return __ret;
     }
   else
     {





       return __ret;
     }



   if ( ! __testeof && traits_type :: eq_int_type ( __i, __tmp ) )
     __ret = __i;
   else if ( __testeof )
     __ret = traits_type :: not_eof ( __i );
   else if ( ! __testpb )
     {
       _M_create_pback ( );
       _M_reading = true;
       * this -> gptr ( ) = traits_type :: to_char_type ( __i );
       __ret = __i;
     }
 }
      return __ret;
    }
# 405
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: int_type
    basic_filebuf < _CharT, _Traits > ::
    overflow ( int_type __c )
    {
      int_type __ret = traits_type :: eof ( );
      const bool __testeof = traits_type :: eq_int_type ( __c, __ret );
      const bool __testout = _M_mode & ios_base :: out;
      if ( __testout && ! _M_reading )
 {
   if ( this -> pbase ( ) < this -> pptr ( ) )
     {

       if ( ! __testeof )
  {
    * this -> pptr ( ) = traits_type :: to_char_type ( __c );
    this -> pbump ( 1 );
  }



       if ( _M_convert_to_external ( this -> pbase ( ),
      this -> pptr ( ) - this -> pbase ( ) ) )
  {
    _M_set_buffer ( 0 );
    __ret = traits_type :: not_eof ( __c );
  }
     }
   else if ( _M_buf_size > 1 )
     {



       _M_set_buffer ( 0 );
       _M_writing = true;
       if ( ! __testeof )
  {
    * this -> pptr ( ) = traits_type :: to_char_type ( __c );
    this -> pbump ( 1 );
  }
       __ret = traits_type :: not_eof ( __c );
     }
   else
     {

       char_type __conv = traits_type :: to_char_type ( __c );
       if ( __testeof || _M_convert_to_external ( & __conv, 1 ) )
  {
    _M_writing = true;
    __ret = traits_type :: not_eof ( __c );
  }
     }
 }
      return __ret;
    }
# 461
template < typename _CharT, typename _Traits >
    bool
    basic_filebuf < _CharT, _Traits > ::
    _M_convert_to_external ( _CharT * __ibuf, streamsize __ilen )
    {

      streamsize __elen;
      streamsize __plen;
      if ( __check_facet ( _M_codecvt ) . always_noconv ( ) )
 {
   __elen = _M_file . xsputn ( reinterpret_cast < char * > ( __ibuf ), __ilen );
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt -> max_length ( );
   char * __buf = static_cast < char * > ( __builtin_alloca ( __blen ) );

   char * __bend;
   const char_type * __iend;
   codecvt_base :: result __r;
   __r = _M_codecvt -> out ( _M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend );

   if ( __r == codecvt_base :: ok || __r == codecvt_base :: partial )
     __blen = __bend - __buf;
   else if ( __r == codecvt_base :: noconv )
     {

       __buf = reinterpret_cast < char * > ( __ibuf );
       __blen = __ilen;
     }
   else
     __throw_ios_failure ( ( "basic_filebuf::_M_convert_to_external conversion error" ) );


   __elen = _M_file . xsputn ( __buf, __blen );
   __plen = __blen;


   if ( __r == codecvt_base :: partial && __elen == __plen )
     {
       const char_type * __iresume = __iend;
       streamsize __rlen = this -> pptr ( ) - __iend;
       __r = _M_codecvt -> out ( _M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend );
       if ( __r != codecvt_base :: error )
  {
    __rlen = __bend - __buf;
    __elen = _M_file . xsputn ( __buf, __rlen );
    __plen = __rlen;
  }
       else
  __throw_ios_failure ( ( "basic_filebuf::_M_convert_to_external conversion error" ) );

     }
 }
      return __elen == __plen;
    }
# 524
template < typename _CharT, typename _Traits >
     streamsize
     basic_filebuf < _CharT, _Traits > ::
     xsgetn ( _CharT * __s, streamsize __n )
     {

       streamsize __ret = 0;
       if ( _M_pback_init )
  {
    if ( __n > 0 && this -> gptr ( ) == this -> eback ( ) )
      {
        * __s ++ = * this -> gptr ( );
        this -> gbump ( 1 );
        __ret = 1;
        -- __n;
      }
    _M_destroy_pback ( );
  }




       const bool __testin = _M_mode & ios_base :: in;
       const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

       if ( __n > __buflen && __check_facet ( _M_codecvt ) . always_noconv ( )
    && __testin && ! _M_writing )
  {

    const streamsize __avail = this -> egptr ( ) - this -> gptr ( );
    if ( __avail != 0 )
      {
        if ( __avail == 1 )
   * __s = * this -> gptr ( );
        else
   traits_type :: copy ( __s, this -> gptr ( ), __avail );
        __s += __avail;
        this -> gbump ( __avail );
        __ret += __avail;
        __n -= __avail;
      }



    streamsize __len;
    for (;; )
      {
        __len = _M_file . xsgetn ( reinterpret_cast < char * > ( __s ),
          __n );
        if ( __len == - 1 )
   __throw_ios_failure ( ( "basic_filebuf::xsgetn error reading the file" ) );

        if ( __len == 0 )
   break;

        __n -= __len;
        __ret += __len;
        if ( __n == 0 )
   break;

        __s += __len;
      }

    if ( __n == 0 )
      {
        _M_set_buffer ( 0 );
        _M_reading = true;
      }
    else if ( __len == 0 )
      {



        _M_set_buffer ( - 1 );
        _M_reading = false;
      }
  }
       else
  __ret += __streambuf_type :: xsgetn ( __s, __n );

       return __ret;
     }
# 607
template < typename _CharT, typename _Traits >
     streamsize
     basic_filebuf < _CharT, _Traits > ::
     xsputn ( const _CharT * __s, streamsize __n )
     {



       streamsize __ret = 0;
       const bool __testout = _M_mode & ios_base :: out;
       if ( __check_facet ( _M_codecvt ) . always_noconv ( )
    && __testout && ! _M_reading )
 {

   const streamsize __chunk = 1UL << 10;
   streamsize __bufavail = this -> epptr ( ) - this -> pptr ( );


   if ( ! _M_writing && _M_buf_size > 1 )
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std :: min ( __chunk, __bufavail );
   if ( __n >= __limit )
     {
       const streamsize __buffill = this -> pptr ( ) - this -> pbase ( );
       const char * __buf = reinterpret_cast < const char * > ( this -> pbase ( ) );
       __ret = _M_file . xsputn_2 ( __buf, __buffill,
           reinterpret_cast < const char * > ( __s ),
           __n );
       if ( __ret == __buffill + __n )
  {
    _M_set_buffer ( 0 );
    _M_writing = true;
  }
       if ( __ret > __buffill )
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type :: xsputn ( __s, __n );
 }
       else
  __ret = __streambuf_type :: xsputn ( __s, __n );
       return __ret;
    }
# 654
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: __streambuf_type *
    basic_filebuf < _CharT, _Traits > ::
    setbuf ( char_type * __s, streamsize __n )
    {
      if ( ! this -> is_open ( ) )
 {
   if ( __s == 0 && __n == 0 )
     _M_buf_size = 1;
   else if ( __s && __n > 0 )
     {

       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }
# 683 "/usr/include/c++/4.4/bits/fstream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: pos_type
    basic_filebuf < _CharT, _Traits > ::
    seekoff ( off_type __off, ios_base :: seekdir __way, ios_base :: openmode )
    {
      int __width = 0;
      if ( _M_codecvt )
 __width = _M_codecvt -> encoding ( );
      if ( __width < 0 )
 __width = 0;

      pos_type __ret = pos_type ( off_type ( - 1 ) );
      const bool __testfail = __off != 0 && __width <= 0;
      if ( this -> is_open ( ) && ! __testfail )
 {

   _M_destroy_pback ( );






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if ( _M_reading && __way == ios_base :: cur )
     {
       if ( _M_codecvt -> always_noconv ( ) )
  __computed_off += this -> gptr ( ) - this -> egptr ( );
       else
  {



    const int __gptr_off =
      _M_codecvt -> length ( _M_state_last, _M_ext_buf, _M_ext_next,
           this -> gptr ( ) - this -> eback ( ) );
    __computed_off += _M_ext_buf + __gptr_off - _M_ext_end;



    __state = _M_state_last;
  }
     }
   __ret = _M_seek ( __computed_off, __way, __state );
 }
      return __ret;
    }
# 736
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: pos_type
    basic_filebuf < _CharT, _Traits > ::
    seekpos ( pos_type __pos, ios_base :: openmode )
    {
      pos_type __ret = pos_type ( off_type ( - 1 ) );
      if ( this -> is_open ( ) )
 {

   _M_destroy_pback ( );
   __ret = _M_seek ( off_type ( __pos ), ios_base :: beg, __pos . state ( ) );
 }
      return __ret;
    }
# 751
template < typename _CharT, typename _Traits >
    typename basic_filebuf < _CharT, _Traits > :: pos_type
    basic_filebuf < _CharT, _Traits > ::
    _M_seek ( off_type __off, ios_base :: seekdir __way, __state_type __state )
    {
      pos_type __ret = pos_type ( off_type ( - 1 ) );
      if ( _M_terminate_output ( ) )
 {

   __ret = pos_type ( _M_file . seekoff ( __off, __way ) );
   if ( __ret != pos_type ( off_type ( - 1 ) ) )
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer ( - 1 );
       _M_state_cur = __state;
       __ret . state ( _M_state_cur );
     }
 }
      return __ret;
    }
# 774
template < typename _CharT, typename _Traits >
    bool
    basic_filebuf < _CharT, _Traits > ::
    _M_terminate_output ( )
    {

      bool __testvalid = true;
      if ( this -> pbase ( ) < this -> pptr ( ) )
 {
   const int_type __tmp = this -> overflow ( );
   if ( traits_type :: eq_int_type ( __tmp, traits_type :: eof ( ) ) )
     __testvalid = false;
 }


      if ( _M_writing && ! __check_facet ( _M_codecvt ) . always_noconv ( )
   && __testvalid )
 {



   const size_t __blen = 128;
   char __buf [ __blen ];
   codecvt_base :: result __r;
   streamsize __ilen = 0;

   do
     {
       char * __next;
       __r = _M_codecvt -> unshift ( _M_state_cur, __buf,
     __buf + __blen, __next );
       if ( __r == codecvt_base :: error )
  __testvalid = false;
       else if ( __r == codecvt_base :: ok ||
         __r == codecvt_base :: partial )
  {
    __ilen = __next - __buf;
    if ( __ilen > 0 )
      {
        const streamsize __elen = _M_file . xsputn ( __buf, __ilen );
        if ( __elen != __ilen )
   __testvalid = false;
      }
  }
     }
   while ( __r == codecvt_base :: partial && __ilen > 0 && __testvalid );

   if ( __testvalid )
     {




       const int_type __tmp = this -> overflow ( );
       if ( traits_type :: eq_int_type ( __tmp, traits_type :: eof ( ) ) )
  __testvalid = false;
     }
 }
      return __testvalid;
    }
# 835
template < typename _CharT, typename _Traits >
    int
    basic_filebuf < _CharT, _Traits > ::
    sync ( )
    {


      int __ret = 0;
      if ( this -> pbase ( ) < this -> pptr ( ) )
 {
   const int_type __tmp = this -> overflow ( );
   if ( traits_type :: eq_int_type ( __tmp, traits_type :: eof ( ) ) )
     __ret = - 1;
 }
      return __ret;
    }
# 852
template < typename _CharT, typename _Traits >
    void
    basic_filebuf < _CharT, _Traits > ::
    imbue ( const locale & __loc )
    {
      bool __testvalid = true;

      const __codecvt_type * _M_codecvt_tmp = 0;
      if ( __builtin_expect ( has_facet < __codecvt_type > ( __loc ), true ) )
 _M_codecvt_tmp = & use_facet < __codecvt_type > ( __loc );

      if ( this -> is_open ( ) )
 {

   if ( ( _M_reading || _M_writing )
       && __check_facet ( _M_codecvt ) . encoding ( ) == - 1 )
     __testvalid = false;
   else
     {
       if ( _M_reading )
  {
    if ( __check_facet ( _M_codecvt ) . always_noconv ( ) )
      {
        if ( _M_codecvt_tmp
     && ! __check_facet ( _M_codecvt_tmp ) . always_noconv ( ) )
   __testvalid = this -> seekoff ( 0, ios_base :: cur, _M_mode )
                 != pos_type ( off_type ( - 1 ) );
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt -> length ( _M_state_last, _M_ext_buf, _M_ext_next,
          this -> gptr ( ) - this -> eback ( ) );
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if ( __remainder )
   __builtin_memmove ( _M_ext_buf, _M_ext_next, __remainder );

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer ( - 1 );
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if ( _M_writing && ( __testvalid = _M_terminate_output ( ) ) )
  _M_set_buffer ( - 1 );
     }
 }

      if ( __testvalid )
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }
# 911
extern template class basic_filebuf< char, char_traits< char> > ;
# 912
extern template class basic_ifstream< char, char_traits< char> > ;
# 913
extern template class basic_ofstream< char, char_traits< char> > ;
# 914
extern template class basic_fstream< char, char_traits< char> > ;
# 917
extern template class basic_filebuf< wchar_t, char_traits< wchar_t> > ;
# 918
extern template class basic_ifstream< wchar_t, char_traits< wchar_t> > ;
# 919
extern template class basic_ofstream< wchar_t, char_traits< wchar_t> > ;
# 920
extern template class basic_fstream< wchar_t, char_traits< wchar_t> > ;
# 924
}
# 49 "/usr/include/stdint.h" 3
typedef unsigned char uint8_t; 
# 50
typedef unsigned short uint16_t; 
# 52
typedef unsigned uint32_t; 
# 56
typedef unsigned long uint64_t; 
# 66 "/usr/include/stdint.h" 3
typedef signed char int_least8_t; 
# 67
typedef short int_least16_t; 
# 68
typedef int int_least32_t; 
# 70
typedef long int_least64_t; 
# 77
typedef unsigned char uint_least8_t; 
# 78
typedef unsigned short uint_least16_t; 
# 79
typedef unsigned uint_least32_t; 
# 81
typedef unsigned long uint_least64_t; 
# 91 "/usr/include/stdint.h" 3
typedef signed char int_fast8_t; 
# 93
typedef long int_fast16_t; 
# 94
typedef long int_fast32_t; 
# 95
typedef long int_fast64_t; 
# 104 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 106
typedef unsigned long uint_fast16_t; 
# 107
typedef unsigned long uint_fast32_t; 
# 108
typedef unsigned long uint_fast64_t; 
# 123 "/usr/include/stdint.h" 3
typedef unsigned long uintptr_t; 
# 135 "/usr/include/stdint.h" 3
typedef long intmax_t; 
# 136
typedef unsigned long uintmax_t; 
# 11 "euler3d.cu"
extern "C" void m5_work_begin(uint64_t , uint64_t ); 
# 12
extern "C" void m5_work_end(uint64_t , uint64_t ); 
# 22 "euler3d.cu"
unsigned iterations = (2000); 
# 53 "euler3d.cu"
template< class T> T *
# 54
alloc(int N) 
# 55
{ 
# 56
T *t; 
# 57
{ cudaError err = cudaMalloc((void **)(&t), sizeof(T) * N); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 57, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 58
return t; 
# 59
} 
# 61
template< class T> void 
# 62
dealloc(T *array) 
# 63
{ 
# 64
{ cudaError err = cudaFree((void *)array); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 64, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 65
} 
# 67
template< class T> void 
# 68
copy(T *dst, T *src, int N) 
# 69
{ 
# 70
{ cudaError err = cudaMemcpy((void *)dst, (void *)src, N * sizeof(T), cudaMemcpyDeviceToDevice); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 70, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 71
} 
# 73
template< class T> void 
# 74
upload(T *dst, T *src, int N) 
# 75
{ 
# 76
{ cudaError err = cudaMemcpy((void *)dst, (void *)src, N * sizeof(T), cudaMemcpyHostToDevice); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 76, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 77
} 
# 79
template< class T> void 
# 80
download(T *dst, T *src, int N) 
# 81
{ 
# 82
{ cudaError err = cudaMemcpy((void *)dst, (void *)src, N * sizeof(T), cudaMemcpyDeviceToHost); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 82, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 83
} 
# 85
void dump(float *variables, int nel, int nelr) 
# 86
{ 
# 87
float *h_variables = (new float [nelr * ((1 + 3) + 1)]); 
# 88
download(h_variables, variables, nelr * ((1 + 3) + 1)); 
# 90
{ 
# 92
(((std::cout << ("density:"))) << (std::endl)); 
# 93
(((((((std::cout << nel)) << (" "))) << nelr)) << (std::endl)); 
# 94
for (int i = 0; i < nel; i++) { (((std::cout << (h_variables[i + (0 * nelr)]))) << (std::endl)); }  
# 95
} 
# 98
{ 
# 100
(((std::cout << ("momentum:"))) << (std::endl)); 
# 101
(((((((std::cout << nel)) << (" "))) << nelr)) << (std::endl)); 
# 102
for (int i = 0; i < nel; i++) 
# 103
{ 
# 104
for (int j = 0; j != 3; j++) { 
# 105
(((std::cout << (h_variables[i + ((1 + j) * nelr)]))) << (" ")); }  
# 106
(std::cout << (std::endl)); 
# 107
}  
# 108
} 
# 110
{ 
# 112
(((std::cout << ("density_energy:"))) << (std::endl)); 
# 113
(((((((std::cout << nel)) << (" "))) << nelr)) << (std::endl)); 
# 114
for (int i = 0; i < nel; i++) { (((std::cout << (h_variables[i + ((1 + 3) * nelr)]))) << (std::endl)); }  
# 115
} 
# 116
delete [] h_variables; 
# 117
} 
# 122
__loc_sc__(__constant__,,) float ff_variable[(1 + 3) + 1]; 
# 123
__loc_sc__(__constant__,,) float3 ff_flux_contribution_momentum_x[1]; 
# 124
__loc_sc__(__constant__,,) float3 ff_flux_contribution_momentum_y[1]; 
# 125
__loc_sc__(__constant__,,) float3 ff_flux_contribution_momentum_z[1]; 
# 126
__loc_sc__(__constant__,,) float3 ff_flux_contribution_density_energy[1]; 
# 128
void cuda_initialize_variables(int nelr, float *variables) ;
#if 0
# 129
{ 
# 130
const int i = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x)); 
# 131
for (int j = 0; j < ((1 + 3) + 1); j++) { 
# 132
(variables[i + (j * nelr)]) = ((ff_variable)[j]); }  
# 133
} 
#endif
# 134 "euler3d.cu"
void initialize_variables(int nelr, float *variables) 
# 135
{ 
# 136
dim3 Dg(nelr / 192), Db(192); 
# 137
cudaConfigureCall(Dg, Db) ? ((void)0) : cuda_initialize_variables(nelr, variables); 
# 138
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "initialize_variables failed", "euler3d.cu", 138, cudaGetErrorString(err)); exit(1); }  } ; 
# 139
} 
# 141
inline void compute_flux_contribution(float &density, float3 &momentum, float &density_energy, float &pressure, float3 &velocity, float3 &fc_momentum_x, float3 &fc_momentum_y, float3 &fc_momentum_z, float3 &fc_density_energy) 
# 142
{ 
# 143
(fc_momentum_x.x) = (((velocity.x) * (momentum.x)) + pressure); 
# 144
(fc_momentum_x.y) = ((velocity.x) * (momentum.y)); 
# 145
(fc_momentum_x.z) = ((velocity.x) * (momentum.z)); 
# 148
(fc_momentum_y.x) = (fc_momentum_x.y); 
# 149
(fc_momentum_y.y) = (((velocity.y) * (momentum.y)) + pressure); 
# 150
(fc_momentum_y.z) = ((velocity.y) * (momentum.z)); 
# 152
(fc_momentum_z.x) = (fc_momentum_x.z); 
# 153
(fc_momentum_z.y) = (fc_momentum_y.z); 
# 154
(fc_momentum_z.z) = (((velocity.z) * (momentum.z)) + pressure); 
# 156
float de_p = (density_energy + pressure); 
# 157
(fc_density_energy.x) = ((velocity.x) * de_p); 
# 158
(fc_density_energy.y) = ((velocity.y) * de_p); 
# 159
(fc_density_energy.z) = ((velocity.z) * de_p); 
# 160
} 
# 162
__attribute__((unused)) inline void compute_velocity(float &density, float3 &momentum, float3 &velocity) 
# 163
{int volatile ___ = 1;(void)density;(void)momentum;(void)velocity;
# 167
exit(___);}
#if 0
# 163
{ 
# 164
(velocity.x) = ((momentum.x) / density); 
# 165
(velocity.y) = ((momentum.y) / density); 
# 166
(velocity.z) = ((momentum.z) / density); 
# 167
} 
#endif
# 169 "euler3d.cu"
__attribute__((unused)) inline float compute_speed_sqd(float3 &velocity) 
# 170
{int volatile ___ = 1;(void)velocity;
# 172
exit(___);}
#if 0
# 170
{ 
# 171
return (((velocity.x) * (velocity.x)) + ((velocity.y) * (velocity.y))) + ((velocity.z) * (velocity.z)); 
# 172
} 
#endif
# 174 "euler3d.cu"
__attribute__((unused)) inline float compute_pressure(float &density, float &density_energy, float &speed_sqd) 
# 175
{int volatile ___ = 1;(void)density;(void)density_energy;(void)speed_sqd;
# 177
exit(___);}
#if 0
# 175
{ 
# 176
return (((float)(1.399999976F)) - ((float)(1.0F))) * (density_energy - ((((float)(0.5F)) * density) * speed_sqd)); 
# 177
} 
#endif
# 179 "euler3d.cu"
__attribute__((unused)) inline float compute_speed_of_sound(float &density, float &pressure) 
# 180
{int volatile ___ = 1;(void)density;(void)pressure;
# 182
exit(___);}
#if 0
# 180
{ 
# 181
return sqrtf((((float)(1.399999976F)) * pressure) / density); 
# 182
} 
#endif
# 184 "euler3d.cu"
void cuda_compute_step_factor(int nelr, float *variables, float *areas, float *step_factors) ;
#if 0
# 185
{ 
# 186
const int i = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x)); 
# 188
float density = (variables[i + (0 * nelr)]); 
# 189
float3 momentum; 
# 190
(momentum.x) = (variables[i + ((1 + 0) * nelr)]); 
# 191
(momentum.y) = (variables[i + ((1 + 1) * nelr)]); 
# 192
(momentum.z) = (variables[i + ((1 + 2) * nelr)]); 
# 194
float density_energy = (variables[i + ((1 + 3) * nelr)]); 
# 196
float3 velocity; compute_velocity(density, momentum, velocity); 
# 197
float speed_sqd = compute_speed_sqd(velocity); 
# 198
float pressure = compute_pressure(density, density_energy, speed_sqd); 
# 199
float speed_of_sound = compute_speed_of_sound(density, pressure); 
# 202
(step_factors[i]) = (((float)(0.5F)) / (sqrtf(areas[i]) * (sqrtf(speed_sqd) + speed_of_sound))); 
# 203
} 
#endif
# 204 "euler3d.cu"
void compute_step_factor(int nelr, float *variables, float *areas, float *step_factors) 
# 205
{ 
# 206
dim3 Dg(nelr / 192), Db(192); 
# 207
cudaConfigureCall(Dg, Db) ? ((void)0) : cuda_compute_step_factor(nelr, variables, areas, step_factors); 
# 208
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "compute_step_factor failed", "euler3d.cu", 208, cudaGetErrorString(err)); exit(1); }  } ; 
# 209
} 
# 215
void cuda_compute_flux(int nelr, int *elements_surrounding_elements, float *normals, float *variables, float *fluxes) ;
#if 0
# 216
{ 
# 217
const float smoothing_coefficient = ((float)(0.200000003F)); 
# 218
const int i = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x)); 
# 220
int j, nb; 
# 221
float3 normal; float normal_len; 
# 222
float factor; 
# 224
float density_i = (variables[i + (0 * nelr)]); 
# 225
float3 momentum_i; 
# 226
(momentum_i.x) = (variables[i + ((1 + 0) * nelr)]); 
# 227
(momentum_i.y) = (variables[i + ((1 + 1) * nelr)]); 
# 228
(momentum_i.z) = (variables[i + ((1 + 2) * nelr)]); 
# 230
float density_energy_i = (variables[i + ((1 + 3) * nelr)]); 
# 232
float3 velocity_i; compute_velocity(density_i, momentum_i, velocity_i); 
# 233
float speed_sqd_i = compute_speed_sqd(velocity_i); 
# 234
float speed_i = sqrtf(speed_sqd_i); 
# 235
float pressure_i = compute_pressure(density_i, density_energy_i, speed_sqd_i); 
# 236
float speed_of_sound_i = compute_speed_of_sound(density_i, pressure_i); 
# 237
float3 flux_contribution_i_momentum_x, flux_contribution_i_momentum_y, flux_contribution_i_momentum_z; 
# 238
float3 flux_contribution_i_density_energy; 
# 239
compute_flux_contribution(density_i, momentum_i, density_energy_i, pressure_i, velocity_i, flux_contribution_i_momentum_x, flux_contribution_i_momentum_y, flux_contribution_i_momentum_z, flux_contribution_i_density_energy); 
# 241
float flux_i_density = ((float)(0.0F)); 
# 242
float3 flux_i_momentum; 
# 243
(flux_i_momentum.x) = ((float)(0.0F)); 
# 244
(flux_i_momentum.y) = ((float)(0.0F)); 
# 245
(flux_i_momentum.z) = ((float)(0.0F)); 
# 246
float flux_i_density_energy = ((float)(0.0F)); 
# 248
float3 velocity_nb; 
# 249
float density_nb, density_energy_nb; 
# 250
float3 momentum_nb; 
# 251
float3 flux_contribution_nb_momentum_x, flux_contribution_nb_momentum_y, flux_contribution_nb_momentum_z; 
# 252
float3 flux_contribution_nb_density_energy; 
# 253
float speed_sqd_nb, speed_of_sound_nb, pressure_nb; 
# 256
#pragma unroll
for (
# 256
j = 0; j < 4; j++) 
# 257
{ 
# 258
nb = (elements_surrounding_elements[i + (j * nelr)]); 
# 259
(normal.x) = (normals[i + ((j + (0 * 4)) * nelr)]); 
# 260
(normal.y) = (normals[i + ((j + (1 * 4)) * nelr)]); 
# 261
(normal.z) = (normals[i + ((j + (2 * 4)) * nelr)]); 
# 262
normal_len = sqrtf((((normal.x) * (normal.x)) + ((normal.y) * (normal.y))) + ((normal.z) * (normal.z))); 
# 264
if (nb >= 0) 
# 265
{ 
# 266
density_nb = (variables[nb + (0 * nelr)]); 
# 267
(momentum_nb.x) = (variables[nb + ((1 + 0) * nelr)]); 
# 268
(momentum_nb.y) = (variables[nb + ((1 + 1) * nelr)]); 
# 269
(momentum_nb.z) = (variables[nb + ((1 + 2) * nelr)]); 
# 270
density_energy_nb = (variables[nb + ((1 + 3) * nelr)]); 
# 271
compute_velocity(density_nb, momentum_nb, velocity_nb); 
# 272
speed_sqd_nb = compute_speed_sqd(velocity_nb); 
# 273
pressure_nb = compute_pressure(density_nb, density_energy_nb, speed_sqd_nb); 
# 274
speed_of_sound_nb = compute_speed_of_sound(density_nb, pressure_nb); 
# 275
compute_flux_contribution(density_nb, momentum_nb, density_energy_nb, pressure_nb, velocity_nb, flux_contribution_nb_momentum_x, flux_contribution_nb_momentum_y, flux_contribution_nb_momentum_z, flux_contribution_nb_density_energy); 
# 278
factor = ((((-normal_len) * smoothing_coefficient) * ((float)(0.5F))) * (((speed_i + sqrtf(speed_sqd_nb)) + speed_of_sound_i) + speed_of_sound_nb)); 
# 279
flux_i_density += (factor * (density_i - density_nb)); 
# 280
flux_i_density_energy += (factor * (density_energy_i - density_energy_nb)); 
# 281
(flux_i_momentum.x) += (factor * ((momentum_i.x) - (momentum_nb.x))); 
# 282
(flux_i_momentum.y) += (factor * ((momentum_i.y) - (momentum_nb.y))); 
# 283
(flux_i_momentum.z) += (factor * ((momentum_i.z) - (momentum_nb.z))); 
# 286
factor = (((float)(0.5F)) * (normal.x)); 
# 287
flux_i_density += (factor * ((momentum_nb.x) + (momentum_i.x))); 
# 288
flux_i_density_energy += (factor * ((flux_contribution_nb_density_energy.x) + (flux_contribution_i_density_energy.x))); 
# 289
(flux_i_momentum.x) += (factor * ((flux_contribution_nb_momentum_x.x) + (flux_contribution_i_momentum_x.x))); 
# 290
(flux_i_momentum.y) += (factor * ((flux_contribution_nb_momentum_y.x) + (flux_contribution_i_momentum_y.x))); 
# 291
(flux_i_momentum.z) += (factor * ((flux_contribution_nb_momentum_z.x) + (flux_contribution_i_momentum_z.x))); 
# 293
factor = (((float)(0.5F)) * (normal.y)); 
# 294
flux_i_density += (factor * ((momentum_nb.y) + (momentum_i.y))); 
# 295
flux_i_density_energy += (factor * ((flux_contribution_nb_density_energy.y) + (flux_contribution_i_density_energy.y))); 
# 296
(flux_i_momentum.x) += (factor * ((flux_contribution_nb_momentum_x.y) + (flux_contribution_i_momentum_x.y))); 
# 297
(flux_i_momentum.y) += (factor * ((flux_contribution_nb_momentum_y.y) + (flux_contribution_i_momentum_y.y))); 
# 298
(flux_i_momentum.z) += (factor * ((flux_contribution_nb_momentum_z.y) + (flux_contribution_i_momentum_z.y))); 
# 300
factor = (((float)(0.5F)) * (normal.z)); 
# 301
flux_i_density += (factor * ((momentum_nb.z) + (momentum_i.z))); 
# 302
flux_i_density_energy += (factor * ((flux_contribution_nb_density_energy.z) + (flux_contribution_i_density_energy.z))); 
# 303
(flux_i_momentum.x) += (factor * ((flux_contribution_nb_momentum_x.z) + (flux_contribution_i_momentum_x.z))); 
# 304
(flux_i_momentum.y) += (factor * ((flux_contribution_nb_momentum_y.z) + (flux_contribution_i_momentum_y.z))); 
# 305
(flux_i_momentum.z) += (factor * ((flux_contribution_nb_momentum_z.z) + (flux_contribution_i_momentum_z.z))); 
# 306
} else { 
# 307
if (nb == (-1)) 
# 308
{ 
# 309
(flux_i_momentum.x) += ((normal.x) * pressure_i); 
# 310
(flux_i_momentum.y) += ((normal.y) * pressure_i); 
# 311
(flux_i_momentum.z) += ((normal.z) * pressure_i); 
# 312
} else { 
# 313
if (nb == (-2)) 
# 314
{ 
# 315
factor = (((float)(0.5F)) * (normal.x)); 
# 316
flux_i_density += (factor * (((ff_variable)[1 + 0]) + (momentum_i.x))); 
# 317
flux_i_density_energy += (factor * ((((ff_flux_contribution_density_energy)[0]).x) + (flux_contribution_i_density_energy.x))); 
# 318
(flux_i_momentum.x) += (factor * ((((ff_flux_contribution_momentum_x)[0]).x) + (flux_contribution_i_momentum_x.x))); 
# 319
(flux_i_momentum.y) += (factor * ((((ff_flux_contribution_momentum_y)[0]).x) + (flux_contribution_i_momentum_y.x))); 
# 320
(flux_i_momentum.z) += (factor * ((((ff_flux_contribution_momentum_z)[0]).x) + (flux_contribution_i_momentum_z.x))); 
# 322
factor = (((float)(0.5F)) * (normal.y)); 
# 323
flux_i_density += (factor * (((ff_variable)[1 + 1]) + (momentum_i.y))); 
# 324
flux_i_density_energy += (factor * ((((ff_flux_contribution_density_energy)[0]).y) + (flux_contribution_i_density_energy.y))); 
# 325
(flux_i_momentum.x) += (factor * ((((ff_flux_contribution_momentum_x)[0]).y) + (flux_contribution_i_momentum_x.y))); 
# 326
(flux_i_momentum.y) += (factor * ((((ff_flux_contribution_momentum_y)[0]).y) + (flux_contribution_i_momentum_y.y))); 
# 327
(flux_i_momentum.z) += (factor * ((((ff_flux_contribution_momentum_z)[0]).y) + (flux_contribution_i_momentum_z.y))); 
# 329
factor = (((float)(0.5F)) * (normal.z)); 
# 330
flux_i_density += (factor * (((ff_variable)[1 + 2]) + (momentum_i.z))); 
# 331
flux_i_density_energy += (factor * ((((ff_flux_contribution_density_energy)[0]).z) + (flux_contribution_i_density_energy.z))); 
# 332
(flux_i_momentum.x) += (factor * ((((ff_flux_contribution_momentum_x)[0]).z) + (flux_contribution_i_momentum_x.z))); 
# 333
(flux_i_momentum.y) += (factor * ((((ff_flux_contribution_momentum_y)[0]).z) + (flux_contribution_i_momentum_y.z))); 
# 334
(flux_i_momentum.z) += (factor * ((((ff_flux_contribution_momentum_z)[0]).z) + (flux_contribution_i_momentum_z.z))); 
# 336
}  }  }  
# 337
}  
# 339
(fluxes[i + (0 * nelr)]) = flux_i_density; 
# 340
(fluxes[i + ((1 + 0) * nelr)]) = (flux_i_momentum.x); 
# 341
(fluxes[i + ((1 + 1) * nelr)]) = (flux_i_momentum.y); 
# 342
(fluxes[i + ((1 + 2) * nelr)]) = (flux_i_momentum.z); 
# 343
(fluxes[i + ((1 + 3) * nelr)]) = flux_i_density_energy; 
# 344
} 
#endif
# 345 "euler3d.cu"
void compute_flux(int nelr, int *elements_surrounding_elements, float *normals, float *variables, float *fluxes) 
# 346
{ 
# 347
dim3 Dg(nelr / 192), Db(192); 
# 348
cudaConfigureCall(Dg, Db) ? ((void)0) : cuda_compute_flux(nelr, elements_surrounding_elements, normals, variables, fluxes); 
# 349
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "compute_flux failed", "euler3d.cu", 349, cudaGetErrorString(err)); exit(1); }  } ; 
# 350
} 
# 352
void cuda_time_step(int j, int nelr, float *old_variables, float *variables, float *step_factors, float *fluxes) ;
#if 0
# 353
{ 
# 354
const int i = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x)); 
# 356
float factor = ((step_factors[i]) / ((float)((3 + 1) - j))); 
# 358
(variables[i + (0 * nelr)]) = ((old_variables[i + (0 * nelr)]) + (factor * (fluxes[i + (0 * nelr)]))); 
# 359
(variables[i + ((1 + 3) * nelr)]) = ((old_variables[i + ((1 + 3) * nelr)]) + (factor * (fluxes[i + ((1 + 3) * nelr)]))); 
# 360
(variables[i + ((1 + 0) * nelr)]) = ((old_variables[i + ((1 + 0) * nelr)]) + (factor * (fluxes[i + ((1 + 0) * nelr)]))); 
# 361
(variables[i + ((1 + 1) * nelr)]) = ((old_variables[i + ((1 + 1) * nelr)]) + (factor * (fluxes[i + ((1 + 1) * nelr)]))); 
# 362
(variables[i + ((1 + 2) * nelr)]) = ((old_variables[i + ((1 + 2) * nelr)]) + (factor * (fluxes[i + ((1 + 2) * nelr)]))); 
# 363
} 
#endif
# 364 "euler3d.cu"
void time_step(int j, int nelr, float *old_variables, float *variables, float *step_factors, float *fluxes) 
# 365
{ 
# 366
dim3 Dg(nelr / 192), Db(192); 
# 367
cudaConfigureCall(Dg, Db) ? ((void)0) : cuda_time_step(j, nelr, old_variables, variables, step_factors, fluxes); 
# 368
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "update failed", "euler3d.cu", 368, cudaGetErrorString(err)); exit(1); }  } ; 
# 369
} 
# 374
int main(int argc, char **argv) 
# 375
{ 
# 376
if (argc < 2) 
# 377
{ 
# 378
(((std::cout << ("specify data file name"))) << (std::endl)); 
# 379
return 0; 
# 380
}  
# 381
const char *data_file_name = (argv[1]); 
# 382
if (argc == 3) { 
# 383
iterations = (atoi(argv[2])); 
# 384
}  
# 386
cudaDeviceProp prop; 
# 387
int dev; 
# 389
{ cudaError err = cudaSetDevice(0); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 389, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 390
{ cudaError err = cudaGetDevice(&dev); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 390, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 391
{ cudaError err = cudaGetDeviceProperties(&prop, dev); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 391, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 393
printf("Name:                     %s\n", prop.name); 
# 397
float h_ff_variable[4 + 1]; 
# 398
const float angle_of_attack = (((float)((3.141592653589793116) / ((180.0F)))) * ((float)(0.0F))); 
# 400
((h_ff_variable)[0]) = ((float)(1.399999999999999911)); 
# 402
float ff_pressure = ((float)(1.0F)); 
# 403
float ff_speed_of_sound = sqrt(((1.399999976F) * ff_pressure) / ((h_ff_variable)[0])); 
# 404
float ff_speed = (((float)(1.200000048F)) * ff_speed_of_sound); 
# 406
float3 ff_velocity; 
# 407
(ff_velocity.x) = (ff_speed * ((float)cos((float)angle_of_attack))); 
# 408
(ff_velocity.y) = (ff_speed * ((float)sin((float)angle_of_attack))); 
# 409
(ff_velocity.z) = (0.0F); 
# 411
((h_ff_variable)[1 + 0]) = (((h_ff_variable)[0]) * (ff_velocity.x)); 
# 412
((h_ff_variable)[1 + 1]) = (((h_ff_variable)[0]) * (ff_velocity.y)); 
# 413
((h_ff_variable)[1 + 2]) = (((h_ff_variable)[0]) * (ff_velocity.z)); 
# 415
((h_ff_variable)[1 + 3]) = ((((h_ff_variable)[0]) * (((float)(0.5F)) * (ff_speed * ff_speed))) + (ff_pressure / ((float)((1.399999976F) - (1.0F))))); 
# 417
float3 h_ff_momentum; 
# 418
(h_ff_momentum.x) = (*(((h_ff_variable) + 1) + 0)); 
# 419
(h_ff_momentum.y) = (*(((h_ff_variable) + 1) + 1)); 
# 420
(h_ff_momentum.z) = (*(((h_ff_variable) + 1) + 2)); 
# 421
float3 h_ff_flux_contribution_momentum_x; 
# 422
float3 h_ff_flux_contribution_momentum_y; 
# 423
float3 h_ff_flux_contribution_momentum_z; 
# 424
float3 h_ff_flux_contribution_density_energy; 
# 428
int nel; 
# 429
int nelr; 
# 432
float *areas; 
# 433
int *elements_surrounding_elements; 
# 434
float *normals; 
# 436
std::ifstream file(data_file_name); 
# 438
(file >> nel); 
# 439
nelr = (192 * ((nel / 192) + std::min(1, (nel % 192)))); 
# 441
float *h_areas = (new float [nelr]); 
# 442
int *h_elements_surrounding_elements = (new int [nelr * 4]); 
# 443
float *h_normals = (new float [(nelr * 3) * 4]); 
# 447
for (int i = 0; i < nel; i++) 
# 448
{ 
# 449
(file >> (h_areas[i])); 
# 450
for (int j = 0; j < 4; j++) 
# 451
{ 
# 452
(file >> (h_elements_surrounding_elements[i + (j * nelr)])); 
# 453
if ((h_elements_surrounding_elements[i + (j * nelr)]) < 0) { (h_elements_surrounding_elements[i + (j * nelr)]) = (-1); }  
# 454
(h_elements_surrounding_elements[i + (j * nelr)])--; 
# 456
for (int k = 0; k < 3; k++) 
# 457
{ 
# 458
(file >> (h_normals[i + ((j + (k * 4)) * nelr)])); 
# 459
(h_normals[i + ((j + (k * 4)) * nelr)]) = (-(h_normals[i + ((j + (k * 4)) * nelr)])); 
# 460
}  
# 461
}  
# 462
}  
# 465
int last = (nel - 1); 
# 466
for (int i = nel; i < nelr; i++) 
# 467
{ 
# 468
(h_areas[i]) = (h_areas[last]); 
# 469
for (int j = 0; j < 4; j++) 
# 470
{ 
# 472
(h_elements_surrounding_elements[i + (j * nelr)]) = (h_elements_surrounding_elements[last + (j * nelr)]); 
# 473
for (int k = 0; k < 3; k++) { (h_normals[last + ((j + (k * 4)) * nelr)]) = (h_normals[last + ((j + (k * 4)) * nelr)]); }  
# 474
}  
# 475
}  
# 477
areas = alloc< float> (nelr); 
# 479
elements_surrounding_elements = alloc< int> (nelr * 4); 
# 481
normals = alloc< float> ((nelr * 3) * 4); 
# 487
m5_work_begin(0, 0); 
# 489
compute_flux_contribution((h_ff_variable)[0], h_ff_momentum, (h_ff_variable)[1 + 3], ff_pressure, ff_velocity, h_ff_flux_contribution_momentum_x, h_ff_flux_contribution_momentum_y, h_ff_flux_contribution_momentum_z, h_ff_flux_contribution_density_energy); 
# 492
{ cudaError err = cudaMemcpyToSymbol(ff_variable, h_ff_variable, ((1 + 3) + 1) * sizeof(float)); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 492, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 493
{ cudaError err = cudaMemcpyToSymbol(ff_flux_contribution_momentum_x, &h_ff_flux_contribution_momentum_x, sizeof(float3)); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 493, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 494
{ cudaError err = cudaMemcpyToSymbol(ff_flux_contribution_momentum_y, &h_ff_flux_contribution_momentum_y, sizeof(float3)); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 494, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 495
{ cudaError err = cudaMemcpyToSymbol(ff_flux_contribution_momentum_z, &h_ff_flux_contribution_momentum_z, sizeof(float3)); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 495, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 497
{ cudaError err = cudaMemcpyToSymbol(ff_flux_contribution_density_energy, &h_ff_flux_contribution_density_energy, sizeof(float3)); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error in file \'%s\' in line %i : %s.\n", "euler3d.cu", 497, cudaGetErrorString(err)); exit(1); }  } ; ; 
# 499
upload< float> (areas, h_areas, nelr); 
# 500
upload< int> (elements_surrounding_elements, h_elements_surrounding_elements, nelr * 4); 
# 501
upload< float> (normals, h_normals, (nelr * 3) * 4); 
# 504
float *variables = alloc< float> (nelr * ((1 + 3) + 1)); 
# 505
initialize_variables(nelr, variables); 
# 507
float *old_variables = alloc< float> (nelr * ((1 + 3) + 1)); 
# 508
float *fluxes = alloc< float> (nelr * ((1 + 3) + 1)); 
# 509
float *step_factors = alloc< float> (nelr); 
# 512
initialize_variables(nelr, old_variables); 
# 513
initialize_variables(nelr, fluxes); 
# 514
cudaMemset((void *)step_factors, 0, sizeof(float) * nelr); 
# 516
cudaThreadSynchronize(); 
# 519
(((std::cout << ("Starting..."))) << (std::endl)); 
# 522
unsigned timer = (0); 
# 523
if ((CUTTrue) != (cutCreateTimer(&timer))) { fprintf(stderr, "Cut error in file \'%s\' in line %i.\n", "euler3d.cu", 523); exit(1); }  ; 
# 524
if ((CUTTrue) != (cutStartTimer(timer))) { fprintf(stderr, "Cut error in file \'%s\' in line %i.\n", "euler3d.cu", 524); exit(1); }  ; 
# 527
for (int i = 0; i < iterations; i++) 
# 528
{ 
# 529
copy< float> (old_variables, variables, nelr * ((1 + 3) + 1)); 
# 532
compute_step_factor(nelr, variables, areas, step_factors); 
# 533
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "compute_step_factor failed", "euler3d.cu", 533, cudaGetErrorString(err)); exit(1); }  } ; 
# 535
for (int j = 0; j < 3; j++) 
# 536
{ 
# 537
compute_flux(nelr, elements_surrounding_elements, normals, variables, fluxes); 
# 538
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "compute_flux failed", "euler3d.cu", 538, cudaGetErrorString(err)); exit(1); }  } ; 
# 539
time_step(j, nelr, old_variables, variables, step_factors, fluxes); 
# 540
{ cudaError_t err = cudaGetLastError(); if ((cudaSuccess) != err) { fprintf(stderr, "Cuda error: %s in file \'%s\' in line %i : %s.\n", "time_step failed", "euler3d.cu", 540, cudaGetErrorString(err)); exit(1); }  } ; 
# 541
}  
# 542
}  
# 544
cudaThreadSynchronize(); 
# 546
m5_work_end(0, 0); 
# 548
if ((CUTTrue) != (cutStopTimer(timer))) { fprintf(stderr, "Cut error in file \'%s\' in line %i.\n", "euler3d.cu", 548); exit(1); }  ; 
# 550
(((((std::cout << (((cutGetAverageTimerValue(timer)) / (1000.0)) / iterations))) << (" seconds per iteration"))) << (std::endl)); 
# 552
(((std::cout << ("Saving solution..."))) << (std::endl)); 
# 553
dump(variables, nel, nelr); 
# 554
(((std::cout << ("Saved solution..."))) << (std::endl)); 
# 557
(((std::cout << ("Cleaning up..."))) << (std::endl)); 
# 558
delete [] h_areas; 
# 559
delete [] h_elements_surrounding_elements; 
# 560
delete [] h_normals; 
# 564
dealloc< float> (areas); 
# 565
dealloc< int> (elements_surrounding_elements); 
# 566
dealloc< float> (normals); 
# 568
dealloc< float> (variables); 
# 569
dealloc< float> (old_variables); 
# 570
dealloc< float> (fluxes); 
# 571
dealloc< float> (step_factors); 
# 573
(((std::cout << ("Done..."))) << (std::endl)); 
# 575
return 0; 
# 576
} 
# 1 "euler3d.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__15_euler3d_cpp4_ii_78e67203
# 1 "euler3d.cudafe1.stub.c"
#include "euler3d.cudafe1.stub.c"
# 1 "euler3d.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
