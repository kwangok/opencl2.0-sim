//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_20, texmode_independent
.address_size 64

	// .globl	reduceRMQ
.shared .align 8 .b8 __clc_wg_shared_buffer[32];
.shared .align 8 .b8 __clc_wg_scan_shared_buffer[8720];
.shared .align 8 .b8 __clc_wg_reduce_shared_buffer[8720];
                                        // @reduceRMQ
.entry reduceRMQ(
	.param .u64 .ptr .global .align 4 reduceRMQ_param_0,
	.param .u64 .ptr .global .align 4 reduceRMQ_param_1,
	.param .u64 .ptr .shared .align 4 reduceRMQ_param_2
)
{
	.reg .pred 	%p<9>;
	.reg .s32 	%r<10>;
	.reg .s64 	%rd<81>;

// BB#0:                                // %entry
	ld.param.u64 	%rd17, [reduceRMQ_param_1];
	ld.param.u64 	%rd19, [reduceRMQ_param_0];
	mov.u32	%r3, %ctaid.x;
	ld.param.u64 	%rd20, [reduceRMQ_param_2];
	mov.u32	%r1, %ntid.x;
	cvt.s64.s32	%rd2, %r1;
	mul.wide.s32 	%rd21, %r1, %r3;
	mov.u32	%r2, %tid.x;
	cvt.s64.s32	%rd3, %r2;
	add.s64 	%rd22, %rd3, %rd21;
	and.b64  	%rd23, %rd22, 4294967295;
	shl.b64 	%rd24, %rd23, 2;
	add.s64 	%rd25, %rd19, %rd24;
	ld.global.u32 	%r4, [%rd25];
	and.b64  	%rd26, %rd3, 4294967295;
	shl.b64 	%rd27, %rd26, 2;
	add.s64 	%rd28, %rd20, %rd27;
	st.shared.u32 	[%rd28], %r4;
	shr.u64 	%rd29, %rd3, 4;
	shr.u64 	%rd30, %rd3, 8;
	add.s64 	%rd31, %rd30, %rd3;
	add.s64 	%rd32, %rd31, %rd29;
	shl.b64 	%rd33, %rd32, 2;
	mov.u64 	%rd34, __clc_wg_reduce_shared_buffer;
	add.s64 	%rd4, %rd34, %rd33;
	st.shared.u32 	[%rd4], %r4;
	shr.u64 	%rd77, %rd2, 1;
	setp.eq.s64	%p1, %rd77, 0;
	@%p1 bra 	LBB0_1;
// BB#2:                                // %for.body.lr.ph.i
	shl.b64 	%rd36, %rd3, 1;
	or.b64  	%rd6, %rd36, 1;
	mov.u64 	%rd78, 1;
LBB0_5:                                 // %for.body.i
                                        // =>This Inner Loop Header: Depth=1
	bar.sync	0;
	setp.ge.u64	%p2, %rd3, %rd77;
	@%p2 bra 	LBB0_7;
// BB#6:                                // %if.then.i
                                        //   in Loop: Header=BB0_5 Depth=1
	mul.lo.s64 	%rd37, %rd78, %rd6;
	add.s64 	%rd38, %rd37, -1;
	add.s64 	%rd39, %rd37, %rd78;
	add.s64 	%rd40, %rd39, -1;
	shr.u64 	%rd41, %rd38, 4;
	shr.u64 	%rd42, %rd38, 8;
	shr.u64 	%rd43, %rd40, 4;
	shr.u64 	%rd44, %rd40, 8;
	add.s64 	%rd45, %rd42, %rd37;
	add.s64 	%rd46, %rd45, %rd41;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd49, %rd34, %rd47;
	ld.shared.u32 	%r5, [%rd49+-4];
	add.s64 	%rd50, %rd44, %rd39;
	add.s64 	%rd51, %rd50, %rd43;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd53, %rd34, %rd52;
	ld.shared.u32 	%r6, [%rd53+-4];
	setp.lt.u32	%p3, %r5, %r6;
	selp.b32	%r7, %r5, %r6, %p3;
	st.shared.u32 	[%rd53+-4], %r7;
LBB0_7:                                 // %if.end.i
                                        //   in Loop: Header=BB0_5 Depth=1
	shl.b64 	%rd78, %rd78, 1;
	shr.u64 	%rd77, %rd77, 1;
	setp.eq.s64	%p4, %rd77, 0;
	@%p4 bra 	LBB0_3;
	bra.uni 	LBB0_5;
LBB0_1:
	mov.u64 	%rd78, 1;
LBB0_3:                                 // %for.cond.25.preheader.i
	setp.lt.u32	%p5, %r1, 2;
	@%p5 bra 	LBB0_11;
// BB#4:                                // %for.body.27.lr.ph.i
	shl.b64 	%rd55, %rd3, 1;
	or.b64  	%rd8, %rd55, 1;
	mov.u64 	%rd80, 1;
LBB0_8:                                 // %for.body.27.i
                                        // =>This Inner Loop Header: Depth=1
	shr.u64 	%rd78, %rd78, 1;
	bar.sync	0;
	setp.ge.u64	%p6, %rd3, %rd80;
	@%p6 bra 	LBB0_10;
// BB#9:                                // %if.then.30.i
                                        //   in Loop: Header=BB0_8 Depth=1
	mul.lo.s64 	%rd56, %rd78, %rd8;
	add.s64 	%rd57, %rd56, -1;
	add.s64 	%rd58, %rd56, %rd78;
	add.s64 	%rd59, %rd58, -1;
	shr.u64 	%rd60, %rd57, 4;
	shr.u64 	%rd61, %rd57, 8;
	shr.u64 	%rd62, %rd59, 4;
	shr.u64 	%rd63, %rd59, 8;
	add.s64 	%rd64, %rd63, %rd58;
	add.s64 	%rd65, %rd64, %rd62;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd68, %rd34, %rd66;
	ld.shared.u32 	%r8, [%rd68+-4];
	add.s64 	%rd69, %rd61, %rd56;
	add.s64 	%rd70, %rd69, %rd60;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd72, %rd34, %rd71;
	st.shared.u32 	[%rd72+-4], %r8;
LBB0_10:                                // %for.inc.52.i
                                        //   in Loop: Header=BB0_8 Depth=1
	shl.b64 	%rd80, %rd80, 1;
	setp.lt.u64	%p7, %rd80, %rd2;
	@%p7 bra 	LBB0_8;
LBB0_11:                                // %_Z21work_group_reduce_minj.exit
	bar.sync	0;
	setp.ne.s32	%p8, %r2, 0;
	@%p8 bra 	LBB0_13;
// BB#12:                               // %if.then
	cvt.s64.s32	%rd1, %r3;
	ld.shared.u32 	%r9, [%rd4];
	and.b64  	%rd73, %rd1, 4294967295;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd75, %rd17, %rd74;
	st.global.u32 	[%rd75], %r9;
LBB0_13:                                // %if.end
	ret;
}


